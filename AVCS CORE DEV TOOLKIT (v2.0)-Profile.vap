<?xml version="1.0" encoding="utf-8"?>
<Profile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <HasMB>false</HasMB>
  <Id>eb37b440-3a2f-4f9e-8c41-adc3cbffe084</Id>
  <Name>AVCS CORE DEV TOOLKIT (v2.0)</Name>
  <Commands>
    <Command>
      <Referrer xsi:nil="true" />
      <ExecType>3</ExecType>
      <Confidence>0</Confidence>
      <PrefixActionCount>0</PrefixActionCount>
      <IsDynamicallyCreated>false</IsDynamicallyCreated>
      <TargetProcessSet>false</TargetProcessSet>
      <TargetProcessType>0</TargetProcessType>
      <TargetProcessLevel>0</TargetProcessLevel>
      <CompareType>0</CompareType>
      <ExecFromWildcard>false</ExecFromWildcard>
      <IsSubCommand>false</IsSubCommand>
      <IsOverride>false</IsOverride>
      <BaseId>c73822a0-b21e-46d0-9856-b4b430752023</BaseId>
      <OriginId>00000000-0000-0000-0000-000000000000</OriginId>
      <SessionEnabled>true</SessionEnabled>
      <DoubleTapInvoked>false</DoubleTapInvoked>
      <SingleTapDelayedInvoked>false</SingleTapDelayedInvoked>
      <LongTapInvoked>false</LongTapInvoked>
      <ShortTapDelayedInvoked>false</ShortTapDelayedInvoked>
      <SleepFlag>0</SleepFlag>
      <Id>ee818a81-ce3b-4540-b720-19cb668b9119</Id>
      <CommandString>[Lock;Unlock] [the;uh;a;] Keyboard</CommandString>
      <ActionSequence>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>434963fc-b60a-4193-b8c5-517fc5696d59</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// Simple Keyboard Lock - Anti-"Cat Profie Edits" System</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>62ce1c50-94b6-4801-b429-03e6225ff6e6</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// by SemlerPDX Jul2024</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>181a7bce-6dd4-45da-a1c5-e40ae2a03b8f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// GitHub.com/SemlerPDX/AVCS</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>07aa4aad-b98a-46bd-ae10-d06393b67ea6</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>cb88aad0-8969-475c-9cfb-ff50e98df87c</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// OBVIOUSLY NOTE:  Cannot block the Windows holy three-finger-salute command CTRL+ALT+DEL or certain other protected Windows key combos</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>c4e82bd3-e080-4101-b22e-0be9c1af0fdf</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 xml:space="preserve">unlock</Context2>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>7</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartNameFrom>{CMDSEGMENT:0}</ConditionStartNameFrom>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions>
            <ArrayOfConditionStruct>
              <ConditionStruct>
                <Id>dd675797-ee72-490d-bbee-0bfd82138172</Id>
                <ConditionStartType>1</ConditionStartType>
                <ConditionStartNameFrom>{CMDSEGMENT:0}</ConditionStartNameFrom>
                <ConditionStartValueType>0</ConditionStartValueType>
                <ConditionStartValue>0</ConditionStartValue>
                <ConditionStartCompareToCondtion />
                <Z>1</Z>
                <ConditionStartOperator>0</ConditionStartOperator>
                <Context2 xml:space="preserve">unlock</Context2>
                <DateContext1>0001-01-01T16:00:00Z</DateContext1>
                <DecimalContext1>0</DecimalContext1>
              </ConditionStruct>
            </ArrayOfConditionStruct>
          </ConditionExpressions>
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>8b5d7720-4e1c-41df-bb06-ce0308234dba</Id>
          <ActionType>BlockKeyboard</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1734cc7f-975d-41ac-aa08-ca3c552d74c1</Id>
          <ActionType>ConditionElse</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>9</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>f69ff2da-18c7-4136-98b9-99e6233e6a0c</Id>
          <ActionType>BlockKeyboard</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>f5e9d02a-20b4-4444-a42d-96a287343658</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>5</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>31f19c7c-8ec1-43f5-8e4e-d77c372e9355</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 xml:space="preserve">Spoken</Context2>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>12</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartNameFrom>{CMDACTION}</ConditionStartNameFrom>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>4a3d59e7-bcbe-42d5-9fa7-f0ef24329617</Id>
          <ActionType>Say</ActionType>
          <Duration>1</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Done.</Context>
          <Context3>00000000-0000-0000-0000-000000000000</Context3>
          <Context4>Default</Context4>
          <X>70</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>097a98f3-998f-4519-9cde-4bb022aa3fcf</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>10</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
      </ActionSequence>
      <Async>true</Async>
      <Enabled>true</Enabled>
      <Description>Lock/Unlock Keyboard Keys  (aka "no feline computer use mode")</Description>
      <Category>AVCS CORE DEV TOOLBOX</Category>
      <UseShortcut>true</UseShortcut>
      <keyValue>75</keyValue>
      <keyShift>160</keyShift>
      <keyAlt>164</keyAlt>
      <keyCtrl>162</keyCtrl>
      <keyWin>0</keyWin>
      <keyPassthru>true</keyPassthru>
      <UseSpokenPhrase>true</UseSpokenPhrase>
      <onlyKeyUp>true</onlyKeyUp>
      <RepeatNumber>2</RepeatNumber>
      <RepeatType>0</RepeatType>
      <CommandType>0</CommandType>
      <SourceProfile>00000000-0000-0000-0000-000000000000</SourceProfile>
      <UseConfidence>false</UseConfidence>
      <minimumConfidenceLevel>0</minimumConfidenceLevel>
      <UseJoystick>false</UseJoystick>
      <joystickNumber>0</joystickNumber>
      <joystickButton>0</joystickButton>
      <joystickNumber2>0</joystickNumber2>
      <joystickButton2>0</joystickButton2>
      <joystickUp>false</joystickUp>
      <KeepRepeating>false</KeepRepeating>
      <UseProcessOverride>false</UseProcessOverride>
      <ProcessOverrideActiveWindow>true</ProcessOverrideActiveWindow>
      <LostFocusStop>false</LostFocusStop>
      <PauseLostFocus>false</PauseLostFocus>
      <LostFocusBackCompat>true</LostFocusBackCompat>
      <UseMouse>false</UseMouse>
      <Mouse1>false</Mouse1>
      <Mouse2>false</Mouse2>
      <Mouse3>false</Mouse3>
      <Mouse4>false</Mouse4>
      <Mouse5>false</Mouse5>
      <Mouse6>false</Mouse6>
      <Mouse7>false</Mouse7>
      <Mouse8>false</Mouse8>
      <Mouse9>false</Mouse9>
      <MouseUpOnly>false</MouseUpOnly>
      <MousePassThru>true</MousePassThru>
      <joystickExclusive>false</joystickExclusive>
      <lastEditedAction>75f9a1a3-5e58-4db0-b677-554504b8f2f1</lastEditedAction>
      <UseProfileProcessOverride>false</UseProfileProcessOverride>
      <ProfileProcessOverrideActiveWindow>false</ProfileProcessOverrideActiveWindow>
      <RepeatIfKeysDown>false</RepeatIfKeysDown>
      <RepeatIfMouseDown>false</RepeatIfMouseDown>
      <RepeatIfJoystickDown>false</RepeatIfJoystickDown>
      <AH>0</AH>
      <CL>0</CL>
      <HasMB>false</HasMB>
      <UseVariableHotkey>false</UseVariableHotkey>
      <CLE>0</CLE>
      <EX1>false</EX1>
      <EX2>false</EX2>
      <InternalId xsi:nil="true" />
      <HasInput>false</HasInput>
      <HotkeyDoubleTapLevel>0</HotkeyDoubleTapLevel>
      <MouseDoubleTapLevel>0</MouseDoubleTapLevel>
      <JoystickDoubleTapLevel>0</JoystickDoubleTapLevel>
      <HotkeyLongTapLevel>0</HotkeyLongTapLevel>
      <MouseLongTapLevel>0</MouseLongTapLevel>
      <JoystickLongTapLevel>0</JoystickLongTapLevel>
      <AlwaysExec>false</AlwaysExec>
      <ResourceBalance>0</ResourceBalance>
      <PreventExec>false</PreventExec>
      <ExternalEventsEnabled>false</ExternalEventsEnabled>
      <ExcludeExecOnRecognized>false</ExcludeExecOnRecognized>
      <UseVariableMouseShortcut>false</UseVariableMouseShortcut>
      <UseVariableJoystickShortcut>false</UseVariableJoystickShortcut>
    </Command>
    <Command>
      <Referrer xsi:nil="true" />
      <ExecType>3</ExecType>
      <Confidence>0</Confidence>
      <PrefixActionCount>0</PrefixActionCount>
      <IsDynamicallyCreated>false</IsDynamicallyCreated>
      <TargetProcessSet>false</TargetProcessSet>
      <TargetProcessType>0</TargetProcessType>
      <TargetProcessLevel>0</TargetProcessLevel>
      <CompareType>0</CompareType>
      <ExecFromWildcard>false</ExecFromWildcard>
      <IsSubCommand>false</IsSubCommand>
      <IsOverride>false</IsOverride>
      <BaseId>af7cfcc5-35ec-4dde-a5ee-eb5bacc449e3</BaseId>
      <OriginId>00000000-0000-0000-0000-000000000000</OriginId>
      <SessionEnabled>true</SessionEnabled>
      <DoubleTapInvoked>false</DoubleTapInvoked>
      <SingleTapDelayedInvoked>false</SingleTapDelayedInvoked>
      <LongTapInvoked>false</LongTapInvoked>
      <ShortTapDelayedInvoked>false</ShortTapDelayedInvoked>
      <SleepFlag>0</SleepFlag>
      <Id>0a55966d-ae63-4c76-9be2-8b5604451f94</Id>
      <CommandString>[Read;Display;Show me;Check] [the;uh;a;] [text;boolean;integer;decimal;date;] [variable;value;variable value]</CommandString>
      <ActionSequence>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>14477777-bccc-4ec1-8121-eeb71e1c6067</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// AVCS CORE - Utility "Check a Variable Value" Command for use in testing, debugging, or development</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>fba43125-8764-492f-89bc-3ac0b1eb8ebb</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// by SemlerPDX Mar2022/Jul2025</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>03cfcf1a-3f97-4efb-a506-c98d604d8197</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// GitHub.com/SemlerPDX/AVCS</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>18bb3ade-8da4-4bff-b211-cdfbf6b213a3</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e3c139a7-119d-446d-a8d1-9ec09371b98e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>6b82f515-1a05-479b-80c8-7c399814e68b</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>7</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartNameFrom>{CMDSEGMENT:2}</ConditionStartNameFrom>
          <ConditionStartOperator>1</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>5bcfbe40-474d-4f54-bbbd-5d066ae63b81</Id>
          <ActionType>TextSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_check_var_type</Context>
          <Context2 xml:space="preserve">{CMDSEGMENT:2}</Context2>
          <Context3 />
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionSetName />
          <ConditionSetCondition />
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>516326bd-bc7e-42a1-87d9-7c807b3fae73</Id>
          <ActionType>ConditionElse</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>9</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a6945483-9f94-442d-8f39-3581cc490452</Id>
          <ActionType>GetUserList</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_check_var_type</Context>
          <Context2 xml:space="preserve">Choose a Variable Type to check below and press OK</Context2>
          <Context3>AVCS CORE - Get Variable Type to Check</Context3>
          <Context4>text;integer;decimal;boolean;date</Context4>
          <Context5 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>192325a4-450f-45b4-9df5-8db2b522a598</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>5</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1e3e7b9c-f4b8-41ef-9b5d-fa56573371d5</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ba41d6c1-4f76-40a4-828d-9ab6abce1fe3</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 xml:space="preserve">text</Context2>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>14</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartNameFrom>~avcs_check_var_type</ConditionStartNameFrom>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>9e2725e7-946c-4cb6-ae43-75d2a3b63ceb</Id>
          <ActionType>GetUserText</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_check_var_name</Context>
          <Context2 xml:space="preserve">Paste a VoiceAttack Text Variable name below and press OK to display any contained data in the Event Log.  Will read 'empty' if not set, and a literal 'Not set' upon error elsewhere</Context2>
          <Context3>AVCS CORE - Get Text Variable Info</Context3>
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>4cdc8b65-15c5-4024-9bf2-0d3957dafa58</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Text Variable Value of {TXT:~avcs_check_var_name:unknown variable name} = {TXT:{TXT:~avcs_check_var_name}:not set}</Context>
          <X>2</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>7747480d-85d3-4e9d-b6ad-425705587db4</Id>
          <ActionType>ConditionElseIf</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 xml:space="preserve">boolean</Context2>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>18</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartNameFrom>~avcs_check_var_type</ConditionStartNameFrom>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>69fa6ba1-a038-49b1-8c9a-3c2e320135b8</Id>
          <ActionType>GetUserText</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_check_var_name</Context>
          <Context2 xml:space="preserve">Paste a VoiceAttack Boolean Variable name below and press OK to display any contained data in the Event Log.</Context2>
          <Context3>AVCS CORE - Get Boolean Variable Info</Context3>
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ba4b9732-013a-4f01-89ca-78fe011a3a6b</Id>
          <ActionType>TextSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_check_var_value</Context>
          <Context2 xml:space="preserve">{BOOL:{TXT:~avcs_check_var_name}}</Context2>
          <Context3 />
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionSetName />
          <ConditionSetCondition />
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>b3ced5e5-906c-40cc-a572-677a58d000ca</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Boolean Variable Value of {TXT:~avcs_check_var_name:unknown variable name} = {BOOL:{TXT:~avcs_check_var_name}:false}</Context>
          <X>2</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ea8c3d39-9cef-4822-839f-7962a4a7cfcd</Id>
          <ActionType>ConditionElseIf</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 xml:space="preserve">integer</Context2>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>21</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartNameFrom>~avcs_check_var_type</ConditionStartNameFrom>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>4ba31cfe-9af4-4f35-b6db-756a6ed221bf</Id>
          <ActionType>GetUserText</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_check_var_name</Context>
          <Context2 xml:space="preserve">Paste a VoiceAttack Integer Variable name below and press OK to display any contained data in the Event Log.  Will read '0' if not set</Context2>
          <Context3>AVCS CORE - Get Integer Variable Info</Context3>
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>688771a8-13c5-44d5-a711-3fac1c7df852</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Integer Variable Value of {TXT:~avcs_check_var_name:unknown variable name} = {INT:{TXT:~avcs_check_var_name}:0}</Context>
          <X>2</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>7e76b29a-e992-4fe2-8f5f-09714b91315b</Id>
          <ActionType>ConditionElseIf</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 xml:space="preserve">decimal</Context2>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>24</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartNameFrom>~avcs_check_var_type</ConditionStartNameFrom>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e9e25262-8260-4336-8f1a-f32680a068bf</Id>
          <ActionType>GetUserText</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_check_var_name</Context>
          <Context2 xml:space="preserve">Paste a VoiceAttack Decimal Variable name below and press OK to display any contained data in the Event Log.  Will read '0' if not set</Context2>
          <Context3>AVCS CORE - Get Decimal Variable Info</Context3>
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a94801c0-9d93-4542-b352-b55d636a9f3f</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Decimal Variable Value of {TXT:~avcs_check_var_name:unknown variable name} = {DEC:{TXT:~avcs_check_var_name}:0}</Context>
          <X>2</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>9aea5547-55e4-4921-a793-b2b8068d6717</Id>
          <ActionType>ConditionElseIf</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 xml:space="preserve">date</Context2>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>27</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartNameFrom>~avcs_check_var_type</ConditionStartNameFrom>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>65b7ebc1-b95a-4c0b-87f6-7ab8f3865bb0</Id>
          <ActionType>GetUserText</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_check_var_name</Context>
          <Context2 xml:space="preserve">Paste a VoiceAttack Date Variable name below and press OK to display any contained data in the Event Log.  Will read 'empty' if not set, and a literal 'Not set' upon error elsewhere</Context2>
          <Context3>AVCS CORE - Get Date Variable Info</Context3>
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>dad570ed-1d61-4239-8be4-e234856daa80</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Date Variable Value of {TXT:~avcs_check_var_name:unknown variable name} = {DATE:{TXT:~avcs_check_var_name}}</Context>
          <X>2</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>09f9268f-72d1-422b-960c-749b47423c9f</Id>
          <ActionType>ConditionElse</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>29</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d254abc6-3811-4084-a81e-40ae1be85dcb</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>-(variable check cancelled)-</Context>
          <X>5</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a446958f-6558-4997-84a0-b5a09ed598d6</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>11</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>38e77eb7-0b3a-42ce-9da3-7df451c246c5</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
      </ActionSequence>
      <Async>true</Async>
      <Enabled>true</Enabled>
      <Description>Check VoiceAttack Variable Values for Testing</Description>
      <Category>AVCS CORE DEV TOOLBOX</Category>
      <UseShortcut>false</UseShortcut>
      <keyValue>0</keyValue>
      <keyShift>0</keyShift>
      <keyAlt>0</keyAlt>
      <keyCtrl>0</keyCtrl>
      <keyWin>0</keyWin>
      <keyPassthru>true</keyPassthru>
      <UseSpokenPhrase>true</UseSpokenPhrase>
      <onlyKeyUp>false</onlyKeyUp>
      <RepeatNumber>2</RepeatNumber>
      <RepeatType>0</RepeatType>
      <CommandType>0</CommandType>
      <SourceProfile>00000000-0000-0000-0000-000000000000</SourceProfile>
      <UseConfidence>false</UseConfidence>
      <minimumConfidenceLevel>0</minimumConfidenceLevel>
      <UseJoystick>false</UseJoystick>
      <joystickNumber>0</joystickNumber>
      <joystickButton>0</joystickButton>
      <joystickNumber2>0</joystickNumber2>
      <joystickButton2>0</joystickButton2>
      <joystickUp>false</joystickUp>
      <KeepRepeating>false</KeepRepeating>
      <UseProcessOverride>false</UseProcessOverride>
      <ProcessOverrideActiveWindow>true</ProcessOverrideActiveWindow>
      <LostFocusStop>false</LostFocusStop>
      <PauseLostFocus>false</PauseLostFocus>
      <LostFocusBackCompat>true</LostFocusBackCompat>
      <UseMouse>false</UseMouse>
      <Mouse1>false</Mouse1>
      <Mouse2>false</Mouse2>
      <Mouse3>false</Mouse3>
      <Mouse4>false</Mouse4>
      <Mouse5>false</Mouse5>
      <Mouse6>false</Mouse6>
      <Mouse7>false</Mouse7>
      <Mouse8>false</Mouse8>
      <Mouse9>false</Mouse9>
      <MouseUpOnly>false</MouseUpOnly>
      <MousePassThru>true</MousePassThru>
      <joystickExclusive>false</joystickExclusive>
      <lastEditedAction>5703368e-8afc-4ee0-b0df-8deafb2badc7</lastEditedAction>
      <UseProfileProcessOverride>false</UseProfileProcessOverride>
      <ProfileProcessOverrideActiveWindow>false</ProfileProcessOverrideActiveWindow>
      <RepeatIfKeysDown>false</RepeatIfKeysDown>
      <RepeatIfMouseDown>false</RepeatIfMouseDown>
      <RepeatIfJoystickDown>false</RepeatIfJoystickDown>
      <AH>0</AH>
      <CL>0</CL>
      <HasMB>false</HasMB>
      <UseVariableHotkey>false</UseVariableHotkey>
      <CLE>0</CLE>
      <EX1>false</EX1>
      <EX2>false</EX2>
      <InternalId xsi:nil="true" />
      <HasInput>false</HasInput>
      <HotkeyDoubleTapLevel>0</HotkeyDoubleTapLevel>
      <MouseDoubleTapLevel>0</MouseDoubleTapLevel>
      <JoystickDoubleTapLevel>0</JoystickDoubleTapLevel>
      <HotkeyLongTapLevel>0</HotkeyLongTapLevel>
      <MouseLongTapLevel>0</MouseLongTapLevel>
      <JoystickLongTapLevel>0</JoystickLongTapLevel>
      <AlwaysExec>true</AlwaysExec>
      <ResourceBalance>0</ResourceBalance>
      <PreventExec>false</PreventExec>
      <ExternalEventsEnabled>false</ExternalEventsEnabled>
      <ExcludeExecOnRecognized>false</ExcludeExecOnRecognized>
      <UseVariableMouseShortcut>false</UseVariableMouseShortcut>
      <UseVariableJoystickShortcut>false</UseVariableJoystickShortcut>
    </Command>
    <Command>
      <Referrer xsi:nil="true" />
      <ExecType>3</ExecType>
      <Confidence>0</Confidence>
      <PrefixActionCount>0</PrefixActionCount>
      <IsDynamicallyCreated>false</IsDynamicallyCreated>
      <TargetProcessSet>false</TargetProcessSet>
      <TargetProcessType>0</TargetProcessType>
      <TargetProcessLevel>0</TargetProcessLevel>
      <CompareType>0</CompareType>
      <ExecFromWildcard>false</ExecFromWildcard>
      <IsSubCommand>false</IsSubCommand>
      <IsOverride>false</IsOverride>
      <BaseId>3bd864b2-9b85-4b3e-807e-6bca49003362</BaseId>
      <OriginId>00000000-0000-0000-0000-000000000000</OriginId>
      <SessionEnabled>true</SessionEnabled>
      <DoubleTapInvoked>false</DoubleTapInvoked>
      <SingleTapDelayedInvoked>false</SingleTapDelayedInvoked>
      <LongTapInvoked>false</LongTapInvoked>
      <ShortTapDelayedInvoked>false</ShortTapDelayedInvoked>
      <SleepFlag>0</SleepFlag>
      <Id>52905ba0-b1ab-4e28-a7f6-e20f1073601c</Id>
      <CommandString>[Display;Show] [the;uh;a;] [Voice Attack;VoiceAttack] [Program;Programs] Version</CommandString>
      <ActionSequence>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>158baad7-3c78-47bb-96b3-02443338df85</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//AVCS CORE  - Get current VoiceAttack Program Version</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>77f2e6bc-781e-4975-a72e-03108297b74b</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// by SemlerPDX Jan2019</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>bd2b3c7e-1a57-4c70-b890-5427f28c83f4</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// GitHub.com/SemlerPDX/AVCS</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e99d7b65-d1fb-4ebc-a626-039d79358d9e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>2bd71188-7862-4644-af6f-cdbc98e704b5</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>10c5e281-7923-4f39-99b9-10b963277f57</Id>
          <ActionType>GetUserText</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~voiceattack_version</Context>
          <Context2 xml:space="preserve">VoiceAttack Program Version:  {STATE_VA_VERSION}{NEWLINE}{NEWLINE}Press OK to Copy this number to Clipboard</Context2>
          <Context3>AVCS CORE - Display VoiceAttack Program Version Number</Context3>
          <Context4>{STATE_VA_VERSION}</Context4>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>09dfcf50-2e8d-4548-b041-59782cec3cf0</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>9</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartNameFrom>~voiceattack_version</ConditionStartNameFrom>
          <ConditionStartOperator>1</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions>
            <ArrayOfConditionStruct>
              <ConditionStruct>
                <Id>2822a68a-9084-42b8-97d0-1c5e74cd9262</Id>
                <ConditionStartType>1</ConditionStartType>
                <ConditionStartNameFrom>~avcs_display_version</ConditionStartNameFrom>
                <ConditionStartValueType>0</ConditionStartValueType>
                <ConditionStartValue>0</ConditionStartValue>
                <ConditionStartCompareToCondtion />
                <Z>1</Z>
                <ConditionStartOperator>1</ConditionStartOperator>
                <Context2 />
                <DateContext1>0001-01-02T00:00:00Z</DateContext1>
                <DecimalContext1>0</DecimalContext1>
              </ConditionStruct>
            </ArrayOfConditionStruct>
          </ConditionExpressions>
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>abe67e5f-02bf-4894-b2d2-47b407f863de</Id>
          <ActionType>SetClipboard</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>{STATE_VA_VERSION}</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>5c6b68cb-075d-438b-87d0-303a516651eb</Id>
          <ActionType>Say</ActionType>
          <Duration>1</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>{TXT:AVCS_TTS_COMMON_Completed:Done}</Context>
          <Context3>00000000-0000-0000-0000-000000000000</Context3>
          <Context4>Default</Context4>
          <X>100</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d6121cf0-43c1-440b-88ed-94ba16331990</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>6</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>466c58d2-81f5-4b33-be5c-58e182aab10e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
      </ActionSequence>
      <Async>true</Async>
      <Enabled>true</Enabled>
      <Description>Display VoiceAttack Program Version</Description>
      <Category>AVCS CORE DEV TOOLBOX</Category>
      <UseShortcut>false</UseShortcut>
      <keyValue>0</keyValue>
      <keyShift>0</keyShift>
      <keyAlt>0</keyAlt>
      <keyCtrl>0</keyCtrl>
      <keyWin>0</keyWin>
      <keyPassthru>true</keyPassthru>
      <UseSpokenPhrase>true</UseSpokenPhrase>
      <onlyKeyUp>false</onlyKeyUp>
      <RepeatNumber>2</RepeatNumber>
      <RepeatType>0</RepeatType>
      <CommandType>0</CommandType>
      <SourceProfile>00000000-0000-0000-0000-000000000000</SourceProfile>
      <UseConfidence>false</UseConfidence>
      <minimumConfidenceLevel>0</minimumConfidenceLevel>
      <UseJoystick>false</UseJoystick>
      <joystickNumber>0</joystickNumber>
      <joystickButton>0</joystickButton>
      <joystickNumber2>0</joystickNumber2>
      <joystickButton2>0</joystickButton2>
      <joystickUp>false</joystickUp>
      <KeepRepeating>false</KeepRepeating>
      <UseProcessOverride>false</UseProcessOverride>
      <ProcessOverrideActiveWindow>true</ProcessOverrideActiveWindow>
      <LostFocusStop>false</LostFocusStop>
      <PauseLostFocus>false</PauseLostFocus>
      <LostFocusBackCompat>true</LostFocusBackCompat>
      <UseMouse>false</UseMouse>
      <Mouse1>false</Mouse1>
      <Mouse2>false</Mouse2>
      <Mouse3>false</Mouse3>
      <Mouse4>false</Mouse4>
      <Mouse5>false</Mouse5>
      <Mouse6>false</Mouse6>
      <Mouse7>false</Mouse7>
      <Mouse8>false</Mouse8>
      <Mouse9>false</Mouse9>
      <MouseUpOnly>false</MouseUpOnly>
      <MousePassThru>true</MousePassThru>
      <joystickExclusive>false</joystickExclusive>
      <lastEditedAction>4c7f1606-45b2-4799-8588-8be196933fe4</lastEditedAction>
      <UseProfileProcessOverride>false</UseProfileProcessOverride>
      <ProfileProcessOverrideActiveWindow>false</ProfileProcessOverrideActiveWindow>
      <RepeatIfKeysDown>false</RepeatIfKeysDown>
      <RepeatIfMouseDown>false</RepeatIfMouseDown>
      <RepeatIfJoystickDown>false</RepeatIfJoystickDown>
      <AH>0</AH>
      <CL>0</CL>
      <HasMB>false</HasMB>
      <UseVariableHotkey>false</UseVariableHotkey>
      <CLE>0</CLE>
      <EX1>false</EX1>
      <EX2>false</EX2>
      <InternalId xsi:nil="true" />
      <HasInput>false</HasInput>
      <HotkeyDoubleTapLevel>0</HotkeyDoubleTapLevel>
      <MouseDoubleTapLevel>0</MouseDoubleTapLevel>
      <JoystickDoubleTapLevel>0</JoystickDoubleTapLevel>
      <HotkeyLongTapLevel>0</HotkeyLongTapLevel>
      <MouseLongTapLevel>0</MouseLongTapLevel>
      <JoystickLongTapLevel>0</JoystickLongTapLevel>
      <AlwaysExec>false</AlwaysExec>
      <ResourceBalance>0</ResourceBalance>
      <PreventExec>false</PreventExec>
      <ExternalEventsEnabled>false</ExternalEventsEnabled>
      <ExcludeExecOnRecognized>false</ExcludeExecOnRecognized>
      <UseVariableMouseShortcut>false</UseVariableMouseShortcut>
      <UseVariableJoystickShortcut>false</UseVariableJoystickShortcut>
    </Command>
    <Command>
      <Referrer xsi:nil="true" />
      <ExecType>3</ExecType>
      <Confidence>0</Confidence>
      <PrefixActionCount>0</PrefixActionCount>
      <IsDynamicallyCreated>false</IsDynamicallyCreated>
      <TargetProcessSet>false</TargetProcessSet>
      <TargetProcessType>0</TargetProcessType>
      <TargetProcessLevel>0</TargetProcessLevel>
      <CompareType>0</CompareType>
      <ExecFromWildcard>false</ExecFromWildcard>
      <IsSubCommand>false</IsSubCommand>
      <IsOverride>false</IsOverride>
      <BaseId>ac385da0-0a0a-45a7-bd06-f935edcb158b</BaseId>
      <OriginId>00000000-0000-0000-0000-000000000000</OriginId>
      <SessionEnabled>true</SessionEnabled>
      <DoubleTapInvoked>false</DoubleTapInvoked>
      <SingleTapDelayedInvoked>false</SingleTapDelayedInvoked>
      <LongTapInvoked>false</LongTapInvoked>
      <ShortTapDelayedInvoked>false</ShortTapDelayedInvoked>
      <SleepFlag>0</SleepFlag>
      <Id>eb7bb4f4-d20d-43ea-8dd9-bb71753bf130</Id>
      <CommandString>[Stop;Stopped] [all;] [Command;Commands;]</CommandString>
      <ActionSequence>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>7bf73287-5318-4a7a-a641-796d464bbf8b</Id>
          <ActionType>InternalProcess_StopProcessing</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
      </ActionSequence>
      <Async>true</Async>
      <Enabled>true</Enabled>
      <Description>Stop All Commands  -  (also unlocks keyboard if locked)</Description>
      <Category>AVCS CORE DEV TOOLBOX</Category>
      <UseShortcut>false</UseShortcut>
      <keyValue>0</keyValue>
      <keyShift>0</keyShift>
      <keyAlt>0</keyAlt>
      <keyCtrl>0</keyCtrl>
      <keyWin>0</keyWin>
      <keyPassthru>false</keyPassthru>
      <UseSpokenPhrase>true</UseSpokenPhrase>
      <onlyKeyUp>false</onlyKeyUp>
      <RepeatNumber>2</RepeatNumber>
      <RepeatType>0</RepeatType>
      <CommandType>0</CommandType>
      <SourceProfile>00000000-0000-0000-0000-000000000000</SourceProfile>
      <UseConfidence>false</UseConfidence>
      <minimumConfidenceLevel>0</minimumConfidenceLevel>
      <UseJoystick>false</UseJoystick>
      <joystickNumber>0</joystickNumber>
      <joystickButton>0</joystickButton>
      <joystickNumber2>0</joystickNumber2>
      <joystickButton2>0</joystickButton2>
      <joystickUp>false</joystickUp>
      <KeepRepeating>false</KeepRepeating>
      <UseProcessOverride>false</UseProcessOverride>
      <ProcessOverrideActiveWindow>true</ProcessOverrideActiveWindow>
      <LostFocusStop>false</LostFocusStop>
      <PauseLostFocus>false</PauseLostFocus>
      <LostFocusBackCompat>true</LostFocusBackCompat>
      <UseMouse>false</UseMouse>
      <Mouse1>false</Mouse1>
      <Mouse2>false</Mouse2>
      <Mouse3>false</Mouse3>
      <Mouse4>false</Mouse4>
      <Mouse5>false</Mouse5>
      <Mouse6>false</Mouse6>
      <Mouse7>false</Mouse7>
      <Mouse8>false</Mouse8>
      <Mouse9>false</Mouse9>
      <MouseUpOnly>false</MouseUpOnly>
      <MousePassThru>true</MousePassThru>
      <joystickExclusive>false</joystickExclusive>
      <lastEditedAction>c2cd0b41-d543-4335-91ce-397de5d610c7</lastEditedAction>
      <UseProfileProcessOverride>false</UseProfileProcessOverride>
      <ProfileProcessOverrideActiveWindow>false</ProfileProcessOverrideActiveWindow>
      <RepeatIfKeysDown>false</RepeatIfKeysDown>
      <RepeatIfMouseDown>false</RepeatIfMouseDown>
      <RepeatIfJoystickDown>false</RepeatIfJoystickDown>
      <AH>0</AH>
      <CL>0</CL>
      <HasMB>false</HasMB>
      <UseVariableHotkey>false</UseVariableHotkey>
      <CLE>0</CLE>
      <EX1>false</EX1>
      <EX2>false</EX2>
      <InternalId xsi:nil="true" />
      <HasInput>false</HasInput>
      <HotkeyDoubleTapLevel>0</HotkeyDoubleTapLevel>
      <MouseDoubleTapLevel>0</MouseDoubleTapLevel>
      <JoystickDoubleTapLevel>0</JoystickDoubleTapLevel>
      <HotkeyLongTapLevel>0</HotkeyLongTapLevel>
      <MouseLongTapLevel>0</MouseLongTapLevel>
      <JoystickLongTapLevel>0</JoystickLongTapLevel>
      <AlwaysExec>true</AlwaysExec>
      <ResourceBalance>0</ResourceBalance>
      <PreventExec>false</PreventExec>
      <ExternalEventsEnabled>false</ExternalEventsEnabled>
      <ExcludeExecOnRecognized>false</ExcludeExecOnRecognized>
      <UseVariableMouseShortcut>false</UseVariableMouseShortcut>
      <UseVariableJoystickShortcut>false</UseVariableJoystickShortcut>
    </Command>
    <Command>
      <Referrer xsi:nil="true" />
      <ExecType>3</ExecType>
      <Confidence>0</Confidence>
      <PrefixActionCount>0</PrefixActionCount>
      <IsDynamicallyCreated>false</IsDynamicallyCreated>
      <TargetProcessSet>false</TargetProcessSet>
      <TargetProcessType>0</TargetProcessType>
      <TargetProcessLevel>0</TargetProcessLevel>
      <CompareType>0</CompareType>
      <ExecFromWildcard>false</ExecFromWildcard>
      <IsSubCommand>false</IsSubCommand>
      <IsOverride>false</IsOverride>
      <BaseId>f9e4f2d9-6b00-41fe-bf8b-2ca43b01eb8f</BaseId>
      <OriginId>00000000-0000-0000-0000-000000000000</OriginId>
      <SessionEnabled>true</SessionEnabled>
      <DoubleTapInvoked>false</DoubleTapInvoked>
      <SingleTapDelayedInvoked>false</SingleTapDelayedInvoked>
      <LongTapInvoked>false</LongTapInvoked>
      <ShortTapDelayedInvoked>false</ShortTapDelayedInvoked>
      <SleepFlag>0</SleepFlag>
      <Id>e88beb7d-a627-44b9-b41e-76f3ff707abb</Id>
      <CommandString>[What;Watt] time is it;[What's;Watts;What;Watt] [is;] [the;uh;a] time</CommandString>
      <ActionSequence>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1cdf738f-fa4b-40f6-8529-b53fa8ee9e73</Id>
          <ActionType>Say</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>It's {TIME};It is {TIME}</Context>
          <Context3>00000000-0000-0000-0000-000000000000</Context3>
          <Context4>Default</Context4>
          <X>70</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
      </ActionSequence>
      <Async>true</Async>
      <Enabled>true</Enabled>
      <Description>Get the current time because it keeps slipping into the future</Description>
      <Category>AVCS CORE DEV TOOLBOX</Category>
      <UseShortcut>false</UseShortcut>
      <keyValue>0</keyValue>
      <keyShift>0</keyShift>
      <keyAlt>0</keyAlt>
      <keyCtrl>0</keyCtrl>
      <keyWin>0</keyWin>
      <keyPassthru>true</keyPassthru>
      <UseSpokenPhrase>true</UseSpokenPhrase>
      <onlyKeyUp>false</onlyKeyUp>
      <RepeatNumber>2</RepeatNumber>
      <RepeatType>0</RepeatType>
      <CommandType>0</CommandType>
      <SourceProfile>00000000-0000-0000-0000-000000000000</SourceProfile>
      <UseConfidence>false</UseConfidence>
      <minimumConfidenceLevel>0</minimumConfidenceLevel>
      <UseJoystick>false</UseJoystick>
      <joystickNumber>0</joystickNumber>
      <joystickButton>0</joystickButton>
      <joystickNumber2>0</joystickNumber2>
      <joystickButton2>0</joystickButton2>
      <joystickUp>false</joystickUp>
      <KeepRepeating>false</KeepRepeating>
      <UseProcessOverride>false</UseProcessOverride>
      <ProcessOverrideActiveWindow>true</ProcessOverrideActiveWindow>
      <LostFocusStop>false</LostFocusStop>
      <PauseLostFocus>false</PauseLostFocus>
      <LostFocusBackCompat>true</LostFocusBackCompat>
      <UseMouse>false</UseMouse>
      <Mouse1>false</Mouse1>
      <Mouse2>false</Mouse2>
      <Mouse3>false</Mouse3>
      <Mouse4>false</Mouse4>
      <Mouse5>false</Mouse5>
      <Mouse6>false</Mouse6>
      <Mouse7>false</Mouse7>
      <Mouse8>false</Mouse8>
      <Mouse9>false</Mouse9>
      <MouseUpOnly>false</MouseUpOnly>
      <MousePassThru>true</MousePassThru>
      <joystickExclusive>false</joystickExclusive>
      <lastEditedAction>60253030-f3ad-4569-a3bf-2f5651af879a</lastEditedAction>
      <UseProfileProcessOverride>false</UseProfileProcessOverride>
      <ProfileProcessOverrideActiveWindow>false</ProfileProcessOverrideActiveWindow>
      <RepeatIfKeysDown>false</RepeatIfKeysDown>
      <RepeatIfMouseDown>false</RepeatIfMouseDown>
      <RepeatIfJoystickDown>false</RepeatIfJoystickDown>
      <AH>0</AH>
      <CL>0</CL>
      <HasMB>false</HasMB>
      <UseVariableHotkey>false</UseVariableHotkey>
      <CLE>0</CLE>
      <EX1>false</EX1>
      <EX2>false</EX2>
      <InternalId xsi:nil="true" />
      <HasInput>false</HasInput>
      <HotkeyDoubleTapLevel>0</HotkeyDoubleTapLevel>
      <MouseDoubleTapLevel>0</MouseDoubleTapLevel>
      <JoystickDoubleTapLevel>0</JoystickDoubleTapLevel>
      <HotkeyLongTapLevel>0</HotkeyLongTapLevel>
      <MouseLongTapLevel>0</MouseLongTapLevel>
      <JoystickLongTapLevel>0</JoystickLongTapLevel>
      <AlwaysExec>false</AlwaysExec>
      <ResourceBalance>0</ResourceBalance>
      <PreventExec>false</PreventExec>
      <ExternalEventsEnabled>false</ExternalEventsEnabled>
      <ExcludeExecOnRecognized>false</ExcludeExecOnRecognized>
      <UseVariableMouseShortcut>false</UseVariableMouseShortcut>
      <UseVariableJoystickShortcut>false</UseVariableJoystickShortcut>
    </Command>
    <Command>
      <Referrer xsi:nil="true" />
      <ExecType>3</ExecType>
      <Confidence>0</Confidence>
      <PrefixActionCount>0</PrefixActionCount>
      <IsDynamicallyCreated>false</IsDynamicallyCreated>
      <TargetProcessSet>false</TargetProcessSet>
      <TargetProcessType>0</TargetProcessType>
      <TargetProcessLevel>0</TargetProcessLevel>
      <CompareType>0</CompareType>
      <ExecFromWildcard>false</ExecFromWildcard>
      <IsSubCommand>false</IsSubCommand>
      <IsOverride>false</IsOverride>
      <BaseId>f78cc8e1-5a7c-4e88-b7af-f2d2830bc38c</BaseId>
      <OriginId>00000000-0000-0000-0000-000000000000</OriginId>
      <SessionEnabled>true</SessionEnabled>
      <DoubleTapInvoked>false</DoubleTapInvoked>
      <SingleTapDelayedInvoked>false</SingleTapDelayedInvoked>
      <LongTapInvoked>false</LongTapInvoked>
      <ShortTapDelayedInvoked>false</ShortTapDelayedInvoked>
      <SleepFlag>0</SleepFlag>
      <Id>b1c60e42-7654-4c0e-9bdf-61af51313b4b</Id>
      <CommandString>[Set;Change;Edit] [the;uh;a;] Build [Output;] [Folder;Folders;Setting;Settings;Parameter;Parameters]</CommandString>
      <ActionSequence>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>90a639e9-a305-4b8a-a1c8-4b4f880756c4</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//AVCS CORE DEV TOOL -- Complied Inline Function Dynamic Build Output Folder Paths</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d26468bc-b331-437b-87d3-3e0e32cf87e8</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// by SemlerPDX July2025</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>f9dc5bce-2523-40ff-89c8-3286f497d01a</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// GitHub.com/SemlerPDX/AVCS</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>61fb8323-8b24-47d1-b0be-d5021715b83f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>231f3af1-3798-4430-b36f-5bce259c66da</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>99964e39-4bcb-4ccc-adb6-fc8d80222cf6</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// Required AVCS CORE DEV TOOLKIT simple profile updates check</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>f984e3d5-ee3b-43c1-9d32-af9143777696</Id>
          <ActionType>IntSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>20252508</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionSetName xml:space="preserve">~profileVersion</ConditionSetName>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>b5a5d0ea-9708-4f74-8c71-b7de439226f3</Id>
          <ActionType>TextSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~currentVersionText</Context>
          <Context2 />
          <Context3 />
          <Context4>https://raw.githubusercontent.com/SemlerPDX/AVCS/refs/heads/master/toolkit_profile.id</Context4>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>4</InputMode>
          <ConditionSetName />
          <ConditionSetCondition />
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>df2b6900-d6e5-49c0-aba3-cb03df1e3656</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>16</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartNameFrom>~currentVersion</ConditionStartNameFrom>
          <ConditionStartOperator>1</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>364ac1fb-44f6-47e8-9cf5-969ac8cf651e</Id>
          <ActionType>Convert</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~currentVersionText</Context>
          <Context2 xml:space="preserve">~currentVersion</Context2>
          <X>0</X>
          <Y>3</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a9842330-6401-41fd-b43c-83a3ff90b238</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>15</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartNameFrom>~profileVersion</ConditionStartNameFrom>
          <ConditionStartOperator>2</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>1</ConditionStartValueType>
          <ConditionStartCompareToCondtion>~currentVersion</ConditionStartCompareToCondtion>
          <ConditionStartType>3</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e8e5cb34-2810-4903-8b95-fd1887f69851</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>AVCS ERROR:  This version of the AVCS CORE DEV TOOLKIT profile is out of date, and inline functions may not reflect current open source code</Context>
          <X>3</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e281fd1e-16e0-4342-8c5b-86ce17388e9a</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>--  Update this profile to the latest version if you expect compiled inline function outputs to match current version hashtable</Context>
          <X>3</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>c4cd54e8-bfb4-4da3-8a90-de035e5610cd</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>https://github.com/SemlerPDX/AVCS</Context>
          <X>5</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>0ae7117e-14fa-45a2-8a02-65eb43f0d0d0</Id>
          <ActionType>Jump</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>EXIT</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>44</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d5102b75-4ffc-4cba-99f0-65e91ea13b3c</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>10</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>50124bbd-ce5c-49e4-83cc-096a537c210a</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>8</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>9aef8582-bd95-46f0-8e32-5d7d5742e5ef</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>4fa0e605-a312-42f5-9a0e-bedc553e65b6</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// Required Profile and Branch Variables</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d50b13f3-6957-489d-bdf5-97aac9e7622a</Id>
          <ActionType>TextSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>AVCS_CORE</Context>
          <Context2 xml:space="preserve">CORE20</Context2>
          <Context3 />
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionSetName />
          <ConditionSetCondition />
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a8427168-da62-41d0-9a24-5dab0103c4cf</Id>
          <ActionType>TextSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>AVCS4_BMS</Context>
          <Context2 xml:space="preserve">BMS20</Context2>
          <Context3 />
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionSetName />
          <ConditionSetCondition />
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>b2a576cc-e9a3-4cfb-b5bd-13c4f46c98fc</Id>
          <ActionType>GetUserList</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>AVCS_BUILD_BRANCH</Context>
          <Context2 xml:space="preserve">Choose a build branch for the dynamic output folder of inline function builds:</Context2>
          <Context3>AVCS CORE DEV TOOLKIT - Compiled Inline Functions Output</Context3>
          <Context4>alpha;beta;release;debug</Context4>
          <Context5>release</Context5>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>9051e0c7-0f80-44b6-8ed5-b5c597470274</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>24</ConditionPairing>
          <ConditionGroup>3</ConditionGroup>
          <ConditionStartNameFrom>AVCS_BUILD_BRANCH</ConditionStartNameFrom>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>cf8d85f0-97ac-4e0a-9222-ad72b117a7d6</Id>
          <ActionType>Jump</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>EXIT</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>44</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d5326a1a-d64a-4f99-a5e8-54fecbe2d733</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>22</ConditionPairing>
          <ConditionGroup>3</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>168db9ad-4c1c-419c-b8ae-14ecb86f4a81</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>757f20a1-376e-4791-ad50-c56b78c54f5b</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// Local path helper for me (SemlerPDX) ... a folder choice will pop-up for non-SemlerPDX users, no need to set anything here</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>8f5b8af3-5505-4712-86a9-38519e22bade</Id>
          <ActionType>TextSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>CORE_DEV</Context>
          <Context2 xml:space="preserve">{VA_APPS}\CORE_DEV</Context2>
          <Context3 />
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionSetName />
          <ConditionSetCondition />
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>cade53a3-893c-4bd3-8391-8b4828c34b75</Id>
          <ActionType>TextSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~dev_root</Context>
          <Context2 xml:space="preserve">{TXT:CORE_DEV}\defaultRoot.txt</Context2>
          <Context3 />
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionSetName />
          <ConditionSetCondition />
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e8012629-54a0-449f-b35c-e6d8059e9021</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 xml:space="preserve">1</Context2>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>35</ConditionPairing>
          <ConditionGroup>4</ConditionGroup>
          <ConditionStartNameFrom>{STATE_DIRECTORYEXISTS:CORE_DEV}</ConditionStartNameFrom>
          <ConditionStartOperator>6</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions>
            <ArrayOfConditionStruct>
              <ConditionStruct>
                <Id>ca17fc22-4b30-4447-aaef-bc57b427a1db</Id>
                <ConditionStartType>1</ConditionStartType>
                <ConditionStartNameFrom>{STATE_DIRECTORYEXISTS:CORE_DEV}</ConditionStartNameFrom>
                <ConditionStartValueType>0</ConditionStartValueType>
                <ConditionStartValue>0</ConditionStartValue>
                <ConditionStartCompareToCondtion />
                <Z>1</Z>
                <ConditionStartOperator>6</ConditionStartOperator>
                <Context2 xml:space="preserve">1</Context2>
                <DateContext1>0001-01-02T00:00:00Z</DateContext1>
                <DecimalContext1>0</DecimalContext1>
              </ConditionStruct>
            </ArrayOfConditionStruct>
          </ConditionExpressions>
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>c663cf09-6f42-4ed0-baac-e56116c46b9d</Id>
          <ActionType>TextSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>AVCS_CORE_DEV_CreateNewBranchBuild_v7</Context>
          <Context2 xml:space="preserve">{TXT:CORE_DEV}\AVCS_CORE_DEV_CreateNewBranchBuild_v7.dll</Context2>
          <Context3 />
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionSetName />
          <ConditionSetCondition />
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ddaa050f-330a-4486-8631-af430d3dc21a</Id>
          <ActionType>TextSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>AVCS_CORE_DEV_PushBuildToDatabase_v3</Context>
          <Context2 xml:space="preserve">{TXT:CORE_DEV}\AVCS_CORE_DEV_PushBuildToDatabase_v3.dll</Context2>
          <Context3 />
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionSetName />
          <ConditionSetCondition />
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>81046c00-ddb3-4372-82d6-73230e89e7ac</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 xml:space="preserve">1</Context2>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>34</ConditionPairing>
          <ConditionGroup>5</ConditionGroup>
          <ConditionStartNameFrom>{STATE_FILEEXISTS:~dev_root}</ConditionStartNameFrom>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions>
            <ArrayOfConditionStruct>
              <ConditionStruct>
                <Id>8a1925a4-9bb8-4d43-ac03-3f22ef0c6523</Id>
                <ConditionStartType>1</ConditionStartType>
                <ConditionStartNameFrom>{STATE_FILEEXISTS:~dev_root}</ConditionStartNameFrom>
                <ConditionStartValueType>0</ConditionStartValueType>
                <ConditionStartValue>0</ConditionStartValue>
                <ConditionStartCompareToCondtion />
                <Z>1</Z>
                <ConditionStartOperator>0</ConditionStartOperator>
                <Context2 xml:space="preserve">1</Context2>
                <DateContext1>0001-01-01T08:00:00Z</DateContext1>
                <DecimalContext1>0</DecimalContext1>
              </ConditionStruct>
            </ArrayOfConditionStruct>
          </ConditionExpressions>
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1f851829-6e3c-45b2-aa85-c9298baa4944</Id>
          <ActionType>TextSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>AVCS_ROOT</Context>
          <Context2 />
          <Context3 />
          <Context4>{VA_APPS}\CORE_DEV\defaultRoot.txt</Context4>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>4</InputMode>
          <ConditionSetName />
          <ConditionSetCondition />
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>9b6ccd48-54b9-4b7d-9119-8a51aee32984</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>32</ConditionPairing>
          <ConditionGroup>5</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1acb1d7d-523d-4acd-b827-b53887fbe3ec</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>29</ConditionPairing>
          <ConditionGroup>4</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>56264f4d-fcac-470d-9c85-fe704614e2a3</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>8b35e24b-d2b1-4ec1-9a2c-475d91713a55</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Assemble build output paths into text variables for CORE and BMS profiles</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>23740c34-e03d-442a-a332-92c161f37ae0</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.IO;
using System.Windows.Forms;

/*
Required Referenced Assemblies V1 and V2:
Microsoft.CSharp.dll;System.dll;System.ComponentModel.Primitives.dll;System.Windows.Forms.dll
*/

public class VAInline
{
	private const string DefaultCore = "CORE20";
	private const string DefaultBMS = "BMS20";
	private const string DefaultBuildsFolder = "builds";

	[STAThread]
	public void main()
	{
		VA.SetText("AVCS_CORE_BuildOutputFolder", null);
		VA.SetText("AVCS4_BMS_BuildOutputFolder", null);


		// A build branch is required for output path construction, and an easy out if choice cancelled before this inline
		var buildBranch = VA.GetText("AVCS_BUILD_BRANCH") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(buildBranch))
		{
			VA.WriteToLog("Invalid AVCS build branch name. Parameters setup cancelled.", "red");
			return; // get out early, choice cancelled
		}

		// The output path will always adapt itself to the current VA version running DEV TOOLKIT profile
		var vaVersionFolder = "v" + VA.VAVersion.Major.ToString();

		var coreShortname = VA.GetText("AVCS_CORE") ?? DefaultCore;
		var bmsShortname = VA.GetText("AVCS4_BMS") ?? DefaultBMS;
		var defaultRoot = VA.GetText("AVCS_ROOT") ?? string.Empty;

		// Get the root directory, either from default or user selection
		var isRootValid = !string.IsNullOrEmpty(defaultRoot) &amp;&amp; Directory.Exists(defaultRoot);
		var rootDirectory = isRootValid ? defaultRoot : GetRootDirectory();
		if (string.IsNullOrEmpty(rootDirectory) || !Directory.Exists(rootDirectory))
		{
			VA.WriteToLog("AVCS ERROR: Invalid root directory. Parameters setup cancelled.", "red");
			return;
		}

		// Construct Root Paths
		var coreRootPath = Path.Combine(rootDirectory, coreShortname, DefaultBuildsFolder);
		var bmsRootPath = Path.Combine(rootDirectory, bmsShortname, DefaultBuildsFolder);

		// Example:  '{TXT:AVCS_CORE_BuildOutputFolder}'
		var coreBuildsPath = Path.Combine(coreRootPath, vaVersionFolder, buildBranch);
		var bmsBuildsPath = Path.Combine(bmsRootPath, vaVersionFolder, buildBranch);

		var buildPaths = new string[] { coreBuildsPath, bmsBuildsPath };
		foreach (var path in buildPaths)
		{
			if (!Directory.Exists(path))
			{
				//Directory.CreateDirectory(path);
			}
		}

		// Set the final global text variables - these are used throughout inline functions in this profile
		VA.SetText("AVCS_CORE_BuildOutputFolder", coreBuildsPath);
		VA.WriteToLog("AVCS CORE compiled inline function output has been set to:", "green");
		VA.WriteToLog(coreBuildsPath);
		
		VA.SetText("AVCS4_BMS_BuildOutputFolder", bmsBuildsPath);
		VA.WriteToLog("AVCS4 BMS compiled inline function output has been set to:", "green");
		VA.WriteToLog(bmsBuildsPath);
	}

	private string GetRootDirectory()
	{
		try
		{
			using (var fbd = new FolderBrowserDialog())
			{
				fbd.Description = "Select the root output folder";
				if (fbd.ShowDialog() == DialogResult.OK)
				{
					return fbd.SelectedPath;
				}
				else
				{
					throw new Exception("Folder choice cancelled by user.");
				}
			}
		}
		catch (Exception ex)
		{
			VA.WriteToLog("AVCS ERROR: The follow exception has occurred during root folder selection:", "red");
			VA.WriteToLog(ex.Message);
			return string.Empty;
		}
	}
}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.ComponentModel.Primitives.dll;System.Windows.Forms.dll</Context2>
          <Context3>AVCS_CORE_DEV_SetBuildOutputFolders</Context3>
          <Context4 />
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>2</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>8633a171-9c5e-4d3e-81ea-21a35e3659a9</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>1</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>41</ConditionPairing>
          <ConditionGroup>6</ConditionGroup>
          <ConditionStartNameFrom>AVCS_CORE_TOOLS_BUILD</ConditionStartNameFrom>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions>
            <ArrayOfConditionStruct>
              <ConditionStruct>
                <Id>eaf3ff20-f0c9-42ea-b165-e84b6ea893e5</Id>
                <ConditionStartType>1</ConditionStartType>
                <ConditionStartNameFrom>{STATE_DIRECTORYEXISTS:AVCS_CORE_BuildOutputFolder}</ConditionStartNameFrom>
                <ConditionStartValueType>0</ConditionStartValueType>
                <ConditionStartValue>0</ConditionStartValue>
                <ConditionStartCompareToCondtion />
                <Z>1</Z>
                <ConditionStartOperator>0</ConditionStartOperator>
                <Context2 xml:space="preserve">1</Context2>
                <DateContext1>0001-01-01T08:00:00Z</DateContext1>
                <DecimalContext1>0</DecimalContext1>
              </ConditionStruct>
              <ConditionStruct>
                <Id>563c8b50-7b13-40aa-a74e-614c980ffc5b</Id>
                <ConditionStartType>1</ConditionStartType>
                <ConditionStartNameFrom>{STATE_DIRECTORYEXISTS:AVCS4_BMS_BuildOutputFolder}</ConditionStartNameFrom>
                <ConditionStartValueType>0</ConditionStartValueType>
                <ConditionStartValue>0</ConditionStartValue>
                <ConditionStartCompareToCondtion />
                <Z>1</Z>
                <ConditionStartOperator>0</ConditionStartOperator>
                <Context2 xml:space="preserve">1</Context2>
                <DateContext1>0001-01-01T08:00:00Z</DateContext1>
                <DecimalContext1>0</DecimalContext1>
              </ConditionStruct>
            </ArrayOfConditionStruct>
          </ConditionExpressions>
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a27a93b3-ba5d-4e79-9cf9-f1ce5e266ee4</Id>
          <ActionType>Say</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Done.;Set.</Context>
          <Context3>00000000-0000-0000-0000-000000000000</Context3>
          <Context4>Default</Context4>
          <X>70</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>28009345-b7fe-468e-9d1f-cd404b0e2969</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>1</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>39</ConditionPairing>
          <ConditionGroup>6</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ddbd2b72-1da5-4992-aa01-495e34f5cb09</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>05b51389-9e36-40f8-9afc-00c67c4a6869</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>9d5447c0-f1f6-47fd-b1d5-ff9fc564fccf</Id>
          <ActionType>Marker</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>EXIT</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a109b5a7-70d7-492c-ab58-0d4aaaaa0a63</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>1</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>47</ConditionPairing>
          <ConditionGroup>7</ConditionGroup>
          <ConditionStartNameFrom>AVCS_CORE_TOOLS_BUILD</ConditionStartNameFrom>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions>
            <ArrayOfConditionStruct>
              <ConditionStruct>
                <Id>c4474552-631b-4f9c-9818-1d7c24d95e77</Id>
                <ConditionStartType>1</ConditionStartType>
                <ConditionStartNameFrom>{STATE_DIRECTORYEXISTS:AVCS_CORE_BuildOutputFolder}</ConditionStartNameFrom>
                <ConditionStartValueType>0</ConditionStartValueType>
                <ConditionStartValue>0</ConditionStartValue>
                <ConditionStartCompareToCondtion />
                <Z>1</Z>
                <ConditionStartOperator>1</ConditionStartOperator>
                <Context2 xml:space="preserve">1</Context2>
                <DateContext1>0001-01-01T08:00:00Z</DateContext1>
                <DecimalContext1>0</DecimalContext1>
              </ConditionStruct>
            </ArrayOfConditionStruct>
            <ArrayOfConditionStruct>
              <ConditionStruct>
                <Id>a90c292d-02e3-42e4-a2b5-46df7510764a</Id>
                <ConditionStartType>1</ConditionStartType>
                <ConditionStartNameFrom>{STATE_DIRECTORYEXISTS:AVCS4_BMS_BuildOutputFolder}</ConditionStartNameFrom>
                <ConditionStartValueType>0</ConditionStartValueType>
                <ConditionStartValue>0</ConditionStartValue>
                <ConditionStartCompareToCondtion />
                <Z>1</Z>
                <ConditionStartOperator>1</ConditionStartOperator>
                <Context2 xml:space="preserve">1</Context2>
                <DateContext1>0001-01-01T08:00:00Z</DateContext1>
                <DecimalContext1>0</DecimalContext1>
              </ConditionStruct>
            </ArrayOfConditionStruct>
          </ConditionExpressions>
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>b1171b2b-b527-4dab-8aad-2a8766f150dc</Id>
          <ActionType>Say</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Command cancelled.  Parameters must be set before building inline functions.</Context>
          <Context3>00000000-0000-0000-0000-000000000000</Context3>
          <Context4>Default</Context4>
          <X>70</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>098e0ed1-6f49-40fa-adb1-5a78f87fdc15</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>45</ConditionPairing>
          <ConditionGroup>7</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
      </ActionSequence>
      <Async>true</Async>
      <Enabled>true</Enabled>
      <Description>Set Required Inline Function Build Output Paths</Description>
      <Category>AVCS CORE DEV TOOLS</Category>
      <UseShortcut>true</UseShortcut>
      <keyValue>83</keyValue>
      <keyShift>160</keyShift>
      <keyAlt>164</keyAlt>
      <keyCtrl>162</keyCtrl>
      <keyWin>0</keyWin>
      <keyPassthru>true</keyPassthru>
      <UseSpokenPhrase>true</UseSpokenPhrase>
      <onlyKeyUp>true</onlyKeyUp>
      <RepeatNumber>2</RepeatNumber>
      <RepeatType>0</RepeatType>
      <CommandType>0</CommandType>
      <SourceProfile>00000000-0000-0000-0000-000000000000</SourceProfile>
      <UseConfidence>false</UseConfidence>
      <minimumConfidenceLevel>0</minimumConfidenceLevel>
      <UseJoystick>false</UseJoystick>
      <joystickNumber>0</joystickNumber>
      <joystickButton>0</joystickButton>
      <joystickNumber2>0</joystickNumber2>
      <joystickButton2>0</joystickButton2>
      <joystickUp>false</joystickUp>
      <KeepRepeating>false</KeepRepeating>
      <UseProcessOverride>false</UseProcessOverride>
      <ProcessOverrideActiveWindow>true</ProcessOverrideActiveWindow>
      <LostFocusStop>false</LostFocusStop>
      <PauseLostFocus>false</PauseLostFocus>
      <LostFocusBackCompat>true</LostFocusBackCompat>
      <UseMouse>false</UseMouse>
      <Mouse1>false</Mouse1>
      <Mouse2>false</Mouse2>
      <Mouse3>false</Mouse3>
      <Mouse4>false</Mouse4>
      <Mouse5>false</Mouse5>
      <Mouse6>false</Mouse6>
      <Mouse7>false</Mouse7>
      <Mouse8>false</Mouse8>
      <Mouse9>false</Mouse9>
      <MouseUpOnly>false</MouseUpOnly>
      <MousePassThru>true</MousePassThru>
      <joystickExclusive>false</joystickExclusive>
      <lastEditedAction>4ef268ef-ef32-4648-a4d5-f1ea68094b45</lastEditedAction>
      <UseProfileProcessOverride>false</UseProfileProcessOverride>
      <ProfileProcessOverrideActiveWindow>false</ProfileProcessOverrideActiveWindow>
      <RepeatIfKeysDown>false</RepeatIfKeysDown>
      <RepeatIfMouseDown>false</RepeatIfMouseDown>
      <RepeatIfJoystickDown>false</RepeatIfJoystickDown>
      <AH>0</AH>
      <CL>0</CL>
      <HasMB>false</HasMB>
      <UseVariableHotkey>false</UseVariableHotkey>
      <CLE>0</CLE>
      <EX1>false</EX1>
      <EX2>false</EX2>
      <InternalId xsi:nil="true" />
      <HasInput>false</HasInput>
      <HotkeyDoubleTapLevel>0</HotkeyDoubleTapLevel>
      <MouseDoubleTapLevel>0</MouseDoubleTapLevel>
      <JoystickDoubleTapLevel>0</JoystickDoubleTapLevel>
      <HotkeyLongTapLevel>0</HotkeyLongTapLevel>
      <MouseLongTapLevel>0</MouseLongTapLevel>
      <JoystickLongTapLevel>0</JoystickLongTapLevel>
      <AlwaysExec>false</AlwaysExec>
      <ResourceBalance>0</ResourceBalance>
      <PreventExec>false</PreventExec>
      <ExternalEventsEnabled>false</ExternalEventsEnabled>
      <ExcludeExecOnRecognized>false</ExcludeExecOnRecognized>
      <UseVariableMouseShortcut>false</UseVariableMouseShortcut>
      <UseVariableJoystickShortcut>false</UseVariableJoystickShortcut>
    </Command>
    <Command>
      <Referrer xsi:nil="true" />
      <ExecType>3</ExecType>
      <Confidence>0</Confidence>
      <PrefixActionCount>0</PrefixActionCount>
      <IsDynamicallyCreated>false</IsDynamicallyCreated>
      <TargetProcessSet>false</TargetProcessSet>
      <TargetProcessType>0</TargetProcessType>
      <TargetProcessLevel>0</TargetProcessLevel>
      <CompareType>0</CompareType>
      <ExecFromWildcard>false</ExecFromWildcard>
      <IsSubCommand>false</IsSubCommand>
      <IsOverride>false</IsOverride>
      <BaseId>667a5911-58af-4ebe-a455-4b3823ca4970</BaseId>
      <OriginId>00000000-0000-0000-0000-000000000000</OriginId>
      <SessionEnabled>true</SessionEnabled>
      <DoubleTapInvoked>false</DoubleTapInvoked>
      <SingleTapDelayedInvoked>false</SingleTapDelayedInvoked>
      <LongTapInvoked>false</LongTapInvoked>
      <ShortTapDelayedInvoked>false</ShortTapDelayedInvoked>
      <SleepFlag>0</SleepFlag>
      <Id>fa85e7a2-f69f-4024-95c4-c374f4b90d6b</Id>
      <CommandString>[Create;Generate;Make;Build] [the;uh;a;] [new;] [Resource;Resources] [branch;build;build branch;branch build]</CommandString>
      <ActionSequence>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a392caca-ee75-4ca1-aff1-84c1b57a2a62</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//AVCS CORE DEV TOOL -- Create new branch build with basic security and dynamic generated changelog</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>30f8eaa1-fac4-43de-afc7-ed686f5397b6</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// by SemlerPDX July2025</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>eef774ef-5453-476a-9b54-eb716ce16bbb</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// GitHub.com/SemlerPDX/AVCS</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>388cbdde-0380-49b4-b159-fda78d73c896</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>50391658-1786-4367-a06a-675ea145e3d9</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ef28828c-d90d-4268-9e34-0ee46923928b</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 xml:space="preserve">1</Context2>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>8</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartNameFrom>{STATE_FILEEXISTS:AVCS_CORE_DEV_CreateNewBranchBuild_v7}</ConditionStartNameFrom>
          <ConditionStartOperator>1</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions>
            <ArrayOfConditionStruct>
              <ConditionStruct>
                <Id>f35bb9b1-2706-4527-aca2-3ef4ac308cd9</Id>
                <ConditionStartType>1</ConditionStartType>
                <ConditionStartNameFrom>{STATE_FILEEXISTS:~avcs_profiles_list_path}</ConditionStartNameFrom>
                <ConditionStartValueType>0</ConditionStartValueType>
                <ConditionStartValue>0</ConditionStartValue>
                <ConditionStartCompareToCondtion />
                <Z>1</Z>
                <ConditionStartOperator>0</ConditionStartOperator>
                <Context2 xml:space="preserve">1</Context2>
                <DateContext1>0001-01-01T08:00:00Z</DateContext1>
                <DecimalContext1>0</DecimalContext1>
              </ConditionStruct>
            </ArrayOfConditionStruct>
          </ConditionExpressions>
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>df0fd818-4989-4854-b89e-b697ddcfb737</Id>
          <ActionType>Say</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Build cancelled.</Context>
          <Context3>00000000-0000-0000-0000-000000000000</Context3>
          <Context4>Default</Context4>
          <X>70</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a0fe6988-8b47-475e-98ad-cfb994964dea</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>(as part of AVCS secure database tools, this is not an open source command - thank you for understanding)</Context>
          <X>3</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>afd6f152-840c-4a22-b92b-26404a695474</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>5</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>20be23e7-4dc8-4a15-a3f6-4abc10d4ae45</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>c949d57e-97a3-48fa-8bc7-fbb2850ba228</Id>
          <ActionType>GetUserList</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_new_build_profile</Context>
          <Context2 xml:space="preserve">Choose a build profile for a new or existing resource build:</Context2>
          <Context3>AVCS CORE DEV - Resource Build</Context3>
          <Context4>CORE-(AVCS CORE);BMS-(AVCS4 Falcon BMS Radios);RON-(AVCS4 Ready or Not)</Context4>
          <Context5>CORE-(AVCS CORE)</Context5>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>cca016e4-eaed-420b-93d8-5dd718ae4374</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>14</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartNameFrom>~avcs_new_build_profile</ConditionStartNameFrom>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a3b2628a-1ac5-41a7-9c19-a190c777ace3</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Build cancelled...</Context>
          <X>3</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>6a270e47-3571-4c49-93da-951a55052f92</Id>
          <ActionType>Say</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Command cancelled.</Context>
          <Context3>00000000-0000-0000-0000-000000000000</Context3>
          <Context4>Default</Context4>
          <X>100</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>47bab9a5-f063-49d1-8cdf-9134c8051f6a</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>1</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>11</ConditionPairing>
          <ConditionGroup>2</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ef4a2df0-a664-49af-99f8-55b6b7f7be37</Id>
          <ActionType>GetUserInt</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_new_build_version</Context>
          <Context2 xml:space="preserve">Enter the profile version number for a new or existing resource build:</Context2>
          <Context3>AVCS CORE DEV - Resource Build</Context3>
          <Context4>20</Context4>
          <Context5>20</Context5>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionSetName xml:space="preserve">29</ConditionSetName>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>455e08e1-ed2e-4be3-af02-7a568eb77409</Id>
          <ActionType>IntSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>6</InputMode>
          <ConditionSetName xml:space="preserve">~currentVaMajVer</ConditionSetName>
          <ConditionSetCondition xml:space="preserve">{STATE_VA_VERSION_MAJOR}</ConditionSetCondition>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a3f4fd70-f4e0-4749-b472-3b16271e8043</Id>
          <ActionType>GetUserInt</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_new_build_va_version</Context>
          <Context2 xml:space="preserve">Enter the VoiceAttack major version number for a new or existing resource build:</Context2>
          <Context3>AVCS CORE DEV - Resource Build</Context3>
          <Context4>~currentVaMajVer</Context4>
          <Context5>1</Context5>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionSetName xml:space="preserve">2</ConditionSetName>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>623c066e-6108-493a-9cd3-c163deae53c7</Id>
          <ActionType>GetUserInt</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_new_build_number</Context>
          <Context2 xml:space="preserve">Enter a build number for a new or existing resource build:</Context2>
          <Context3>AVCS CORE DEV - Resource Build</Context3>
          <Context4>2300</Context4>
          <Context5>2300</Context5>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionSetName xml:space="preserve">9999</ConditionSetName>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>43515718-aafb-4ed3-92f8-9cc164ed7a83</Id>
          <ActionType>GetUserList</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_new_build_branch</Context>
          <Context2 xml:space="preserve">Enter a build branch for a new or existing resource build:</Context2>
          <Context3>AVCS CORE DEV - Resource Build</Context3>
          <Context4>alpha;beta;release;debug</Context4>
          <Context5>debug</Context5>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>538f11a2-f31c-4f6f-96e8-981e6610285f</Id>
          <ActionType>GetUserText</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~avcs_changelog_message</Context>
          <Context2 xml:space="preserve">(OPTIONAL){NEWLINE}Enter a custom changelog message that will appear below the entire set of listed changelog items inside square brackets:</Context2>
          <Context3>AVCS CORE DEV - Resource Build</Context3>
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>c45b7bc6-a46a-43d3-be73-759487608259</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1cceef41-7cfb-4917-a95c-e73e993f0eb1</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>b087ff6a-8977-4ba1-b43c-b9d7b42402e0</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  -----------------   =======================================    -----------------------------------------</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>304c16f2-55ea-4da0-8c5a-0bda09b9935e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Execute Inline Function (precompiled)  AVCS_CORE_DEV_CreateNewBranchBuild_v7  (not open source, safety and security, obviously)</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>cb8d6aca-c291-46e3-acb6-ee2b9b1e9096</Id>
          <ActionType>TextSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~functionName</Context>
          <Context2 xml:space="preserve">AVCS_CORE_DEV_CreateNewBranchBuild_v7</Context2>
          <Context3 />
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionSetName />
          <ConditionSetCondition />
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>be986399-d0e2-448c-9079-fecec5d581d7</Id>
          <ActionType>InlineFunctionPrecompiled</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>{TXT:{TXT:~functionName}}</Context>
          <Context2 xml:space="preserve">Create new branch build with signed endpoint HMAC, changelog, and encrypted hashtable</Context2>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>bc51e0bd-bd5f-426a-816e-457da7aec818</Id>
          <ActionType>Say</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Done.</Context>
          <Context3>00000000-0000-0000-0000-000000000000</Context3>
          <Context4>Default</Context4>
          <X>100</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>799bcab2-cefc-4e9a-9b04-65b94f39ed1b</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Build Operation has completed</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1495e592-f7c6-4edd-bc67-fb0abc4433ae</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  -----------------   =======================================    -----------------------------------------</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>6c269605-2c2c-47ef-8c55-19e37c4e79ff</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>152e9f22-63bf-4e42-a1f2-f731ccc84e9f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
      </ActionSequence>
      <Async>true</Async>
      <Enabled>true</Enabled>
      <Description>Create new branch build with basic security</Description>
      <Category>AVCS CORE DEV TOOLS</Category>
      <UseShortcut>true</UseShortcut>
      <keyValue>66</keyValue>
      <keyShift>160</keyShift>
      <keyAlt>164</keyAlt>
      <keyCtrl>162</keyCtrl>
      <keyWin>0</keyWin>
      <keyPassthru>true</keyPassthru>
      <UseSpokenPhrase>true</UseSpokenPhrase>
      <onlyKeyUp>true</onlyKeyUp>
      <RepeatNumber>2</RepeatNumber>
      <RepeatType>0</RepeatType>
      <CommandType>0</CommandType>
      <SourceProfile>00000000-0000-0000-0000-000000000000</SourceProfile>
      <UseConfidence>false</UseConfidence>
      <minimumConfidenceLevel>0</minimumConfidenceLevel>
      <UseJoystick>false</UseJoystick>
      <joystickNumber>0</joystickNumber>
      <joystickButton>0</joystickButton>
      <joystickNumber2>0</joystickNumber2>
      <joystickButton2>0</joystickButton2>
      <joystickUp>false</joystickUp>
      <KeepRepeating>false</KeepRepeating>
      <UseProcessOverride>false</UseProcessOverride>
      <ProcessOverrideActiveWindow>true</ProcessOverrideActiveWindow>
      <LostFocusStop>false</LostFocusStop>
      <PauseLostFocus>false</PauseLostFocus>
      <LostFocusBackCompat>true</LostFocusBackCompat>
      <UseMouse>false</UseMouse>
      <Mouse1>false</Mouse1>
      <Mouse2>false</Mouse2>
      <Mouse3>false</Mouse3>
      <Mouse4>false</Mouse4>
      <Mouse5>false</Mouse5>
      <Mouse6>false</Mouse6>
      <Mouse7>false</Mouse7>
      <Mouse8>false</Mouse8>
      <Mouse9>false</Mouse9>
      <MouseUpOnly>false</MouseUpOnly>
      <MousePassThru>true</MousePassThru>
      <joystickExclusive>false</joystickExclusive>
      <lastEditedAction>e9ecec84-47d1-495f-be54-0ed2652e96c6</lastEditedAction>
      <UseProfileProcessOverride>false</UseProfileProcessOverride>
      <ProfileProcessOverrideActiveWindow>false</ProfileProcessOverrideActiveWindow>
      <RepeatIfKeysDown>false</RepeatIfKeysDown>
      <RepeatIfMouseDown>false</RepeatIfMouseDown>
      <RepeatIfJoystickDown>false</RepeatIfJoystickDown>
      <AH>0</AH>
      <CL>0</CL>
      <HasMB>false</HasMB>
      <UseVariableHotkey>false</UseVariableHotkey>
      <CLE>0</CLE>
      <EX1>false</EX1>
      <EX2>false</EX2>
      <InternalId xsi:nil="true" />
      <HasInput>false</HasInput>
      <HotkeyDoubleTapLevel>0</HotkeyDoubleTapLevel>
      <MouseDoubleTapLevel>0</MouseDoubleTapLevel>
      <JoystickDoubleTapLevel>0</JoystickDoubleTapLevel>
      <HotkeyLongTapLevel>0</HotkeyLongTapLevel>
      <MouseLongTapLevel>0</MouseLongTapLevel>
      <JoystickLongTapLevel>0</JoystickLongTapLevel>
      <AlwaysExec>false</AlwaysExec>
      <ResourceBalance>0</ResourceBalance>
      <PreventExec>true</PreventExec>
      <ExternalEventsEnabled>false</ExternalEventsEnabled>
      <ExcludeExecOnRecognized>false</ExcludeExecOnRecognized>
      <UseVariableMouseShortcut>false</UseVariableMouseShortcut>
      <UseVariableJoystickShortcut>false</UseVariableJoystickShortcut>
    </Command>
    <Command>
      <Referrer xsi:nil="true" />
      <ExecType>3</ExecType>
      <Confidence>0</Confidence>
      <PrefixActionCount>0</PrefixActionCount>
      <IsDynamicallyCreated>false</IsDynamicallyCreated>
      <TargetProcessSet>false</TargetProcessSet>
      <TargetProcessType>0</TargetProcessType>
      <TargetProcessLevel>0</TargetProcessLevel>
      <CompareType>0</CompareType>
      <ExecFromWildcard>false</ExecFromWildcard>
      <IsSubCommand>false</IsSubCommand>
      <IsOverride>false</IsOverride>
      <BaseId>932aeddf-df07-4aa1-bac7-76945a386880</BaseId>
      <OriginId>00000000-0000-0000-0000-000000000000</OriginId>
      <SessionEnabled>true</SessionEnabled>
      <DoubleTapInvoked>false</DoubleTapInvoked>
      <SingleTapDelayedInvoked>false</SingleTapDelayedInvoked>
      <LongTapInvoked>false</LongTapInvoked>
      <ShortTapDelayedInvoked>false</ShortTapDelayedInvoked>
      <SleepFlag>0</SleepFlag>
      <Id>584bc1b8-c783-44f8-99f4-d3761047030a</Id>
      <CommandString>Push [the;uh;a;] [new;] Build [to;too;two;2] [the;uh;a;] [Web;Website;Web Server;Server;Host;Hosting] [folder;folders;database]</CommandString>
      <ActionSequence>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a84a4ae4-3a82-4e88-8cf0-bc22506004e1</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//AVCS CORE DEV TOOL -- Push new build to secure AVCS database</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>aa3d0198-2bc1-4726-83ac-ad38bde5908e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// by SemlerPDX July2025</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>5204d151-c4d6-4283-8104-82642cf77112</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// GitHub.com/SemlerPDX/AVCS</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>8e0dbd98-ad65-4522-aca6-366f5035ba16</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>4a4184e7-ee1b-4c2b-aa4a-acd749fe82b3</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>cad0360d-9c3e-4126-8a2d-23a0edbe06df</Id>
          <ActionType>ConditionStart</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context2 xml:space="preserve">1</Context2>
          <X>0</X>
          <Y>0</Y>
          <Z>1</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>8</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartNameFrom>{STATE_FILEEXISTS:AVCS_CORE_DEV_PushBuildToDatabase_v3}</ConditionStartNameFrom>
          <ConditionStartOperator>1</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartCompareToCondtion />
          <ConditionStartType>1</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions>
            <ArrayOfConditionStruct>
              <ConditionStruct>
                <Id>adaa2082-a2c3-4a0f-a6c2-ab693b599db4</Id>
                <ConditionStartType>1</ConditionStartType>
                <ConditionStartNameFrom>{STATE_FILEEXISTS:~avcs_profiles_list_path}</ConditionStartNameFrom>
                <ConditionStartValueType>0</ConditionStartValueType>
                <ConditionStartValue>0</ConditionStartValue>
                <ConditionStartCompareToCondtion />
                <Z>1</Z>
                <ConditionStartOperator>0</ConditionStartOperator>
                <Context2 xml:space="preserve">1</Context2>
                <DateContext1>0001-01-01T08:00:00Z</DateContext1>
                <DecimalContext1>0</DecimalContext1>
              </ConditionStruct>
            </ArrayOfConditionStruct>
          </ConditionExpressions>
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>b67c5870-0388-4b2d-99a4-763240852884</Id>
          <ActionType>Say</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Command cancelled.</Context>
          <Context3>00000000-0000-0000-0000-000000000000</Context3>
          <Context4>Default</Context4>
          <X>70</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>84e81f2c-f0d0-4ce3-9a4c-bd4be639b17d</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>(as part of AVCS secure database tools, this is not an open source command - thank you for understanding)</Context>
          <X>3</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>c8229653-db7a-4754-981b-60a74064bf13</Id>
          <ActionType>ConditionEnd</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>5</ConditionPairing>
          <ConditionGroup>1</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>f907c3b7-3399-4758-af9f-2b7d31278a0f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>b890a5ed-823b-4fe2-9fc6-71bd2a9c5033</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>8b204aa8-fa5f-4009-b683-f0229c3566d8</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  -----------------   =======================================    -----------------------------------------</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ae9b83e9-5907-4746-bcd8-9303f50e6be3</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Execute Inline Function (precompiled)  AVCS_CORE_DEV_PushBuildToDatabase_v3  (not open source, safety and security, obviously)</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a4eb9df9-e57b-471c-8f8d-59ee060fb762</Id>
          <ActionType>TextSet</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>~functionName</Context>
          <Context2 xml:space="preserve">AVCS_CORE_DEV_PushBuildToDatabase_v3</Context2>
          <Context3 />
          <Context4 />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionSetName />
          <ConditionSetCondition />
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>cf31d128-8a8a-465d-9871-ad350a83ceeb</Id>
          <ActionType>InlineFunctionPrecompiled</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>{TXT:{TXT:~functionName}}</Context>
          <Context2 xml:space="preserve">Push new branch build to AVCS database SFTP folder</Context2>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>c2289d04-17ed-4dae-afaa-f86d2af37bbd</Id>
          <ActionType>Say</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Done.</Context>
          <Context3>00000000-0000-0000-0000-000000000000</Context3>
          <Context4>Default</Context4>
          <X>100</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>40b363ed-7842-489d-8680-70ab43fd26fc</Id>
          <ActionType>WriteToLog</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Push Operation has completed</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d95454b4-d52e-4edc-aefd-02a5ef9ee16d</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  -----------------   =======================================    -----------------------------------------</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d4bed1a5-b3de-4677-92c0-bb0ca682dc7d</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
      </ActionSequence>
      <Async>true</Async>
      <Enabled>true</Enabled>
      <Description>Push branch builds to website data SFTP folder</Description>
      <Category>AVCS CORE DEV TOOLS</Category>
      <UseShortcut>true</UseShortcut>
      <keyValue>77</keyValue>
      <keyShift>160</keyShift>
      <keyAlt>164</keyAlt>
      <keyCtrl>162</keyCtrl>
      <keyWin>0</keyWin>
      <keyPassthru>true</keyPassthru>
      <UseSpokenPhrase>true</UseSpokenPhrase>
      <onlyKeyUp>true</onlyKeyUp>
      <RepeatNumber>2</RepeatNumber>
      <RepeatType>0</RepeatType>
      <CommandType>0</CommandType>
      <SourceProfile>00000000-0000-0000-0000-000000000000</SourceProfile>
      <UseConfidence>false</UseConfidence>
      <minimumConfidenceLevel>0</minimumConfidenceLevel>
      <UseJoystick>false</UseJoystick>
      <joystickNumber>0</joystickNumber>
      <joystickButton>0</joystickButton>
      <joystickNumber2>0</joystickNumber2>
      <joystickButton2>0</joystickButton2>
      <joystickUp>false</joystickUp>
      <KeepRepeating>false</KeepRepeating>
      <UseProcessOverride>false</UseProcessOverride>
      <ProcessOverrideActiveWindow>true</ProcessOverrideActiveWindow>
      <LostFocusStop>false</LostFocusStop>
      <PauseLostFocus>false</PauseLostFocus>
      <LostFocusBackCompat>true</LostFocusBackCompat>
      <UseMouse>false</UseMouse>
      <Mouse1>false</Mouse1>
      <Mouse2>false</Mouse2>
      <Mouse3>false</Mouse3>
      <Mouse4>false</Mouse4>
      <Mouse5>false</Mouse5>
      <Mouse6>false</Mouse6>
      <Mouse7>false</Mouse7>
      <Mouse8>false</Mouse8>
      <Mouse9>false</Mouse9>
      <MouseUpOnly>false</MouseUpOnly>
      <MousePassThru>true</MousePassThru>
      <joystickExclusive>false</joystickExclusive>
      <lastEditedAction>580ff518-2168-488d-8b18-73c524886d5e</lastEditedAction>
      <UseProfileProcessOverride>false</UseProfileProcessOverride>
      <ProfileProcessOverrideActiveWindow>false</ProfileProcessOverrideActiveWindow>
      <RepeatIfKeysDown>false</RepeatIfKeysDown>
      <RepeatIfMouseDown>false</RepeatIfMouseDown>
      <RepeatIfJoystickDown>false</RepeatIfJoystickDown>
      <AH>0</AH>
      <CL>0</CL>
      <HasMB>false</HasMB>
      <UseVariableHotkey>false</UseVariableHotkey>
      <CLE>0</CLE>
      <EX1>false</EX1>
      <EX2>false</EX2>
      <InternalId xsi:nil="true" />
      <HasInput>false</HasInput>
      <HotkeyDoubleTapLevel>0</HotkeyDoubleTapLevel>
      <MouseDoubleTapLevel>0</MouseDoubleTapLevel>
      <JoystickDoubleTapLevel>0</JoystickDoubleTapLevel>
      <HotkeyLongTapLevel>0</HotkeyLongTapLevel>
      <MouseLongTapLevel>0</MouseLongTapLevel>
      <JoystickLongTapLevel>0</JoystickLongTapLevel>
      <AlwaysExec>false</AlwaysExec>
      <ResourceBalance>0</ResourceBalance>
      <PreventExec>true</PreventExec>
      <ExternalEventsEnabled>false</ExternalEventsEnabled>
      <ExcludeExecOnRecognized>false</ExcludeExecOnRecognized>
      <UseVariableMouseShortcut>false</UseVariableMouseShortcut>
      <UseVariableJoystickShortcut>false</UseVariableJoystickShortcut>
    </Command>
    <Command>
      <Referrer xsi:nil="true" />
      <ExecType>3</ExecType>
      <Confidence>0</Confidence>
      <PrefixActionCount>0</PrefixActionCount>
      <IsDynamicallyCreated>false</IsDynamicallyCreated>
      <TargetProcessSet>false</TargetProcessSet>
      <TargetProcessType>0</TargetProcessType>
      <TargetProcessLevel>0</TargetProcessLevel>
      <CompareType>0</CompareType>
      <ExecFromWildcard>false</ExecFromWildcard>
      <IsSubCommand>false</IsSubCommand>
      <IsOverride>false</IsOverride>
      <BaseId>a8476169-ae91-472d-a019-8961915abe0e</BaseId>
      <OriginId>00000000-0000-0000-0000-000000000000</OriginId>
      <SessionEnabled>true</SessionEnabled>
      <DoubleTapInvoked>false</DoubleTapInvoked>
      <SingleTapDelayedInvoked>false</SingleTapDelayedInvoked>
      <LongTapInvoked>false</LongTapInvoked>
      <ShortTapDelayedInvoked>false</ShortTapDelayedInvoked>
      <SleepFlag>0</SleepFlag>
      <Id>03cf85aa-1b40-4234-808d-115fa75e979e</Id>
      <CommandString>(( -- AVCS CORE -- Build Output for Compiled Inline Functions -- ))</CommandString>
      <ActionSequence>
        <CommandAction>
          <_caption>/////////////////////////////////////////////////////////////////////////////////////////////////</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>/////////////////////////////////////////////////////////////////////////////////////////////////</Caption>
          <Id>4200506c-8a62-40b5-b148-a30f144c68ac</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>/////////////////////////////////////////////////////////////////////////////////////////////////</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>The following inline function(s) code is shared under GNU General Public License v2.0 - by SemlerPDX July2025</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>1</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>The following inline function(s) code is shared under GNU General Public License v2.0 - by SemlerPDX July2025</Caption>
          <Id>564a3e31-b3c5-44e7-a8d9-304a58d0f9ac</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>The following inline function(s) code is shared under GNU General Public License v2.0 - by SemlerPDX July2025</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>2</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>f313d599-417e-49c2-a774-57092c80ea29</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>The GNU GPL is the most widely used free software license and has a strong copyleft requirement.</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>3</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>The GNU GPL is the most widely used free software license and has a strong copyleft requirement.</Caption>
          <Id>e8d834ae-64bf-4198-8c3c-5407e96869b6</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>The GNU GPL is the most widely used free software license and has a strong copyleft requirement.</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>When distributing derived works, the source code of the work must be made available under the same license.</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>4</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>When distributing derived works, the source code of the work must be made available under the same license.</Caption>
          <Id>2244f786-878b-4812-8e07-c43deb9a3ba0</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>When distributing derived works, the source code of the work must be made available under the same license.</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>There are multiple variants of the GNU GPL, each with different requirements. Find complete details for this license here:</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>5</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>There are multiple variants of the GNU GPL, each with different requirements. Find complete details for this license here:</Caption>
          <Id>8b2ab1d0-a271-4704-a0a2-6f3f567b7e5b</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>There are multiple variants of the GNU GPL, each with different requirements. Find complete details for this license here:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>     https://github.com/SemlerPDX/AVCS/blob/master/LICENSE.txt</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>6</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>     https://github.com/SemlerPDX/AVCS/blob/master/LICENSE.txt</Caption>
          <Id>07f2d80b-d0fe-460e-9cd1-93f03204a7c9</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>     https://github.com/SemlerPDX/AVCS/blob/master/LICENSE.txt</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>/////////////////////////////////////////////////////////////////////////////////////////////////</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>7</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>/////////////////////////////////////////////////////////////////////////////////////////////////</Caption>
          <Id>8337c2c2-cb20-410e-b0c7-c7ccd383b725</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>/////////////////////////////////////////////////////////////////////////////////////////////////</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>8</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>6f479e7e-127a-41bf-9b75-71e03684236f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>Exit Command</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>9</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>Exit Command</Caption>
          <Id>6d1a3a7a-a845-4a32-88e3-d91613c69dbe</Id>
          <ActionType>ExitCommand</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>/////////////////////////////////////////////////////////////////////////////////////////////////</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>10</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>/////////////////////////////////////////////////////////////////////////////////////////////////</Caption>
          <Id>cc9a64e4-e167-46d1-9508-fddf3b67931e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>/////////////////////////////////////////////////////////////////////////////////////////////////</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>                           /////////////      AVCS CORE SYSTEMS      /////////////</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>11</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>                           /////////////      AVCS CORE SYSTEMS      /////////////</Caption>
          <Id>4e4ea98f-9869-4e4f-aa3a-6f8906e444be</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>                           /////////////      AVCS CORE SYSTEMS      /////////////</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>/////////////////////////////////////////////////////////////////////////////////////////////////</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>12</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>/////////////////////////////////////////////////////////////////////////////////////////////////</Caption>
          <Id>1298b098-ac9a-47f4-8921-9d4bfb5aead3</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>/////////////////////////////////////////////////////////////////////////////////////////////////</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>13</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>7192aa41-bf54-4694-918e-5cb32b9a89a8</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>  Run the command, "Set the Build Output Folder", if it did not run on startup/profile switch - it is required to build any inline below for the dynamic output path</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>14</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>  Run the command, "Set the Build Output Folder", if it did not run on startup/profile switch - it is required to build any inline below for the dynamic output path</Caption>
          <Id>e99f1412-3abd-4a06-b280-e308018fd2b8</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>  Run the command, "Set the Build Output Folder", if it did not run on startup/profile switch - it is required to build any inline below for the dynamic output path</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>15</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>c7d76009-8ab5-4c95-b29e-6ecafb1d6996</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>  !!!  IMPORTANT NOTE  !!!    Inline Functions must be built when running this profile in VoiceAttack V1 and V2 respectively  !!!</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>16</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>  !!!  IMPORTANT NOTE  !!!    Inline Functions must be built when running this profile in VoiceAttack V1 and V2 respectively  !!!</Caption>
          <Id>9318a664-4015-4899-9ebf-a91f6fd1b341</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>  !!!  IMPORTANT NOTE  !!!    Inline Functions must be built when running this profile in VoiceAttack V1 and V2 respectively  !!!</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>      *inline functions which require different referenced assemblies will have two entries below*</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>17</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>      *inline functions which require different referenced assemblies will have two entries below*</Caption>
          <Id>61210273-7009-4b3f-ac59-4d001873f1ef</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>      *inline functions which require different referenced assemblies will have two entries below*</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>                    (( all inline function names in the build output will be appended with "_V1" or "_V2" depending on VA version running ))</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>18</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>                    (( all inline function names in the build output will be appended with "_V1" or "_V2" depending on VA version running ))</Caption>
          <Id>1a0c6fd4-dc08-47d0-817a-700a6152b61e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>                    (( all inline function names in the build output will be appended with "_V1" or "_V2" depending on VA version running ))</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>19</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>f397b9f5-88a4-4ce5-8742-0dab1c39e585</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>  To build output compiled inline functions with the suffix "_V1", you MUST be running this profile in VoiceAttack V1 and NOT the .NET CORE8 based VoiceAttack V2 !!!</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>20</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>  To build output compiled inline functions with the suffix "_V1", you MUST be running this profile in VoiceAttack V1 and NOT the .NET CORE8 based VoiceAttack V2 !!!</Caption>
          <Id>6bfe7d72-b3e9-4b66-ad1d-201cc38b3596</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>  To build output compiled inline functions with the suffix "_V1", you MUST be running this profile in VoiceAttack V1 and NOT the .NET CORE8 based VoiceAttack V2 !!!</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>  To build output compiled inline functions with the suffix "_V2", you MUST be running this profile in VoiceAttack V2 and NOT the .NET Framework 4.8 based VoiceAttack V1 !!!</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>21</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>  To build output compiled inline functions with the suffix "_V2", you MUST be running this profile in VoiceAttack V2 and NOT the .NET Framework 4.8 based VoiceAttack V1 !!!</Caption>
          <Id>f6b93ffc-0b3c-4905-92fb-17624c2543a3</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>  To build output compiled inline functions with the suffix "_V2", you MUST be running this profile in VoiceAttack V2 and NOT the .NET Framework 4.8 based VoiceAttack V1 !!!</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>22</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>fa05ad2d-a9d4-443d-b736-ca36f346196e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>_____________________________________________________________________________________________</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>23</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>_____________________________________________________________________________________________</Caption>
          <Id>7ae14415-eeed-4baf-9c7d-39f7058ad8c8</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>// AVCS_CORE_ResourceUpdates  --  Part of CORE initialization and update systems</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>24</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>// AVCS_CORE_ResourceUpdates  --  Part of CORE initialization and update systems</Caption>
          <Id>fb4b9ba9-e69a-41f3-a58a-f3ea265396e0</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// AVCS_CORE_ResourceUpdates  --  Part of CORE initialization and update systems</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  REQUIRED SETTINGS:</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>25</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  REQUIRED SETTINGS:</Caption>
          <Id>a8cab3c1-d14b-4bc8-84eb-e3683ae438f1</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  Wait for the inline function to finish before continuing:   YES</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>26</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  Wait for the inline function to finish before continuing:   YES</Caption>
          <Id>285b1e39-db41-4f16-8c21-26992b0f36fb</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  Retain instance:    NO</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>27</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  Retain instance:    NO</Caption>
          <Id>f353c354-31b2-44dd-9aac-24570a2b87f4</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    NO</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>DISABLED - Inline C# Function: AVCS_CORE_ResourcesUpdater_V1, wait until execution finishes</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>28</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>DISABLED - Inline C# Function: AVCS_CORE_ResourcesUpdater_V1, wait until execution finishes</Caption>
          <Id>39167455-11ab-42bb-9feb-0688ab7febda</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Security.Cryptography;
using System.Linq;
using System.Windows.Forms;
using System.Xml.Linq;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;

/*
Required Referenced Assemblies in VoiceAttack V1:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll;System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll

Required Referenced Assemblies in VoiceAttack V2:
Microsoft.CSharp.dll;System.dll;System.Collections.dll;System.ComponentModel.Primitives.dll;System.ComponentModel.dll;System.Data.DataSetExtensions.dll;System.Diagnostics.Process.dll;System.Drawing.Common.dll;System.Drawing.Primitives.dll;System.Linq.dll;System.Net.Http.dll;System.Private.Xml.Linq.dll;System.Private.Xml.dll;System.Security.Cryptography.dll;System.Windows.Forms.Primitives.dll;System.Windows.Forms.dll
*/

/// &lt;summary&gt;
/// A VoiceAttack inline function class for the AVCS CORE updater.&lt;br/&gt;
/// Responsible for orchestrating resource acquisition and validation through AVCS_CORE_MAIN return variables (the only short, closed-source class in AVCS)
/// &lt;/summary&gt;
public class VAInline
{
	/// &lt;summary&gt;
	/// Property indicating that user and AVCS website are online.
	/// &lt;/summary&gt;
	public bool AvcsCoreIsOnline { get; private set; }

	/// &lt;summary&gt;
	/// Currently supported default profile shortnames for AVCS CORE updater systems.&lt;br/&gt;
	/// DefaultProfileShortnames = { "CORE20", "BMS20" }
	/// &lt;/summary&gt;
	private static readonly string[] DefaultProfileShortnames = { "CORE20", "BMS20" };//, "RON20" };

	/// &lt;summary&gt;
	/// Profile build specific identifier, change along with core release/number strings to define the defaults for this version of AVCS CORE.&lt;br/&gt;
	/// Should be able to provide access to any interested users to invite-only beta testing branches if desired down the road.&lt;br/&gt;
	/// BuildBranches = { "alpha", "beta", "debug", "release" }
	/// &lt;/summary&gt;
	private static readonly string[] BuildBranches = { "alpha", "beta", "debug", "release" };

	/// &lt;summary&gt;
	/// DefaultBuildBranch = "release"
	/// &lt;/summary&gt;
	private static readonly string DefaultBuildBranch = "release";


	#region Path Strings
	/// &lt;summary&gt;
	/// List of extensions which are used to denote AVCS CORE inline functions.&lt;br/&gt;
	/// These are NOT proper dynamic link libaries for .NET, but compiled inline functions for use by VoiceAttack only.
	/// &lt;/summary&gt;
	private static readonly string[] InlineFunctionExtensions = new[] { ".dll" };

	/// &lt;summary&gt;
	/// List of precompiled inline function and HTML template resource extensions.&lt;br/&gt;
	/// These are files which will always be validated against the hashtable because they can "do" things.&lt;br/&gt;
	/// Currently:  [".dll", ".html"]
	/// &lt;/summary&gt;
	private static readonly string[] FunctionalExtensions = new[] { ".dll", ".html" };

	/// &lt;summary&gt;
	/// List of AVCS CORE Updater compiled inline functions which cannot be overwritten this session because at least one is in use.&lt;br/&gt;
	/// Currently:  ["AVCS_CORE_ResourcesUpdater_V1.dll", "AVCS_CORE_ResourcesUpdater_V2.dll"]
	/// &lt;/summary&gt;
	private static readonly string[] CoreUpdaterFileNames = new[] { "AVCS_CORE_ResourcesUpdater_V1.dll", "AVCS_CORE_ResourcesUpdater_V2.dll" };

	/// &lt;summary&gt;
	/// Fully qualified URL path to secure AVCS CORE online database.&lt;br/&gt;
	/// AvcsCoreUrl = "https://veterans-gaming.com/semlerpdx/avcs/core/"
	/// &lt;/summary&gt;
	private static readonly string AvcsCoreUrl = "https://veterans-gaming.com/semlerpdx/avcs/core/";

	/// &lt;summary&gt;
	/// RootDataUrl = "data/"
	/// &lt;/summary&gt;
	private static readonly string RootDataUrl = "data/";

	/// &lt;summary&gt;
	/// Base URL for AVCS GitHub repository, used for linking to the AVCS open source codebase and latest changelog.&lt;br/&gt;
	/// &lt;/summary&gt;
	private static readonly string AvcsGitHubUrlHome = "https://github.com/SemlerPDX/AVCS";

	/// &lt;summary&gt;
	/// Base URL for AVCS GitHub repository, used for linking to inline function open source code when combined with&lt;br/&gt;
	/// that function name (ending in .cs or .vb).
	/// &lt;/summary&gt;
	private static readonly string AvcsGitHubUrlBase = "https://github.com/SemlerPDX/AVCS/blob/master/VoiceAttack%20Inline%20Functions/";


	/// &lt;summary&gt;
	/// Local location of all AVCS CORE folders under AppData\Roaming.&lt;br/&gt;
	/// AvcsApps = "VoiceAttack-AVCS Profiles"
	/// &lt;/summary&gt;
	private static readonly string AvcsApps = "VoiceAttack-AVCS Profiles";

	/// &lt;summary&gt;
	/// Local location of all AVCS CORE resources (though sounds will be moved to a sounds folder and ignored).&lt;br/&gt;
	/// AvcsAppsResources = @"AVCS\resources"
	/// &lt;/summary&gt;
	private static readonly string AvcsAppsResources = @"AVCS\resources";

	/// &lt;summary&gt;
	/// Local location of all AVCS profile HTML command reference resources (though dynamic HTML templates will be in the &lt;see cref="AvcsAppsResources"/&gt; folder).&lt;br/&gt;
	/// AvcsCommRefResources = @"AVCS\voice_commands"
	/// &lt;/summary&gt;
	private static readonly string AvcsCommRefResources = @"AVCS\voice_commands";

	/// &lt;summary&gt;
	/// Local location of all AVCS CORE resources (though sounds will be moved to a sounds folder and ignored).&lt;br/&gt;
	/// AvcsAppsSounds = @"AVCS\sounds"
	/// &lt;/summary&gt;
	private static readonly string AvcsAppsSounds = @"AVCS\sounds";

	/// &lt;summary&gt;
	/// AvcsAppsProfilesFile = @"AVCS\avcs_profiles.txt"
	/// &lt;/summary&gt;
	private static readonly string AvcsAppsProfilesFile = @"AVCS\avcs_profiles.txt";

	/// &lt;summary&gt;
	/// AvcsAppsNewProfilesFile = @"AVCS\avcs_new_profiles.txt
	/// &lt;/summary&gt;
	private static readonly string AvcsAppsNewProfilesFile = @"AVCS\avcs_new_profiles.txt";


	/// &lt;summary&gt;
	/// VersionFileName = "version.core"
	/// &lt;/summary&gt;
	private static readonly string VersionFileName = "version.core";

	/// &lt;summary&gt;
	/// HashTableFileName = "hashtable.core"
	/// &lt;/summary&gt;
	private static readonly string HashTableFileName = "hashtable.core";

	/// &lt;summary&gt;
	/// ResourceOptionsFileName = "core_resource_options.xml"
	/// &lt;/summary&gt;
	private static readonly string ResourceOptionsFileName = "core_resource_options.xml";

	/// &lt;summary&gt;
	/// ResourceFilesSizeFileName = "core_resource_files.core"
	/// &lt;/summary&gt;
	private static readonly string ResourceFilesSizeFileName = "core_resource_files.core";

	/// &lt;summary&gt;
	/// Default file name for list of deprecated resources which will not be used, and may be removed from respective resource folder(s).&lt;br/&gt;
	/// DeprecatedResourcesFileName = "deprecated_files.txt"
	/// &lt;/summary&gt;
	private static readonly string DeprecatedResourcesFileName = "deprecated_files.txt";
	#endregion Path Strings


	/// &lt;summary&gt;
	/// Fully qualified URL to current branch resources file sizes list.  Example URL path value:&lt;br/&gt;
	/// AvcsResourcesFilesSizeUrl = @"../avcs/core/data/xml/(branch)/core_resource_files.core"
	/// &lt;/summary&gt;
	private static string AvcsResourcesFilesSizeUrl { get; set; }

	/// &lt;summary&gt;
	/// Fully qualified path to all AVCS CORE resources.  Example folder path value:&lt;br/&gt;
	/// AvcsResourcesDirectory = @"..\AppData\Roaming\VoiceAttack-AVCS Profiles\AVCS\resources"&lt;br/&gt;
	/// (may be dynamically adjusted based on profile shortname and VA version number)&lt;br/&gt;
	/// i.e. @"..\AppData\Roaming\VoiceAttack-AVCS Profiles\AVCS\resources\CORE20\v2" or "BMS20\v1"&lt;br/&gt;
	/// &lt;/summary&gt;
	private static string AvcsResourcesDirectory { get; set; }

	/// &lt;summary&gt;
	/// Fully qualified path to the AVCS CORE resource options XML file.  Example folder path value:&lt;br/&gt;
	/// ResourceOptionsPath = @"..\AppData\Roaming\VoiceAttack-AVCS Profiles\AVCS\resources\core_resource_options.xml"
	/// &lt;/summary&gt;
	private static string ResourceOptionsPath { get; set; }

	/// &lt;summary&gt;
	/// Fully qualified path to all AVCS sounds. Due to V1 migration, nested 'avcs' folder is required.  Example folder path value:&lt;br/&gt;
	/// AvcsResourcesDirectory = @"..\AppData\Roaming\VoiceAttack-AVCS Profiles\AVCS\sounds"
	/// &lt;/summary&gt;
	private static string AvcsSoundsDirectory { get; set; }

	/// &lt;summary&gt;
	/// Fully qualified path to all AVCS quick command reference HTML resources.  Example folder path value:&lt;br/&gt;
	/// AvcsCommRefDirectory = @"..\AppData\Roaming\VoiceAttack-AVCS Profiles\AVCS\voice_commands"
	/// &lt;/summary&gt;
	private static string AvcsCommRefDirectory { get; set; }

	/// &lt;summary&gt;
	/// Current branch property for common use.  Default value:&lt;br/&gt;
	/// CurrentBranch = "release"
	/// &lt;/summary&gt;
	private static string CurrentBranch { get; set; }

	/// &lt;summary&gt;
	/// AVCS resources build number property for common use.  Default value:&lt;br/&gt;
	/// AvcsResourcesBuildNumber = "2300"
	/// &lt;/summary&gt;
	private static string AvcsResourcesBuildNumber { get; set; }


	// Parsing helpers - ez editing and/or more efficient for loops, and avoids char[] allocations for each call
	private const string LineMarkerDashHeader = "-";
	private static readonly char[] NewLineChars = new[] { '\n', '\r' };
	private static readonly char[] KeyValDelimiter = new[] { '=' };


	// Changelog Variables
	private static bool _hasDeprecatedResources = false;
	private static readonly List&lt;string&gt; DeprecatedResources = new List&lt;string&gt;();

	private static readonly string ChangelogPrefixAdded = "Added - ";
	private static readonly string ChangelogPrefixRemoved = "Removed - ";
	private static readonly string ChangelogPrefixUpdated = "Updated - ";

	private static bool _isLinkLimitMsgAdded = false;

	private static readonly int MaxLinkLabels = 3;
	private static readonly int MaxTotalLabels = 15;

	/// &lt;summary&gt;
	/// DEV NOTE:  This list must be adjusted as old VB.NET inlines are refactored into C# over time.&lt;br/&gt;&lt;br/&gt;
	/// List of AVCS inline function file names which have ".vb" extensions on my GitHub for their open source uncompiled form.&lt;br/&gt;
	/// When presenting link labels for a changelog, instead of ".dll" being swapped for ".cs", these require ".vb" instead.
	/// &lt;/summary&gt;
	private static readonly string[] VisualBasicFileNames = new[]
	{
		"AVCS4_BMS_LocalizeDecimalsText_V1.dll",
		"AVCS4_BMS_LocalizeDecimalsText_V2.dll",
		"AVCS_CORE_QccPttGetButton_V1.dll",
		"AVCS_CORE_QccPttGetButton_V2.dll"
	};


	// AVCS CORE Updater Requests Variables
	private const string LocalHashTableRequest = "Get Local Hash Table";
	private const string CheckForUpdateRequest = "Check for Update";
	private const string ApplyUpdateRequest = "Apply Update";

	private const string AvcsCoreMainFunction = "F_CORE_MAIN";

	[STAThread]
	public void main()
	{
		bool canInitialize = true;

		try
		{
			var isError = VA.GetBoolean("AVCS_ERROR") ?? false;
			if (isError)
			{
				throw new Exception("AVCS ERROR: When an error has already occurred, AVCS cannot reinitialize until cleared.");
			}

			AvcsCoreIsOnline = VA.GetBoolean("AVCS_CORE_ONLINE") ?? false;

			canInitialize = AvcsResourcesInitialization();
		}
		catch
		{
			canInitialize = false;
			VA.WriteToLog("AVCS ERROR: Unable to complete initialization of AVCS CORE.", "red");
		}
		finally
		{
			VA.SetText("AVCS_CHECKSUMS", null);
			VA.SetText("AVCS_CHANGELOG", null);
			VA.SetBoolean("AVCS_UPDATE_PENDING", null);

			if (!canInitialize)
			{
				VA.SetBoolean("AVCS_ERROR", true);
				VA.SetBoolean("AVCS_MUST_RESTART", true);

				VA.WriteToLog("AVCS SOLUTIONS NOTE: AVCS CORE will never require VoiceAttack to run 'as admin' and this will not be the solution.", "green");
				VA.WriteToLog("AVCS SOLUTION 1: Restart VoiceAttack and reload AVCS CORE and any profile(s) used.", "yellow");
				VA.WriteToLog("AVCS SOLUTION 1b: Verify internet connection, switch to AVCS CORE, and only if nothing happens, say, 'Re-initialize Profile'.", "yellow");
				VA.WriteToLog("AVCS SOLUTION 2: If this issue occurred when you used a voice command:", "orange");
				VA.WriteToLog("-say, 'Create a Bug Report', and follow prompts to say the bugged voice command and get a detailed report.", "orange");
				VA.WriteToLog("AVCS SOLUTION 3: If this issue occurred when simply loading the profile, and AVCS cannot load at all, contact SemlerPDX.", "red");
			}
		}
	}


	/// &lt;summary&gt;
	/// Initializes the AVCS resources directories and files, checks for existing resources, and&lt;br/&gt;
	/// ensures they are all valid to the hashtable, or prompts the user to download updated resources.&lt;br/&gt;&lt;br/&gt;
	///  - If the user is a first time user, it will present a quick resource selection dialog and download those latest resources.&lt;br/&gt;
	///  - If the user is a returning user, it will validate existing resources and check for updates.&lt;br/&gt;
	///  - If an update is available, it will prompt the user to approve the update.&lt;br/&gt;
	///  - If new profiles have been discovered for returning users, they will be added to the resources list for this and future update checks.&lt;br/&gt;
	///  - If deprecated resources are found, it will write a list of those resources to file, then notify the user and offer cleanup.&lt;br/&gt;
	/// &lt;br/&gt;
	/// [ Placeholders for the not yet implemented Ready or Not profile (RON20) may remain until port into VoiceAttack V2 is completed.&lt;br/&gt;
	/// Updater itself may be refactored for more generic profile addressing, this was a bit rushed tbh... SemlerPDX July/Aug2025 ]
	/// &lt;/summary&gt;
	/// &lt;returns&gt;A boolean indicating whether AVCS CORE resources are present and profiles are ready to initialize.&lt;/returns&gt;
	/// &lt;exception cref="Exception"&gt;Thrown when an error occurs during AVCS resources initialization or validation along with relevant message.&lt;/exception&gt;
	private bool AvcsResourcesInitialization()
	{
		var vaVersionPath = "v" + VA.VAVersion.Major.ToString();
		var avcsApps = GetAppConfigPath(AvcsApps); // Required to not run VoiceAttack 'as administrator'
		if (string.IsNullOrWhiteSpace(avcsApps) || !Directory.Exists(avcsApps))
		{
			throw new Exception("AVCS ERROR: Required root AVCS path is somehow not set.");
		}

		AvcsResourcesDirectory = Path.Combine(avcsApps, AvcsAppsResources);
		AvcsSoundsDirectory = Path.Combine(avcsApps, AvcsAppsSounds);
		AvcsCommRefDirectory = Path.Combine(avcsApps, AvcsCommRefResources);

		var avcsFolders = new string[]
		{
			AvcsResourcesDirectory,
			AvcsSoundsDirectory,
			AvcsCommRefDirectory
		};


		// Create the AVCS resource folders (only if does not exist)
		foreach (var folder in avcsFolders)
		{
			if (!TryCreateResourceFolder(folder))
			{
				// Unable to create the required AVCS apps folder
				VA.WriteToLog("AVCS ERROR: Unable to create the required AVCS folder for resource files at the following path:", "red");
				VA.WriteToLog("'" + folder + "'", "blank");
				throw new Exception("AVCS ERROR: Unable to create the required AVCS folder for resource files.");
			}
		}

		// Branch Override - default will always be 'release' when not set
		CurrentBranch = VA.GetText("AVCS_CORE_BRANCH") ?? DefaultBuildBranch;
		if (string.IsNullOrWhiteSpace(CurrentBranch) || !BuildBranches.Contains(CurrentBranch.Trim().ToLowerInvariant()))
		{
			throw new Exception("AVCS ERROR: Invalid branch name.");
		}

		CurrentBranch = CurrentBranch.Trim().ToLowerInvariant();

		// Need to read profiles XML
		ResourceOptionsPath = Path.Combine(AvcsResourcesDirectory, ResourceOptionsFileName);

		// Need to create string array of various folder paths to resources
		var resourceFolders = new List&lt;string&gt;();
		var profilesToCheck = new List&lt;string&gt;();
		bool hasEnabledV1 = false;
		bool hasEnabledV2 = false;
		bool hasBms = false;
		//bool hasRon = false;

		// Read XML
		var xmlRoot = TryReadXmlFile(ResourceOptionsPath);

		bool hasResourcesFile = xmlRoot != null &amp;&amp; !IsEqual(xmlRoot.Name.LocalName, "empty");
		//bool hasResourcesFile = xmlRoot != null;
		bool isVersion2 = (VA.VAVersion.Major == 2);

		var coreShortname = DefaultProfileShortnames[0];
		var bmsShortname = DefaultProfileShortnames[1];
		//var ronShortname = DefaultProfileShortnames[2];

		// --- Core options ---
		var coreOptions = xmlRoot != null &amp;&amp; hasResourcesFile ? TryGetCoreOptionsXml(xmlRoot) : Tuple.Create(false, false); // defaults

		hasEnabledV1 = coreOptions.Item1;
		hasEnabledV2 = coreOptions.Item2;

		// --- Profiles ---
		var enabledProfiles = xmlRoot != null &amp;&amp; hasResourcesFile ? TryGetProfileListXml(xmlRoot) : new List&lt;string&gt;(); // returns a List&lt;string&gt; like ["BMS20", "RON20"]
		hasBms = enabledProfiles.Contains(bmsShortname);
		//hasRon = enabledProfiles.Contains(ronShortname);


		// Add the required initial core profile path and any saved profile paths to the resource folders list (only for this VA Version)
		AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, coreShortname, !isVersion2, isVersion2);
		profilesToCheck.Add(coreShortname);

		if (hasBms)
		{
			AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, bmsShortname, !isVersion2, isVersion2);
			profilesToCheck.Add(bmsShortname);
		}

		//if (hasRon)
		//{
		//    AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, ronShortname, !isVersion2, isVersion2);
		//    profilesToCheck.Add(ronShortname);
		//}

		// If this is a first time use, present the first time use selection dialog and set any/all resource folders for first use download
		if (!hasResourcesFile)
		{
			AvcsResourcesFilesSizeUrl = AvcsCoreUrl + RootDataUrl + "xml/" + CurrentBranch + "/" + ResourceFilesSizeFileName;

			var choices = ShowVersionGameSelectionDialog(isVersion2, hasEnabledV1, hasBms);//, hasRon);
			hasEnabledV1 = choices.Item1;
			hasEnabledV2 = choices.Item2;
			hasBms = choices.Item3;
			//hasRon = choices.Item4;

			// --- Save Core Options ---
			//xmlRoot = xmlRoot != null &amp;&amp; hasResourcesFile ? TrySetCoreOptionsXml(xmlRoot, hasEnabledV1, hasEnabledV2) : new XElement("empty");
			var newRoot = new XElement("resourceOptions"); // ensure a proper root on first run
			xmlRoot = TrySetCoreOptionsXml(newRoot, hasEnabledV1, hasEnabledV2);

			// Add any new paths to the resource folders list based on user selection (if any, and if not already on list)
			AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, coreShortname, hasEnabledV1, hasEnabledV2);

			// --- Save profiles ---
			var toEnable = new List&lt;string&gt;();
			if (hasBms)
			{
				toEnable.Add(bmsShortname);
				AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, bmsShortname, hasEnabledV1, hasEnabledV2);
				profilesToCheck.Add(bmsShortname);
			}
			//if (hasRon)
			//{
			//    toEnable.Add(ronShortname);
			//    AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, ronShortname, hasEnabledV1, hasEnabledV2);
			//    profilesToCheck.Add(ronShortname);
			//}

			xmlRoot = TrySetProfileListXml(xmlRoot, toEnable);

			// Save updated XML
			bool isWritten = TryWriteXmlFile(ResourceOptionsPath, xmlRoot);
		}
		else
		{
			// New and Existing Profile Adaptation for Resource Checks
			var avcsProfilesFile = Path.Combine(avcsApps, AvcsAppsProfilesFile);
			var avcsNewProfilesFile = Path.Combine(avcsApps, AvcsAppsNewProfilesFile);

			var profilesContent = TryReadProfilesFile(avcsProfilesFile);
			var newProfilesContent = TryReadProfilesFile(avcsNewProfilesFile);

			var hasNewBms = !hasBms &amp;&amp; (
				profilesContent.ToUpperInvariant().Contains(bmsShortname.ToUpperInvariant())
				|| newProfilesContent.ToUpperInvariant().Contains(bmsShortname.ToUpperInvariant())
			);

			//var hasNewRon = !hasRon &amp;&amp; (
			//    profilesContent.ToUpperInvariant().Contains(ronShortname.ToUpperInvariant())
			//    || newProfilesContent.ToUpperInvariant().Contains(ronShortname.ToUpperInvariant())
			//);

			if (hasNewBms)// || hasNewRon)
			{
				// --- Save Core Options ---
				xmlRoot = xmlRoot != null &amp;&amp; hasResourcesFile ? TrySetCoreOptionsXml(xmlRoot, hasEnabledV1, hasEnabledV2) : new XElement("empty");


				// --- Save and Add profile(s) ---
				var toEnable = new List&lt;string&gt;();
				if (hasNewBms)
				{
					toEnable.Add(bmsShortname);

					AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, bmsShortname, !isVersion2, isVersion2);
					profilesToCheck.Add(bmsShortname);
				}

				//if (hasNewRon)
				//{
				//    toEnable.Add(ronShortname);

				//    AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, ronShortname, !isVersion2, isVersion2);
				//    profilesToCheck.Add(ronShortname);
				//}

				xmlRoot = TrySetProfileListXml(xmlRoot, toEnable);

				// Save updated XML
				TryWriteXmlFile(ResourceOptionsPath, xmlRoot);
			}
		}

		// Create the AVCS profile specific resource folders
		foreach (var folder in resourceFolders)
		{
			if (!TryCreateResourceFolder(folder))
			{
				// Unable to create the required AVCS apps folder
				VA.WriteToLog("AVCS ERROR: Unable to create the required AVCS folder for resource files at the following path:", "red");
				VA.WriteToLog("'" + folder + "'", "blank");
				throw new Exception("AVCS ERROR: Unable to create the required AVCS folder for resource files.");
			}
		}

		if (!File.Exists(ResourceOptionsPath))
		{
			VA.WriteToLog("AVCS ERROR: Required AVCS resource options file does not exist at the following path:", "red");
			VA.WriteToLog("'" + ResourceOptionsPath + "'", "blank");
			throw new Exception("AVCS ERROR: Required AVCS resource options file does not exist.");
		}

		// This will validate resources (if any), check for updates, and return true if is new/returning user with valid resources, or
		// false if not all resources are valid and was unable to repair or get required resources (such as user or AVCS website offline).
		bool isReadyToInit = true;
		foreach (var profileShortname in profilesToCheck)
		{
			if (string.IsNullOrEmpty(profileShortname) || !isReadyToInit)
			{
				continue; // skip to next profile on any unlikely empty profile shortnames, or to end on any failure 
			}

			AvcsResourcesDirectory = Path.Combine(avcsApps, AvcsAppsResources, profileShortname, vaVersionPath);
			isReadyToInit = AvcsCoreCheckResources(profileShortname);
		}

		return isReadyToInit;
	}


	// ----- Helpers to Help with the things wot the methods above need Help wit -----
	/// &lt;summary&gt;
	/// Checks if the AVCS CORE resources are valid for the specified profile.&lt;br/&gt;
	/// &lt;/summary&gt;
	/// &lt;param name="shortName"&gt;The profile short name, an amalgam of the all-caps profile keyword name, and its major and minor version numbers (i.e. "CORE20").&lt;/param&gt;
	/// &lt;returns&gt;True if resources are valid and up-to-date and AVCS CORE can initialize, false otherwise.&lt;/returns&gt;
	/// &lt;exception cref="Exception"&gt;Thrown when an error occurs during resource validation or update checks.&lt;/exception&gt;
	private bool AvcsCoreCheckResources(string profileShortname)
	{
		// Validate existing unencrypted resource files (if any)
		bool isReturningUser = HasAllRequiredResources(profileShortname);

		if (AvcsCoreIsOnline)
		{
			// Execute the main AVCS CORE command to get the latest hash table if user and AVCS website are both online
			// Next, if online, will return true if the changelog is different from what is on file locally
			// If different, the contents of the new changelog will be returned for a user update approval message
			// If different (including no local file), and is first time use, will get the latest resources so AVCS CORE can initialize for the first time
			VA.SetText("~passed1", CheckForUpdateRequest);
			VA.SetText("~passed2", profileShortname);
			VA.SetText("~passed3", CurrentBranch);
			VA.Command.Execute(AvcsCoreMainFunction, WaitForReturn: true, AsSubcommand: true, PassedText: "~passed1;~passed2;~passed3");

			var isError = VA.GetBoolean("AVCS_ERROR") ?? false;
			if (isError)
			{
				throw new Exception("AVCS ERROR: Unable to check for updates or validate resources for profile '" + profileShortname + "'.");
			}
		}

		// Set the global build number variable here after every 'first' call to AVCS_CORE_MAIN, as it may change with each profile shortname
		AvcsResourcesBuildNumber = VA.GetText("AVCS_BUILD") ?? ""; // non-crucial, if it dies, it dies

		// If not online, bypass any update checks and return
		if (!AvcsCoreIsOnline)
		{
			if (!isReturningUser)
			{
				VA.WriteToLog("AVCS ERROR: No resources found, and user or AVCS website is offline - cannot initialize AVCS CORE.", "red");
			}

			return isReturningUser;
		}

		var isUpdatePending = VA.GetBoolean("AVCS_UPDATE_PENDING") ?? false;
		if (isReturningUser &amp;&amp; !isUpdatePending)
		{
			return true; // no updates, continue initialization
		}

		var latestChangeLog = VA.GetText("AVCS_CHANGELOG") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(latestChangeLog))
		{
			VA.WriteToLog("AVCS ERROR: Update pending but change log is somehow null/empty, or contains no entries.", "red");
			return isReturningUser;
		}

		if (isReturningUser &amp;&amp; !IsUpdateApprovedByUser(latestChangeLog))
		{
			// If not first time use and update is not approved, just continue initialization
			return true; // all good, user can update another time
		}

		return GetUpdatedResourceFiles(profileShortname);
	}

	/// &lt;summary&gt;
	/// Checks if the AVCS resources folder has all required resources for the specified profile.&lt;br/&gt;
	/// &lt;/summary&gt;
	/// &lt;param name="shortName"&gt;The profile short name, an amalgam of the all-caps profile keyword name, and its major and minor version numbers (i.e. "CORE20").&lt;/param&gt;
	/// &lt;returns&gt;True if resources folder for this profile has all valid required resource files, false otherwise.&lt;/returns&gt;
	private bool HasAllRequiredResources(string profileShortname)
	{
		// Check local files for bare-minimum check of this being a returning user - if no files, no resources to validate
		var versionFilePath = Path.Combine(AvcsResourcesDirectory, VersionFileName);
		var hashTableFilePath = Path.Combine(AvcsResourcesDirectory, HashTableFileName);
		var hasVersionFiles = File.Exists(versionFilePath) &amp;&amp; File.Exists(hashTableFilePath);

		// Validate all functional resource files in the AVCS resources folder
		return hasVersionFiles &amp;&amp; HasValidResourceFiles(profileShortname);
	}

	/// &lt;summary&gt;
	/// Checks if the AVCS resources folder contains valid resource files for the specified profile.&lt;br/&gt;
	/// Also ensures valid paths have been set for each compiled inline function to a VA text variable named for&lt;br/&gt;
	/// the inline function (minus extension and version suffix).&lt;br/&gt;
	/// &lt;/summary&gt;
	/// &lt;param name="shortName"&gt;The profile short name, an amalgam of the all-caps profile keyword name, and its major and minor version numbers (i.e. "CORE20").&lt;/param&gt;
	/// &lt;returns&gt;True if all required resource files are valid, false otherwise.&lt;/returns&gt;
	private bool HasValidResourceFiles(string profileShortname)
	{
		bool isAllValid = true;
		List&lt;string&gt; invalidFilePaths = new List&lt;string&gt;();

		if (!Directory.Exists(AvcsResourcesDirectory))
		{
			VA.WriteToLog("AVCS ERROR: AVCS resources directory does not exist.", "red");
			return false;
		}

		try
		{
			// Execute the main AVCS CORE command to get the local hash table
			VA.SetText("~passed1", LocalHashTableRequest);
			VA.SetText("~passed2", profileShortname);
			VA.SetText("~passed3", CurrentBranch);
			VA.Command.Execute(AvcsCoreMainFunction, WaitForReturn: true, AsSubcommand: true, PassedText: "~passed1;~passed2;~passed3");

			var isError = VA.GetBoolean("AVCS_ERROR") ?? false;
			if (isError)
			{
				throw new Exception("AVCS ERROR: Unable to check for updates or validate resources for profile '" + profileShortname + "'.");
			}

			var localHashTable = VA.GetText("AVCS_CHECKSUMS") ?? string.Empty;
			if (string.IsNullOrWhiteSpace(localHashTable) || !localHashTable.Contains(KeyValDelimiter[0]))
			{
				throw new Exception("AVCS ERROR: Hash table is somehow null/empty, or contains no entries.");
			}

			// Builds a list of files from the latest hash table and validate each functional resource in the AVCS resources folder
			string[] fileNames = GetFileListFromHashTable(localHashTable);

			var parsedHashTable = GetParsedHashTable(localHashTable) ?? new Dictionary&lt;string, string&gt;(StringComparer.OrdinalIgnoreCase);
			if (parsedHashTable.Count == 0)
			{
				throw new Exception("AVCS ERROR: Parsed hash table dictionary is somehow empty.");
			}

			foreach (var fileName in fileNames)
			{
				// Presently, the only AVCS resource files which can "do" things are precompiled inline functions and a small pagination JS within commref HTML template(s)
				// Therefore they should be verified as true to the open source code on my GitHub via the hash table for safety &amp; peace of mind
				var fileExt = Path.GetExtension(fileName);
				if (!IsEqual(fileExt, FunctionalExtensions))
				{
					continue;
				}

				// Determine if this file is in the resources folder or the command reference folder
				var filePath = IsEqual(fileExt, InlineFunctionExtensions)
					? Path.Combine(AvcsResourcesDirectory, fileName)
					: Path.Combine(AvcsCommRefDirectory, fileName);

				if (!IsValidResourceFile(filePath, parsedHashTable))
				{
					invalidFilePaths.Add(filePath);
					isAllValid = false;
					continue; // let it slide and set isAllInvaid false, continue checking all files
				}

				// CRUCIAL: Set each HTML template and compiled inline function path to a VA text variable of its name (minus extension and any version suffix)
				if (IsEqual(fileExt, FunctionalExtensions) &amp;&amp; !IsEqual(fileName, CoreUpdaterFileNames))
				{
					var fileNameWithoutExt = Path.GetFileNameWithoutExtension(fileName).Replace("_V1", "").Replace("_V2", "");
					VA.SetText(fileNameWithoutExt, filePath);
					// To execute AVCS compiled inline functions, pass in the name of the function in ~passedtext1 to F_CORE_RUN
					// - F_CORE_RUN will assemble path from {TXT:{TXT:~passedtext1}}, using passed params to wait and/or retain instance
				}
			}
		}
		catch (Exception ex)
		{
			isAllValid = false;
			VA.WriteToLog(ex.Message, "red");
			VA.WriteToLog("AVCS SOLUTION: Try restarting VoiceAttack and switch to AVCS CORE. You do NOT need to run VoiceAttack as admin for AVCS CORE.", "red");
		}

		// If not all valid, attempt to delete the invalid file to get a new valid one in its place
		if (!isAllValid &amp;&amp; invalidFilePaths.Count &gt; 0)
		{
			VA.WriteToLog("AVCS UPDATER: Invalid or outdated AVCS resource file(s) removed:", "red");
			foreach (var invalidFilePath in invalidFilePaths)
			{
				// If the file is not valid, it must be deleted so it cannot be utilized and so a new one can be downloaded to repair it
				if (File.Exists(invalidFilePath) &amp;&amp; TryDeleteResourceFile(invalidFilePath))
				{
					VA.WriteToLog(invalidFilePath, "blank");
				}
			}
		}


		// If there are deprecated resources, ask user if they want AVCS to clean them up
		if (_hasDeprecatedResources &amp;&amp; IsResourceCleanupApprovedByUser())
		{
			VA.WriteToLog("AVCS NOTE: Cleaning up deprecated resources....", "green");

			var color = "green";
			foreach (var resource in DeprecatedResources)
			{
				// If the file is deprecated, it should not occupy space on users drive - delete upon approval
				var filePath = Path.Combine(AvcsResourcesDirectory, resource);
				if (File.Exists(filePath) &amp;&amp; !TryDeleteResourceFile(filePath))
				{
					color = "red";
					VA.WriteToLog("AVCS ERROR: Failed to delete deprecated resource file: " + resource, "red");
				}
			}

			VA.WriteToLog("AVCS NOTE: Deprecated resources cleanup has concluded...", color);
			_hasDeprecatedResources = false;
			DeprecatedResources.Clear();
		}

		return isAllValid;
	}

	/// &lt;summary&gt;
	/// Builds and adds the profile resource files root paths to the supplied list of resource folders (if not already on it) relative to the&lt;br/&gt;
	/// profile name and version amalgam ('shortname'), and the current VA versions enabled.
	/// &lt;/summary&gt;
	/// &lt;param name="profilesList"&gt;The list of profile paths to add to.&lt;/param&gt;
	/// &lt;param name="rootDir"&gt;The root directory where all resource files are located.&lt;/param&gt;
	/// &lt;param name="shortName"&gt;The profile short name, an amalgam of the all-caps profile keyword name, and its major and minor version numbers (i.e. "CORE20").&lt;/param&gt;
	/// &lt;param name="hasVersion1"&gt;A boolean indicating if the profile has a version 1 resources path.&lt;/param&gt;
	/// &lt;param name="hasVersion2"&gt;A boolean indicating if the profile has a version 2 resources path.&lt;/param&gt;
	private void AddRelativeProfilePaths(List&lt;string&gt; profilesList, string rootDir, string shortName, bool hasVersion1, bool hasVersion2)
	{
		var isVersion2 = VA.VAVersion.Major == 2;
		var addAltPaths = (isVersion2 &amp;&amp; hasVersion1) || (!isVersion2 &amp;&amp; hasVersion2);

		var vaVersionPath = "v" + (isVersion2 ? "2" : "1");
		var otherVaVersionPath = "v" + (isVersion2 ? "1" : "2");

		var profilePath = Path.Combine(rootDir, shortName, vaVersionPath);
		var profileAltPath = Path.Combine(rootDir, shortName, otherVaVersionPath);

		if (profilesList.Count &gt; 0 &amp;&amp; !profilesList.Contains(profilePath, StringComparer.OrdinalIgnoreCase))
		{
			profilesList.Add(profilePath);
		}

		if (addAltPaths &amp;&amp; !profilesList.Contains(profileAltPath, StringComparer.OrdinalIgnoreCase))
		{
			profilesList.Add(profileAltPath);
		}
	}


	// ----- Helpers to Help with the things wot the Helper methods above themselves need Help wit -----
	private bool IsEqual(string input, string comparator) { return IsEqual(input, new[] { comparator }); }
	private bool IsEqual(string input, string[] comparators)
	{
		foreach (var comparator in comparators)
		{
			if (string.Equals(input.ToUpperInvariant(), comparator.ToUpperInvariant()))
			{
				return true;
			}
		}

		return false;
	}

	public bool IsFunctionalLink(string line, string[] exts)
	{
		return exts.Any(ext =&gt; line.ToLowerInvariant().Trim().EndsWith(ext.ToLowerInvariant()));
	}

	private bool IsVisualBasicSource(string dllFileName, string[] vbFiles)
	{
		// Get the base file name (without extension), case-insensitive
		var baseName = System.IO.Path.GetFileNameWithoutExtension(dllFileName);
		foreach (var vbFile in vbFiles)
		{
			var vbBase = System.IO.Path.GetFileNameWithoutExtension(vbFile);
			if (IsEqual(baseName, vbBase))
			{
				return true;
			}
		}

		return false;
	}

	private bool IsValidResourceFile(string resourceFilePath, Dictionary&lt;string, string&gt; hashDict)
	{
		try
		{
			if (hashDict.Count == 0)
			{
				return false; // Invalid hash table
			}

			if (string.IsNullOrWhiteSpace(resourceFilePath) || !File.Exists(resourceFilePath))
			{
				return false; // Invalid path or non-existent
			}

			string expectedHash;
			var resourceFileName = Path.GetFileName(resourceFilePath);
			if (!hashDict.TryGetValue(resourceFileName, out expectedHash))
			{
				// Unknown file, treat as valid yet deprecated and due for removal in upcoming build update
				_hasDeprecatedResources = true;
				DeprecatedResources.Add(resourceFileName); // rather than attempt to delete, ask user?
				return true;
			}

			// Must provide a literal string as a non-comparable string for IsEqual on expectedHash (currentHash could be string.Empty on error)
			expectedHash = string.IsNullOrWhiteSpace(expectedHash) ? "null" : expectedHash; // the word "null" or anything is sufficient

			var currentHash = GetFileHash(resourceFilePath);
			if (!IsEqual(currentHash, expectedHash))
			{
				return false; // Invalid hash - does not match
			}

			return true;
		}
		catch
		{
			return false;
		}
	}

	private bool IsUpdateApprovedByUser(string changelog)
	{
		if (!string.IsNullOrEmpty(changelog))
		{
			changelog = string.Join("\n", changelog.Split(NewLineChars, StringSplitOptions.RemoveEmptyEntries).Select(m =&gt; m.Trim()));
		}

		var result = ShowUpdateApprovalDialog(changelog);

		return result == DialogResult.Yes;
	}

	private bool IsResourceCleanupApprovedByUser()
	{
		// guard and early return on DeprecatedResources having no files as lines...
		if (DeprecatedResources.Count == 0)
		{
			VA.WriteToLog("AVCS ERROR: No deprecated resources found to remove - should not be possible at this stage.", "red");
			return false;
		}
		var isMultipleFiles = DeprecatedResources.Count &gt; 1;
		var pluralSuffix = isMultipleFiles ? "s" : string.Empty;
		var pluralDeterminer = isMultipleFiles ? " some" : " a";
		var pluralPronoun = isMultipleFiles ? " they" : " it";
		var deprecatedResources = string.Join("\n", DeprecatedResources.Select(r =&gt; r.Replace("\\", "\\\\").Replace("\n", "\\n")));

		VA.WriteToLog("AVCS NOTE: Irrelevant or deprecated AVCS resource file" + pluralSuffix + " can be removed.", "orange");

		var message =
			"AVCS CORE has detected" + pluralDeterminer + " deprecated or irrelevant resource file" + pluralSuffix + " in the AVCS resources folder." +
			"\n\n" +
			"Would you like AVCS to auto-cleanup the following file" + pluralSuffix + "?\n" +
			deprecatedResources +
			"\n\n" +
			"A file named '" + DeprecatedResourcesFileName + "' has been written to this folder only for your reference.\n\n" +
			"Press 'No' to open the folder so you can review and delete the file" + pluralSuffix + " manually.\n\n" +
			"Press 'Cancel' to leave the file" + pluralSuffix + " as-is," + pluralPronoun + " will not cause any issues.";

		var result = System.Windows.Forms.MessageBox.Show(
			message,
			"AVCS CORE - Deprecated Resources Cleanup",
			System.Windows.Forms.MessageBoxButtons.YesNoCancel,
			System.Windows.Forms.MessageBoxIcon.Information,
			System.Windows.Forms.MessageBoxDefaultButton.Button1
		);


		// Write a simple text file so user can refer to this list as needed
		var deprecatedFilePath = Path.Combine(AvcsResourcesDirectory, DeprecatedResourcesFileName);
		try
		{
			File.WriteAllLines(deprecatedFilePath, DeprecatedResources);
		}
		catch
		{
			VA.WriteToLog("AVCS ERROR: Failed to write deprecated resources list to file: " + deprecatedFilePath, "red");
		}

		// If user pressed 'yes', return 'true' to clean up deprecated AVCS resource files
		if (result == System.Windows.Forms.DialogResult.Yes)
		{
			return true;
		}

		// If user pressed 'cancel', leave everything as-is
		if (result == System.Windows.Forms.DialogResult.Cancel)
		{
			VA.WriteToLog("AVCS NOTE: Leaving deprecated resource" + pluralSuffix + " as-is in AVCS resource folder.", "yellow");
		}
		// If user pressed 'no', open the AVCS resources folder in explorer
		else if (result == System.Windows.Forms.DialogResult.No)
		{
			VA.WriteToLog("AVCS NOTE: Opening the AVCS resources folder. See file named '" + DeprecatedResourcesFileName + "' for reference", "green");
			System.Diagnostics.Process.Start("explorer.exe", AvcsResourcesDirectory);
		}

		return false;
	}


	// ----- Can't say I don't try...
	private XElement TrySetCoreOptionsXml(XElement root, bool v1, bool v2)
	{
		if (root == null || !IsEqual(root.Name.LocalName, "resourceOptions"))
		{
			root = new XElement("resourceOptions");
		}

		var core = root.Element("core");
		if (core == null)
		{
			core = new XElement("core");
			root.AddFirst(core);
		}

		try
		{
			core.SetElementValue("v1", v1);
			core.SetElementValue("v2", v2);

			return root;
		}
		catch
		{
			return new XElement("resourceOptions");
		}
	}

	private XElement TrySetProfileListXml(XElement root, IEnumerable&lt;string&gt; selectedProfiles)
	{
		if (root == null || !IsEqual(root.Name.LocalName, "resourceOptions"))
		{
			root = new XElement("resourceOptions");
		}

		var profiles = root.Element("profiles");
		if (profiles != null)
		{
			profiles.Remove();
		}

		try
		{
			var list = (selectedProfiles ?? Enumerable.Empty&lt;string&gt;()).Where(p =&gt; !string.IsNullOrWhiteSpace(p)).ToList();
			if (list.Count == 0)
			{
				return root; // do not add &lt;profiles&gt; at all when empty
			}

			profiles = new XElement("profiles", selectedProfiles.Select(p =&gt; new XElement("profile", p)));
			root.Add(profiles);

			return root;
		}
		catch
		{
			return new XElement("resourceOptions");
		}
	}

	private Tuple&lt;bool, bool&gt; TryGetCoreOptionsXml(XElement root)
	{
		if (root == null || !IsEqual(root.Name.LocalName, "resourceOptions"))
		{
			// return empty tuple if root is null
			return Tuple.Create(false, false);
		}

		var core = root.Element("core");
		if (core == null)
		{
			return Tuple.Create(false, false);
		}

		try
		{
			bool v1 = false, v2 = false;
			bool.TryParse((string)core.Element("v1"), out v1);
			bool.TryParse((string)core.Element("v2"), out v2);
			var coreOptions = Tuple.Create(v1, v2);

			return coreOptions;
		}
		catch
		{
			return Tuple.Create(false, false);
		}
	}

	private List&lt;string&gt; TryGetProfileListXml(XElement root)
	{
		// If the root is empty, return new list of string
		if (root == null || !IsEqual(root.Name.LocalName, "resourceOptions"))
		{
			return new List&lt;string&gt;();
		}

		var profiles = root.Element("profiles");
		if (profiles == null)
		{
			return new List&lt;string&gt;();
		}

		try
		{
			var profilesList = profiles.Elements("profile").Select(p =&gt; (string)p).ToList();
			return profilesList;
		}
		catch
		{
			return new List&lt;string&gt;();
		}
	}

	private XElement TryParseXmlFromBytes(byte[] data)
	{
		try
		{
			if (data.Length == 0)
			{
				return new XElement("empty");
			}
			using (var ms = new MemoryStream(data))
			{
				return XElement.Load(ms);
			}
		}
		catch
		{
			return new XElement("empty");
		}
	}

	private bool TryWriteXmlFile(string filePath, XElement xml)
	{
		try
		{
			xml.Save(filePath);
			return true;
		}
		catch
		{
			return false;
		}
	}

	private XElement TryReadXmlFile(string filePath)
	{
		try
		{
			if (!File.Exists(filePath))
			{
				return new XElement("empty");
			}

			var xmlFile = XElement.Load(filePath);
			return xmlFile;
		}
		catch
		{
			return new XElement("empty");
		}
	}

	private string TryReadProfilesFile(string path)
	{
		try
		{
			if (string.IsNullOrWhiteSpace(path) || !File.Exists(path))
			{
				return string.Empty;
			}

			var fileContents = File.ReadAllText(path);

			if (string.IsNullOrWhiteSpace(fileContents))
			{
				return string.Empty;
			}

			return fileContents;
		}
		catch
		{
			return string.Empty;
		}
	}

	private static byte[] TryDownloadResourceFile(string url)
	{
		try
		{
			if (string.IsNullOrWhiteSpace(url))
			{
				return Array.Empty&lt;byte&gt;();
			}

			try { Native.DeleteUrlCacheEntryW(url); } catch { }

			string bustUrl = url + (url.IndexOf('?') &gt;= 0 ? "&amp;" : "?") + "cb=" + DateTime.UtcNow.Ticks.ToString();

			IStream comStream;
			int hr = Native.URLOpenBlockingStreamW(IntPtr.Zero, bustUrl, out comStream, 0, IntPtr.Zero);
			if (hr != 0 || comStream == null)
			{
				return Array.Empty&lt;byte&gt;();
			}

			try
			{
				using (var ms = new MemoryStream())
				{
					byte[] buffer = new byte[8192];
					IntPtr pRead = Marshal.AllocHGlobal(sizeof(int));
					try
					{
						while (true)
						{
							comStream.Read(buffer, buffer.Length, pRead);
							int bytesRead = Marshal.ReadInt32(pRead);
							if (bytesRead == 0)
							{
								break; // EOF
							}
							ms.Write(buffer, 0, bytesRead);
						}
					}
					finally
					{
						Marshal.FreeHGlobal(pRead);
					}

					return ms.ToArray();
				}
			}
			finally
			{
				try { Marshal.ReleaseComObject(comStream); } catch { }
			}
		}
		catch
		{
			return Array.Empty&lt;byte&gt;();
		}
	}

	private bool TryRemoveReadOnly(string filePath)
	{
		if (!File.Exists(filePath))
		{
			return false;
		}

		try
		{
			var attributes = File.GetAttributes(filePath);
			if ((attributes &amp; FileAttributes.ReadOnly) == 0)
			{
				return true; // Not read-only, nothing to do, so return true, as it's all blue
			}

			// Remove read-only attribute
			File.SetAttributes(filePath, attributes &amp; ~FileAttributes.ReadOnly);
			return true;
		}
		catch
		{
			return false;
		}
	}

	private bool TryDeleteResourceFile(string filePath)
	{
		try
		{
			if (string.IsNullOrWhiteSpace(filePath) || !File.Exists(filePath))
			{
				return true; // not really a failure - caller wanted a file gone, it doesn't exist, why communicate a failure?
			}

			// Guard for AVCS resource files: CORE will only ever delete its own files from its own folders
			if (!filePath.ToLowerInvariant().Contains(AvcsApps.ToLowerInvariant()))
			{
				VA.WriteToLog("AVCS ERROR: Attempt to delete a file outside of the AVCS CORE profile folders has failed: " + filePath, "red");
				VA.WriteToLog(filePath, "blank");
				VA.WriteToLog("No files or folders have been deleted by this action, and AVCS will never delete files outside of its own folder tree.", "yellow");
				return false;
			}

			// Must check if this AVCS resource file is read-only and try to remove the read-only attribute if it is set
			// Best to try first on any AVCS file, because if something cocks up, the subsequent delete instruction will hcf AVCS CORE
			if ((File.GetAttributes(filePath) &amp; FileAttributes.ReadOnly) != 0 &amp;&amp; !TryRemoveReadOnly(filePath))
			{
				return false; // Failed to remove read-only attribute from read-only AVCS resource, cannot delete
			}

			File.Delete(filePath);
			return true;
		}
		catch
		{
			// let it slide... just communicate it failed with 'false'
			return false;
		}
	}

	private bool TryCreateResourceFolder(string folderPath)
	{
		if (string.IsNullOrWhiteSpace(folderPath))
		{
			return false;
		}

		try
		{
			var _ = Path.GetFullPath(folderPath);
			Directory.CreateDirectory(folderPath); // no-op if it already exists
			return true;
		}
		catch
		{
			return false; // Folder creation failed
		}
	}


	/// &lt;summary&gt;
	/// Retrieves the full path to the '..\AppData\Roaming' folder for AVCS VoiceAttack profiles.  Example path:&lt;br/&gt;
	/// @"..\AppData\Roaming\VoiceAttack-AVCS Profiles"
	/// &lt;/summary&gt;
	/// &lt;param name="appFolderName"&gt;The name of the AVCS folder. Should be 'VoiceAttack-AVCS Profiles'.&lt;/param&gt;
	/// &lt;returns&gt;&lt;/returns&gt;
	private string GetAppConfigPath(string appFolderName)
	{
		if (string.IsNullOrWhiteSpace(appFolderName))
		{
			return string.Empty;
		}

		var baseDir = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
		if (string.IsNullOrEmpty(baseDir))
		{
			return string.Empty; // super unlikely, but cheap guard
		}

		var resourcesDir = Path.Combine(baseDir, appFolderName);

		return TryCreateResourceFolder(resourcesDir) ? resourcesDir : string.Empty;
	}

	private List&lt;Tuple&lt;string, string&gt;&gt; GetParsedChangelogLines(string changelog)
	{
		var result = new List&lt;Tuple&lt;string, string&gt;&gt;();

		string[] changelogLines = changelog.Split(NewLineChars, StringSplitOptions.RemoveEmptyEntries);

		int startIdx = -1, endIdx = changelogLines.Length; // start and end of .dll section
		for (int i = 0; i &lt; changelogLines.Length; i++)
		{
			if (!changelogLines[i].StartsWith("-AVCS Inline Functions-"))
			{
				continue;
			}

			startIdx = i + 1;
			// Look for next header after this
			for (int j = startIdx; j &lt; changelogLines.Length; j++)
			{
				if (changelogLines[j].StartsWith(LineMarkerDashHeader) &amp;&amp; j != i)
				{
					endIdx = j;
					break;
				}
			}
			break;
		}

		// Determine how many .dll lines there are, and the link limit (simple: n + lines available after .dlls, but max N)
		int dllCount = 0;
		for (int i = startIdx; i &lt; endIdx; i++)
		{
			if (i &gt;= 0 &amp;&amp; IsFunctionalLink(changelogLines[i], InlineFunctionExtensions))
			{
				dllCount++;
			}
		}

		int totalLines = changelogLines.Length;
		int maxLinkLabels = MaxLinkLabels;
		// For every empty "line slot" up to max, increase the link limit by one (simple logic)
		if (totalLines &lt; MaxTotalLabels)
		{
			if (maxLinkLabels &gt; dllCount)
			{
				maxLinkLabels = dllCount;
			}
		}
		else if (dllCount &lt; MaxLinkLabels)
		{
			maxLinkLabels = dllCount; // then, don't gotta worry about too may .dll updates making box too tall
		}
		else
		{
			maxLinkLabels = MaxTotalLabels - (totalLines - dllCount);
		}

		int linksAdded = 0, linksSkipped = 0;
		for (int i = 0; i &lt; changelogLines.Length; i++)
		{
			string line = changelogLines[i];

			// Compiled Inline Function links (.dll)
			if (i &gt;= startIdx &amp;&amp; i &lt; endIdx &amp;&amp; IsFunctionalLink(line, InlineFunctionExtensions) &amp;&amp; !line.StartsWith(ChangelogPrefixRemoved))
			{
				if (linksAdded &lt; maxLinkLabels)
				{
					string fileName = line.Replace(ChangelogPrefixAdded, "").Replace(ChangelogPrefixUpdated, "");
					string repoFileName = Path.GetFileNameWithoutExtension(fileName).Replace("_V1", "").Replace("_V2", "");
					string urlExt = IsVisualBasicSource(fileName, VisualBasicFileNames) ? ".vb" : ".cs";
					string url = AvcsGitHubUrlBase + repoFileName + urlExt;
					result.Add(Tuple.Create(line, url));
					linksAdded++;
				}
				else
				{
					linksSkipped++;
				}
			}
			// Section headers or regular text
			else if (i &lt; startIdx || i &gt;= endIdx || !IsFunctionalLink(line, InlineFunctionExtensions) || line.StartsWith(ChangelogPrefixRemoved))
			{
				// Naturally, this section will not be entered until after the last .dll line to be shown, and more if remained, insert the "...and N more" before this next header line
				if (!_isLinkLimitMsgAdded &amp;&amp; linksAdded == maxLinkLabels &amp;&amp; linksSkipped &gt; 0)
				{
					_isLinkLimitMsgAdded = true;
					result.Add(Tuple.Create("(…and " + linksSkipped.ToString() + " more... big update... see full changelog link at bottom)", ""));
				}

				// This is a non-dll line, and on first entry, possibly another section header line OR the final [message in square brackets]
				result.Add(Tuple.Create(line, ""));
			}
		}

		return result;
	}

	private Dictionary&lt;string, string&gt; GetParsedHashTable(string hashTable)
	{
		return string.IsNullOrWhiteSpace(hashTable)
			? new Dictionary&lt;string, string&gt;(StringComparer.OrdinalIgnoreCase)
			: hashTable
				.Split(NewLineChars, StringSplitOptions.RemoveEmptyEntries)
				.Select(line =&gt; line.Split(KeyValDelimiter, 2))
				.Where(kv =&gt; kv.Length == 2)
				.ToDictionary(
					kv =&gt; kv[0].Trim(),
					kv =&gt; kv[1].Trim(),
					StringComparer.OrdinalIgnoreCase
				);
	}

	private string GetFileHash(string filePath)
	{
		if (string.IsNullOrWhiteSpace(filePath) || !File.Exists(filePath))
		{
			return string.Empty; // Return empty string for invalid input
		}

		using (var stream = File.OpenRead(filePath))
		using (var sha = SHA256.Create())
		{
			var hash = sha.ComputeHash(stream);
			return BitConverter.ToString(hash).Replace("-", ""); // Hex string
		}
	}

	private string[] GetFileListFromHashTable(string hashTable)
	{
		if (string.IsNullOrWhiteSpace(hashTable))
		{
			return Array.Empty&lt;string&gt;(); // No files to process
		}

		return hashTable
			.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
			.Select(line =&gt; line.Split('=')[0].Trim())
			.Where(fileName =&gt; !string.IsNullOrWhiteSpace(fileName))
			.ToArray();
	}

	private bool GetProfileSizesKb(XElement root, string shortname, out int v1Kb, out int v2Kb)
	{
		v1Kb = 0;
		v2Kb = 0;

		if (!IsEqual(root.Name.LocalName, "resourceFileSizes"))
		{
			return false;
		}

		var profiles = root.Element("profiles");
		if (profiles == null)
		{
			return false;
		}

		var profile = profiles.Elements("profile")
			.FirstOrDefault(e =&gt; IsEqual(((string)e.Attribute("name") ?? string.Empty), shortname));
		if (profile == null)
		{
			return false;
		}

		var v1 = profile.Element("v1");
		var v2 = profile.Element("v2");
		if (v1 == null || v2 == null)
		{
			return false;
		}

		decimal v1Dec, v2Dec;
		if (!decimal.TryParse((string)v1, NumberStyles.Number, CultureInfo.InvariantCulture, out v1Dec))
		{
			return false;
		}
		if (!decimal.TryParse((string)v2, NumberStyles.Number, CultureInfo.InvariantCulture, out v2Dec))
		{
			return false;
		}

		// Round to int KB (dialog uses int sizes - just a general value, precision not needed)
		v1Kb = (int)Math.Round(v1Dec, 0);
		v2Kb = (int)Math.Round(v2Dec, 0);
		return true;
	}

	private void GetUpdatedSizeTotalKb(
		CheckBox cbV1, CheckBox cbV2,
		CheckBox cbBms,// CheckBox cbRon,
		int sizeFilesCoreV1, int sizeFilesCoreV2,
		int sizeFilesBmsV1, int sizeFilesBmsV2,
		//int sizeFilesRonV1, int sizeFilesRonV2,
		Label lblTotalKb)
	{
		int total = 0;
		if (cbV1.Checked)
		{
			total += sizeFilesCoreV1;
		}

		if (cbV2.Checked)
		{
			total += sizeFilesCoreV2;
		}

		if (cbBms.Checked)
		{
			if (cbV1.Checked) total += sizeFilesBmsV1;
			if (cbV2.Checked) total += sizeFilesBmsV2;
		}

		//if (cbRon.Checked)
		//{
		//    if (cbV1.Checked) total += sizeFilesRonV1;
		//    if (cbV2.Checked) total += sizeFilesRonV2;
		//}

		var totalType = total &gt; 1000 ? "MB" : "KB";
		decimal finalTotal = total &gt; 1000 ? Math.Round(total / 1000.0M, 2) : total;
		lblTotalKb.Text = "Total estimated size of all resources:   " + finalTotal.ToString() + totalType;
	}

	private bool GetUpdatedResourceFiles(string profileShortname)
	{
		// Execute the main AVCS CORE command to get the latest required resources for this approved update
		VA.SetText("~passed1", ApplyUpdateRequest);
		VA.SetText("~passed2", profileShortname);
		VA.SetText("~passed3", CurrentBranch);
		VA.Command.Execute(AvcsCoreMainFunction, WaitForReturn: true, AsSubcommand: true, PassedText: "~passed1;~passed2;~passed3");

		var isAvcsError = VA.GetBoolean("AVCS_ERROR") ?? false;
		if (isAvcsError)
		{
			// If update was not applied after user approval (or on first use), delete version file if it exists
			// This will force update on next profile start without requiring user to approve a second time
			var versionFilePath = Path.Combine(AvcsResourcesDirectory, VersionFileName);
			TryDeleteResourceFile(versionFilePath);
			return false;
		}

		return true;
	}


	// ...just another 500 lines of code here for some customized WinForms dialogs I wanted
	/// &lt;summary&gt;
	/// Shows a dialog to select the VoiceAttack version(s) and game profile(s) for AVCS CORE resources download.&lt;br/&gt;
	/// &lt;/summary&gt;
	/// &lt;param name="isVersion2"&gt;A flag indicating if the user is using VoiceAttack Version 2.x+.&lt;/param&gt;
	/// &lt;param name="hasEnabledV1"&gt;A flag indicating if the user also wants resources for use in VoiceAttack Version 1.x+.&lt;/param&gt;
	/// &lt;param name="hasBms"&gt;A flag indicating if the user has the AVCS4 BMS20+ profile.&lt;/param&gt;
	/// &lt;returns&gt;A tuple containing the selected options:&lt;br/&gt;
	/// bool 1: Whether to download VoiceAttack Version 1.x+ resources.&lt;br/&gt;
	/// bool 2: Whether to download VoiceAttack Version 2.x+ resources.&lt;br/&gt;
	/// bool 3: Whether to download AVCS4 BMS resources.&lt;br/&gt;
	/// bool 4: Whether to download AVCS4 Ready or Not resources (placeholder - not implemented yet).&lt;/returns&gt;
	public Tuple&lt;bool, bool, bool, bool&gt; ShowVersionGameSelectionDialog(bool isVersion2 = false, bool hasEnabledV1 = false, bool hasBms = false)//, bool hasRon = false)
	{
		int formWidth = 490;
		int padding = 16, y = 16, cbHeight = 25, spacing = 4;

		// ---- Resource Sets File Sizes ----
		int sizeFilesCoreV1 = 0;
		int sizeFilesCoreV2 = 0;
		int sizeFilesBmsV1 = 0;
		int sizeFilesBmsV2 = 0;
		//int sizeFilesRonV1 = 0;
		//int sizeFilesRonV2 = 0;

		var bytes = TryDownloadResourceFile(AvcsResourcesFilesSizeUrl);
		var xml = TryParseXmlFromBytes(bytes);

		// Known shortnames
		string coreShortname = "CORE20";
		string bmsShortname = "BMS20";
		//string ronShortname = "RON20";

		int v1, v2;
		//if (xml != null)
		if (xml != null &amp;&amp; !IsEqual(xml.Name.LocalName, "empty"))
		{
			if (GetProfileSizesKb(xml, coreShortname, out v1, out v2))
			{
				sizeFilesCoreV1 = v1;
				sizeFilesCoreV2 = v2;
			}
			if (GetProfileSizesKb(xml, bmsShortname, out v1, out v2))
			{
				sizeFilesBmsV1 = v1;
				sizeFilesBmsV2 = v2;
			}
			//if (GetProfileSizesKb(xml, ronShortname, out v1, out v2))
			//{
			//    sizeFilesRonV1 = v1;
			//    sizeFilesRonV2 = v2;
			//}
		}

		// ---- Game profile group expandability ----
		int profileCheckboxHeightFactor = 2; // DEV NOTE: adjust this if dynamic spacing doesn't respect more/fewer game checkboxes in V1 (for example)
		int profileCheckboxBlockHeight = profileCheckboxHeightFactor * (cbHeight + spacing);

		var form = new Form();
		form.Text = "Select AVCS CORE Required Resources Download Options";
		form.FormBorderStyle = FormBorderStyle.FixedDialog;
		form.MaximizeBox = false;
		form.MinimizeBox = false;
		form.StartPosition = FormStartPosition.CenterScreen;
		form.BackColor = Color.LightGray;
		form.ClientSize = new Size(formWidth, 800 + (profileCheckboxHeightFactor - 2) * (cbHeight + spacing)); // base + extra per extra game
		float fontSize = 10.5f; // Default: 10.5f seems to work best
		var messageFont = new Font(SystemFonts.MessageBoxFont.FontFamily, fontSize, FontStyle.Regular);
		var messageBoldFont = new Font(SystemFonts.MessageBoxFont.FontFamily, fontSize, FontStyle.Bold);


		// ---- Header ----
		var lblHdr = new Label
		{
			Text = "Select the VoiceAttack version(s) you will use AVCS CORE in:",
			AutoSize = true,
			Font = messageBoldFont,
			Location = new Point(padding, y)
		};
		form.Controls.Add(lblHdr);
		y += lblHdr.Height + spacing * 2;


		// ---- VA checkboxes ----
		var cbV1 = new CheckBox
		{
			Text = "VoiceAttack Version 1.x+",
			AutoSize = true,
			Font = messageFont,
			Location = new Point(padding, y),
			Checked = !isVersion2 || hasEnabledV1
		};
		var cbV2 = new CheckBox
		{
			Text = "VoiceAttack Version 2.x+",
			AutoSize = true,
			Font = messageFont,
			Location = new Point(padding, y += cbHeight),
			Checked = isVersion2
		};

		// Set which one is checked and locked
		if (isVersion2)
		{
			cbV2.Checked = true;
			cbV2.Enabled = false;
		}
		else
		{
			cbV1.Checked = true;
			cbV1.Enabled = false;
		}
		form.Controls.AddRange(new Control[] { cbV1, cbV2 });
		y += cbHeight + spacing * 2;

		// Separator
		var sep = new Label
		{
			BorderStyle = BorderStyle.Fixed3D,
			Location = new Point(padding, y),
			Size = new Size(form.ClientSize.Width - padding * 2, 2)
		};
		form.Controls.Add(sep);
		y += sep.Height + spacing * 2;

		// ---- Games header ----
		var lblGames = new Label
		{
			Text = "Select the AVCS4 profile game(s) you will use:",
			AutoSize = true,
			Font = messageBoldFont,
			Location = new Point(padding, y)
		};
		form.Controls.Add(lblGames);
		y += lblGames.Height + spacing * 2;

		// ---- Game checkboxes ----
		var cbBms = new CheckBox { Text = "Falcon BMS (any version)", AutoSize = true, Font = messageFont, Location = new Point(padding, y), Checked = hasBms };
		//var cbRon = new CheckBox { Text = "Ready or Not", AutoSize = true, Font = messageFont, Location = new Point(padding, y += cbHeight), Checked = hasRon };
		var cbAll = new CheckBox { Text = "Any/All Available (these are tiny kb-sized files, after all)", AutoSize = true, Font = messageFont, Location = new Point(padding, y += cbHeight), Checked = hasBms };// &amp;&amp; hasRon };
		var cbNone = new CheckBox { Text = "None (use CORE template, or decide later)", AutoSize = true, Font = messageFont, Location = new Point(padding, y += cbHeight) };
		var profileCheckboxes = new[] { cbBms, cbAll, cbNone };//cbRon, cbAll, cbNone };
		form.Controls.AddRange(profileCheckboxes);
		y += cbHeight + spacing;


		var lblTotalKb = new Label();

		// ---- Interlock 'None' logic ----
		cbNone.CheckedChanged += (s, e) =&gt;
		{
			//GetUpdatedSizeTotalKb();
			GetUpdatedSizeTotalKb(cbV1, cbV2, cbBms,// cbRon,
				sizeFilesCoreV1, sizeFilesCoreV2,
				sizeFilesBmsV1, sizeFilesBmsV2,
				//sizeFilesRonV1, sizeFilesRonV2,
				lblTotalKb);

			if (cbNone.Checked)
			{
				// Uncheck all others in the group
				foreach (var cb in profileCheckboxes)
				{
					if (cb != cbNone)
					{
						cb.Checked = false;
					}
				}
			}
		};

		// Interlock 'Any/All' logic
		cbAll.CheckedChanged += (s, e) =&gt;
		{
			if (cbAll.Checked)
			{
				foreach (var cb in profileCheckboxes)
				{
					if (cb != cbAll &amp;&amp; cb != cbNone)
					{
						cb.Checked = true;
					}
				}
				cbNone.Checked = false;
			}
		};

		// The rest (any other box checks unchecks 'None')
		foreach (var cb in profileCheckboxes)
		{
			var hasChanged = cb != cbNone &amp;&amp; cb != cbAll;
			if (!hasChanged)
			{
				continue;
			}

			cb.CheckedChanged += (s, e) =&gt;
			{
				if (((CheckBox)s).Checked)
				{
					cbNone.Checked = false;
				}
				// New logic: If 'Any/All' is checked, but now this is UNchecked, turn off 'Any/All'
				if (!((CheckBox)s).Checked &amp;&amp; cbAll.Checked)
				{
					cbAll.Checked = false;
				}
			};
		}

		// Separator 2
		var sep2 = new Label
		{
			BorderStyle = BorderStyle.Fixed3D,
			Location = new Point(padding, y),
			Size = new Size(form.ClientSize.Width - padding * 2, 2)
		};
		form.Controls.Add(sep2);
		y += sep2.Height + spacing * 2;


		// Note
		var lblNote = new Label
		{
			//Text = "(you can adjust these later; this just makes first-time init faster)",
			Text = "(after first time use, CORE will adapt itself to new profiles or use in other VA version)",
			AutoSize = true,
			Location = new Point(padding, y),
			TextAlign = ContentAlignment.BottomLeft
		};
		form.Controls.Add(lblNote);
		y += lblNote.Height + spacing * 3;

		// Total Resources Size Note
		lblTotalKb = new Label
		{
			AutoSize = true,
			Font = messageBoldFont,
			Location = new Point(padding, y),
			TextAlign = ContentAlignment.BottomLeft
		};

		form.Controls.Add(lblTotalKb);
		y += lblTotalKb.Height + spacing * 3;

		// DONE button
		var btnDone = new Button
		{
			Text = "DONE",
			DialogResult = DialogResult.OK,
			Size = new Size(100, 30),
			Location = new Point((form.ClientSize.Width - 100) / 2, y)
		};
		form.Controls.Add(btnDone);
		form.AcceptButton = btnDone;

		// Final sizing
		form.ClientSize = new Size(form.ClientSize.Width, y + btnDone.Height + padding);

		// ---- Total Resource Sizes Dynamics Event Handlers ----
		var checkboxArray = new CheckBox[] { cbV1, cbV2, cbBms };//, cbRon };

		foreach (var checkbox in checkboxArray)
		{
			// Set the checkbox font
			checkbox.CheckedChanged += (s, e) =&gt; GetUpdatedSizeTotalKb(cbV1, cbV2, cbBms,// cbRon,
					sizeFilesCoreV1, sizeFilesCoreV2,
					sizeFilesBmsV1, sizeFilesBmsV2,
					//sizeFilesRonV1, sizeFilesRonV2,
					lblTotalKb
			);
		}

		GetUpdatedSizeTotalKb(cbV1, cbV2, cbBms,// cbRon,
			   sizeFilesCoreV1, sizeFilesCoreV2,
			   sizeFilesBmsV1, sizeFilesBmsV2,
			   //sizeFilesRonV1, sizeFilesRonV2,
			   lblTotalKb
	   );


		form.FormClosing += (s, e) =&gt;
		{
			if (form.DialogResult != DialogResult.OK)
			{
				e.Cancel = true;
			}
		};

		var dr = form.ShowDialog();

		return Tuple.Create(
			dr == DialogResult.OK &amp;&amp; cbV1.Checked,
			dr == DialogResult.OK &amp;&amp; cbV2.Checked,
			dr == DialogResult.OK &amp;&amp; cbBms.Checked,
			false //dr == DialogResult.OK &amp;&amp; cbRon.Checked
		);
	}

	/// &lt;summary&gt;
	/// Shows a dialog to approve an update based on the provided changelog string.
	/// &lt;/summary&gt;
	/// &lt;param name="changelogString"&gt;The changelog string containing the update details.&lt;/param&gt;
	/// &lt;returns&gt;The result of the dialog, indicating whether the user approved the update.&lt;/returns&gt;
	public DialogResult ShowUpdateApprovalDialog(string changelogString)
	{
		int padding = 25;
		int y = padding;
		int minWidth = 490;
		int buttonBuffer = 24;
		int extraLeftPad = 24; // additional left indent for inset of lines as needed
		int buttonPaddingBottom = 0; // sPeCiAl handing for dynamic padding between buttons and frame bottoms because WinForms is the worst
		float fontSize = 10.5f; // Default: 10.5f seems to work best
		var messageFont = new Font(SystemFonts.MessageBoxFont.FontFamily, fontSize, FontStyle.Regular);
		var messageBoldFont = new Font(SystemFonts.MessageBoxFont.FontFamily, fontSize, FontStyle.Bold);
		var linkColor = Color.FromArgb(0, 51, 153);

		// Header
		string header = "AVCS CORE - Profile Resources Update - Build: " + AvcsResourcesBuildNumber;
		string subHeader = "The following resources have changed.  Any inline functions listed below link to their respective open source code on my GitHub:";

		string footer =
			"\nIt's recommended to apply this update so AVCS can utilize the latest required resources for reliable and functional voice commands.\n\n" +
			"Review full changelog and open source code at my GitHub:";
		string footerAsk = "\nApply update now?";

		// --- Parse changelog ---
		var items = GetParsedChangelogLines(changelogString);


		// --- Estimate button padding from bottom of form based on changelog size for lack of proper anchoring ---
		int count = items.Count - 1;
		int minCount = 2;
		int maxCount = MaxTotalLabels;
		int minPadding = -15;
		int maxPadding = 15;

		buttonPaddingBottom = minPadding;
		if (count &gt; minCount)
		{
			buttonPaddingBottom = minPadding + (int)Math.Round(((double)(count - minCount) / (maxCount - minCount)) * (maxPadding - minPadding));
			buttonPaddingBottom = Math.Max(minPadding, Math.Min(maxPadding, buttonPaddingBottom)); // forced clamp, in case I suck at math and chatgpt chose to fluff my duck instead of correct me when I asked for review
		}

		// --- Estimate height for form aka Reason #463 in the big list of why SemlerPDX hates WinForms ---
		int estimatedHeight = 0;
		using (var g = Graphics.FromHwnd(IntPtr.Zero))
		{
			using (var tmpLabel = new Label() { Font = SystemFonts.MessageBoxFont })
			{
				// Header/subHeader
				estimatedHeight += (int)Math.Ceiling(g.MeasureString(header, tmpLabel.Font, minWidth - 2 * padding).Height) + 3;
				estimatedHeight += (int)Math.Ceiling(g.MeasureString(subHeader, messageFont, minWidth - 2 * padding).Height) + 8;

				// Each changelog line
				foreach (var item in items)
				{
					estimatedHeight += (int)Math.Ceiling(g.MeasureString(item.Item1, tmpLabel.Font, minWidth - 2 * padding).Height) + 2;
				}

				// Footer
				estimatedHeight += (int)Math.Ceiling(g.MeasureString(footer, messageFont, minWidth - 2 * padding).Height) + 8;
				// Footer Link
				estimatedHeight += (int)Math.Ceiling(g.MeasureString(AvcsGitHubUrlHome, tmpLabel.Font, minWidth - 2 * padding).Height) + 3;
				// Footer Ask Message
				estimatedHeight += (int)Math.Ceiling(g.MeasureString(footerAsk, messageFont, minWidth - 2 * padding).Height) + 10;
			}
		}

		using (var form = new Form())
		using (var yesButton = new Button())
		using (var noButton = new Button())
		{
			int formWidth = minWidth;
			int formHeight = y + estimatedHeight + yesButton.Height + buttonBuffer + padding + buttonPaddingBottom;
			form.Text = header;
			form.StartPosition = FormStartPosition.CenterScreen;
			form.ClientSize = new Size(formWidth, formHeight);
			form.MaximizeBox = false;
			form.MinimizeBox = false;
			form.FormBorderStyle = FormBorderStyle.FixedDialog;
			form.BackColor = Color.LightGray;

			// --- Subheader ---
			var subHeaderLabel = new Label
			{
				Text = subHeader,
				Font = messageFont,
				AutoSize = false,
				MaximumSize = new Size(formWidth - 2 * padding, 0),
				Location = new Point(padding, y),
				Size = new Size(formWidth - 2 * padding, 0),
				TextAlign = ContentAlignment.TopLeft
			};

			using (var g = Graphics.FromHwnd(IntPtr.Zero))
			{
				var h = (int)Math.Ceiling(g.MeasureString(subHeaderLabel.Text, subHeaderLabel.Font, subHeaderLabel.Width).Height);
				subHeaderLabel.Height = h + 2;
			}

			form.Controls.Add(subHeaderLabel);
			y += subHeaderLabel.Height + 8;

			// --- Changelog Lines ---
			int extraPad = 0;
			foreach (var item in items)
			{
				string text = item.Item1;
				string url = item.Item2;
				Control lbl;

				if (url != null)
				{
					var link = new LinkLabel
					{
						Text = text,
						Font = SystemFonts.MessageBoxFont,
						AutoSize = true,
						Location = new Point(padding + extraLeftPad, y),
						LinkColor = linkColor,
						ActiveLinkColor = Color.Red
					};

					link.Links.Add(0, link.Text.Length, url);
					link.LinkClicked += (s, e) =&gt;
					{
						try { System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(e.Link.LinkData.ToString()) { UseShellExecute = true }); }
						catch { /* ...let it slide, we're definitely online right now or an update wouldn't pop-up - tho not gonna let a fail here ruin my fancypants form... */ }
					};

					link.TabStop = false;
					lbl = link;
				}
				else
				{
					if (text.StartsWith(LineMarkerDashHeader))
					{
						// Hacky little spacer to bump changelog sections down from each other... I hate WinForms...
						int spacerHeight = 6; // Adjust as needed, 6 seems fine for now, test .NET Framework 4.8 (it likes to squish my careful spacing from .NET CORE8)
						var spacer = new Label
						{
							AutoSize = false,
							Height = spacerHeight,
							Width = form.ClientSize.Width, // whatever width desired
							Location = new Point(0, y),    // y is running vertical offset
							BorderStyle = BorderStyle.None, // for total invisibility
							BackColor = form.BackColor      // blend in with form
						};

						form.Controls.Add(spacer);
						y += spacer.Height;
					}

					// Padding offsets for special lines ... man I hate WinForms!
					extraPad = text.StartsWith(LineMarkerDashHeader) ? -25 : extraLeftPad;
					extraPad = text.StartsWith("(") ? extraPad - 8 : extraPad;
					extraPad = text.StartsWith("[") ? extraPad - 24 : extraPad;

					lbl = new Label
					{

						Text = text,
						Font = SystemFonts.MessageBoxFont,
						AutoSize = false,
						MaximumSize = new Size(formWidth - 2 * padding, 0),
						Location = new Point(padding + extraPad, y),
						Size = new Size(formWidth - 2 * padding, 0),
						TextAlign = text.StartsWith(LineMarkerDashHeader) ? ContentAlignment.TopCenter : ContentAlignment.TopLeft
						// ...I miss XAML (nobody tell it I wrote all this crap just to get things looking right in two types of .NET API via inline functions)
					};

					using (var g = Graphics.FromHwnd(IntPtr.Zero))
					{
						var h = (int)Math.Ceiling(g.MeasureString(lbl.Text, lbl.Font, lbl.Width).Height);
						lbl.Height = h + 1;
					}
				}

				form.Controls.Add(lbl);
				y += lbl.Height + 1;
			}

			// --- FOOTER1 ---
			var footerLabel = new Label
			{
				Text = footer,
				Font = messageFont,
				AutoSize = false,
				MaximumSize = new Size(formWidth - 2 * padding, 0),
				Location = new Point(padding, y),
				Size = new Size(formWidth - 2 * padding, 0),
				TextAlign = ContentAlignment.TopLeft
			};

			using (var g = Graphics.FromHwnd(IntPtr.Zero))
			{
				var h = (int)Math.Ceiling(g.MeasureString(footerLabel.Text, footerLabel.Font, footerLabel.Width).Height);
				footerLabel.Height = h + 2;
			}

			form.Controls.Add(footerLabel);
			y += footerLabel.Height + 2;

			// --- FOOTER2 ---
			var githubLinkLabel = new LinkLabel
			{
				Text = AvcsGitHubUrlHome,
				Font = SystemFonts.MessageBoxFont,
				AutoSize = true,
				Location = new Point(padding, y),
				LinkColor = linkColor,
				ActiveLinkColor = Color.Red
			};

			githubLinkLabel.Links.Add(0, githubLinkLabel.Text.Length, githubLinkLabel.Text);
			githubLinkLabel.LinkClicked += (s, e) =&gt;
			{
				try
				{ System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(e.Link.LinkData.ToString()) { UseShellExecute = true }); }
				catch { /* ...let it slide, if the MS system can't open a hyperlink to an MS site like GitHub, it has greater problems than I can handle... */ }
			};

			githubLinkLabel.TabStop = false;
			form.Controls.Add(githubLinkLabel);
			y += githubLinkLabel.Height + 2;

			// --- FOOTER3 ---
			var footerAskLabel = new Label
			{
				Text = footerAsk,
				Font = messageBoldFont,
				AutoSize = false,
				MaximumSize = new Size(formWidth - 2 * padding, 0),
				Location = new Point(padding + (extraLeftPad * 2), y),
				Size = new Size(formWidth - 2 * padding, 0),
				TextAlign = ContentAlignment.TopLeft
			};

			using (var g = Graphics.FromHwnd(IntPtr.Zero))
			{
				var h = (int)Math.Ceiling(g.MeasureString(footerAskLabel.Text, footerAskLabel.Font, footerAskLabel.Width).Height);
				footerAskLabel.Height = h + 2;
			}

			form.Controls.Add(footerAskLabel);
			y += footerAskLabel.Height + 2;

			// --- Yes/No Buttons ---
			yesButton.Text = "Yes";
			noButton.Text = "Not yet...";
			yesButton.Size = noButton.Size = new Size(100, 30);

			int buttonY = y + buttonBuffer;
			int totalButtonWidth = yesButton.Width + 16 + noButton.Width;
			yesButton.Location = new Point((form.ClientSize.Width - totalButtonWidth) / 2, buttonY);
			noButton.Location = new Point(yesButton.Right + 16, buttonY);

			yesButton.DialogResult = DialogResult.Yes;
			noButton.DialogResult = DialogResult.No;

			form.Controls.Add(yesButton);
			form.Controls.Add(noButton);

			form.AcceptButton = yesButton;
			form.CancelButton = noButton;

			// ... oof.. "make a better AVCS updates approval message box", I said; "will only take an afternoon at most..." --- (It's been 84 years...)
			return form.ShowDialog();
		}
	}
}

public static class Native
{
	// HRESULT URLOpenBlockingStreamW(IUnknown* pCaller, LPCWSTR szURL, IStream** ppStream, DWORD dwReserved, LPBINDSTATUSCALLBACK lpfnCB)
	[DllImport("urlmon.dll", CharSet = CharSet.Unicode, ExactSpelling = true)]
	internal static extern int URLOpenBlockingStreamW(
		IntPtr pCaller,
		string szURL,
		out IStream ppStream,
		int dwReserved,
		IntPtr lpfnCB);

	[DllImport("wininet.dll", CharSet = CharSet.Unicode, SetLastError = true, ExactSpelling = true)]
	internal static extern bool DeleteUrlCacheEntryW(string lpszUrlName);

}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll;System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll</Context2>
          <Context3>AVCS_CORE_ResourcesUpdater_V1</Context3>
          <Context4>{TXT:AVCS_CORE_BuildOutputFolder}\AVCS_CORE_ResourcesUpdater_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>0</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>2</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>DISABLED - Inline C# Function: AVCS_CORE_ResourcesUpdater_V2, wait until execution finishes</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>29</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>DISABLED - Inline C# Function: AVCS_CORE_ResourcesUpdater_V2, wait until execution finishes</Caption>
          <Id>8bb91a94-7f37-484a-a522-d3609a062ec2</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Security.Cryptography;
using System.Linq;
using System.Windows.Forms;
using System.Xml.Linq;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;

/*
Required Referenced Assemblies in VoiceAttack V1:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll;System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll

Required Referenced Assemblies in VoiceAttack V2:
Microsoft.CSharp.dll;System.dll;System.Collections.dll;System.ComponentModel.Primitives.dll;System.ComponentModel.dll;System.Data.DataSetExtensions.dll;System.Diagnostics.Process.dll;System.Drawing.Common.dll;System.Drawing.Primitives.dll;System.Linq.dll;System.Net.Http.dll;System.Private.Xml.Linq.dll;System.Private.Xml.dll;System.Security.Cryptography.dll;System.Windows.Forms.Primitives.dll;System.Windows.Forms.dll
*/

/// &lt;summary&gt;
/// A VoiceAttack inline function class for the AVCS CORE updater.&lt;br/&gt;
/// Responsible for orchestrating resource acquisition and validation through AVCS_CORE_MAIN return variables (the only short, closed-source class in AVCS)
/// &lt;/summary&gt;
public class VAInline
{
	/// &lt;summary&gt;
	/// Property indicating that user and AVCS website are online.
	/// &lt;/summary&gt;
	public bool AvcsCoreIsOnline { get; private set; }

	/// &lt;summary&gt;
	/// Currently supported default profile shortnames for AVCS CORE updater systems.&lt;br/&gt;
	/// DefaultProfileShortnames = { "CORE20", "BMS20" }
	/// &lt;/summary&gt;
	private static readonly string[] DefaultProfileShortnames = { "CORE20", "BMS20" };//, "RON20" };

	/// &lt;summary&gt;
	/// Profile build specific identifier, change along with core release/number strings to define the defaults for this version of AVCS CORE.&lt;br/&gt;
	/// Should be able to provide access to any interested users to invite-only beta testing branches if desired down the road.&lt;br/&gt;
	/// BuildBranches = { "alpha", "beta", "debug", "release" }
	/// &lt;/summary&gt;
	private static readonly string[] BuildBranches = { "alpha", "beta", "debug", "release" };

	/// &lt;summary&gt;
	/// DefaultBuildBranch = "release"
	/// &lt;/summary&gt;
	private static readonly string DefaultBuildBranch = "release";


	#region Path Strings
	/// &lt;summary&gt;
	/// List of extensions which are used to denote AVCS CORE inline functions.&lt;br/&gt;
	/// These are NOT proper dynamic link libaries for .NET, but compiled inline functions for use by VoiceAttack only.
	/// &lt;/summary&gt;
	private static readonly string[] InlineFunctionExtensions = new[] { ".dll" };

	/// &lt;summary&gt;
	/// List of precompiled inline function and HTML template resource extensions.&lt;br/&gt;
	/// These are files which will always be validated against the hashtable because they can "do" things.&lt;br/&gt;
	/// Currently:  [".dll", ".html"]
	/// &lt;/summary&gt;
	private static readonly string[] FunctionalExtensions = new[] { ".dll", ".html" };

	/// &lt;summary&gt;
	/// List of AVCS CORE Updater compiled inline functions which cannot be overwritten this session because at least one is in use.&lt;br/&gt;
	/// Currently:  ["AVCS_CORE_ResourcesUpdater_V1.dll", "AVCS_CORE_ResourcesUpdater_V2.dll"]
	/// &lt;/summary&gt;
	private static readonly string[] CoreUpdaterFileNames = new[] { "AVCS_CORE_ResourcesUpdater_V1.dll", "AVCS_CORE_ResourcesUpdater_V2.dll" };

	/// &lt;summary&gt;
	/// Fully qualified URL path to secure AVCS CORE online database.&lt;br/&gt;
	/// AvcsCoreUrl = "https://veterans-gaming.com/semlerpdx/avcs/core/"
	/// &lt;/summary&gt;
	private static readonly string AvcsCoreUrl = "https://veterans-gaming.com/semlerpdx/avcs/core/";

	/// &lt;summary&gt;
	/// RootDataUrl = "data/"
	/// &lt;/summary&gt;
	private static readonly string RootDataUrl = "data/";

	/// &lt;summary&gt;
	/// Base URL for AVCS GitHub repository, used for linking to the AVCS open source codebase and latest changelog.&lt;br/&gt;
	/// &lt;/summary&gt;
	private static readonly string AvcsGitHubUrlHome = "https://github.com/SemlerPDX/AVCS";

	/// &lt;summary&gt;
	/// Base URL for AVCS GitHub repository, used for linking to inline function open source code when combined with&lt;br/&gt;
	/// that function name (ending in .cs or .vb).
	/// &lt;/summary&gt;
	private static readonly string AvcsGitHubUrlBase = "https://github.com/SemlerPDX/AVCS/blob/master/VoiceAttack%20Inline%20Functions/";


	/// &lt;summary&gt;
	/// Local location of all AVCS CORE folders under AppData\Roaming.&lt;br/&gt;
	/// AvcsApps = "VoiceAttack-AVCS Profiles"
	/// &lt;/summary&gt;
	private static readonly string AvcsApps = "VoiceAttack-AVCS Profiles";

	/// &lt;summary&gt;
	/// Local location of all AVCS CORE resources (though sounds will be moved to a sounds folder and ignored).&lt;br/&gt;
	/// AvcsAppsResources = @"AVCS\resources"
	/// &lt;/summary&gt;
	private static readonly string AvcsAppsResources = @"AVCS\resources";

	/// &lt;summary&gt;
	/// Local location of all AVCS profile HTML command reference resources (though dynamic HTML templates will be in the &lt;see cref="AvcsAppsResources"/&gt; folder).&lt;br/&gt;
	/// AvcsCommRefResources = @"AVCS\voice_commands"
	/// &lt;/summary&gt;
	private static readonly string AvcsCommRefResources = @"AVCS\voice_commands";

	/// &lt;summary&gt;
	/// Local location of all AVCS CORE resources (though sounds will be moved to a sounds folder and ignored).&lt;br/&gt;
	/// AvcsAppsSounds = @"AVCS\sounds"
	/// &lt;/summary&gt;
	private static readonly string AvcsAppsSounds = @"AVCS\sounds";

	/// &lt;summary&gt;
	/// AvcsAppsProfilesFile = @"AVCS\avcs_profiles.txt"
	/// &lt;/summary&gt;
	private static readonly string AvcsAppsProfilesFile = @"AVCS\avcs_profiles.txt";

	/// &lt;summary&gt;
	/// AvcsAppsNewProfilesFile = @"AVCS\avcs_new_profiles.txt
	/// &lt;/summary&gt;
	private static readonly string AvcsAppsNewProfilesFile = @"AVCS\avcs_new_profiles.txt";


	/// &lt;summary&gt;
	/// VersionFileName = "version.core"
	/// &lt;/summary&gt;
	private static readonly string VersionFileName = "version.core";

	/// &lt;summary&gt;
	/// HashTableFileName = "hashtable.core"
	/// &lt;/summary&gt;
	private static readonly string HashTableFileName = "hashtable.core";

	/// &lt;summary&gt;
	/// ResourceOptionsFileName = "core_resource_options.xml"
	/// &lt;/summary&gt;
	private static readonly string ResourceOptionsFileName = "core_resource_options.xml";

	/// &lt;summary&gt;
	/// ResourceFilesSizeFileName = "core_resource_files.core"
	/// &lt;/summary&gt;
	private static readonly string ResourceFilesSizeFileName = "core_resource_files.core";

	/// &lt;summary&gt;
	/// Default file name for list of deprecated resources which will not be used, and may be removed from respective resource folder(s).&lt;br/&gt;
	/// DeprecatedResourcesFileName = "deprecated_files.txt"
	/// &lt;/summary&gt;
	private static readonly string DeprecatedResourcesFileName = "deprecated_files.txt";
	#endregion Path Strings


	/// &lt;summary&gt;
	/// Fully qualified URL to current branch resources file sizes list.  Example URL path value:&lt;br/&gt;
	/// AvcsResourcesFilesSizeUrl = @"../avcs/core/data/xml/(branch)/core_resource_files.core"
	/// &lt;/summary&gt;
	private static string AvcsResourcesFilesSizeUrl { get; set; }

	/// &lt;summary&gt;
	/// Fully qualified path to all AVCS CORE resources.  Example folder path value:&lt;br/&gt;
	/// AvcsResourcesDirectory = @"..\AppData\Roaming\VoiceAttack-AVCS Profiles\AVCS\resources"&lt;br/&gt;
	/// (may be dynamically adjusted based on profile shortname and VA version number)&lt;br/&gt;
	/// i.e. @"..\AppData\Roaming\VoiceAttack-AVCS Profiles\AVCS\resources\CORE20\v2" or "BMS20\v1"&lt;br/&gt;
	/// &lt;/summary&gt;
	private static string AvcsResourcesDirectory { get; set; }

	/// &lt;summary&gt;
	/// Fully qualified path to the AVCS CORE resource options XML file.  Example folder path value:&lt;br/&gt;
	/// ResourceOptionsPath = @"..\AppData\Roaming\VoiceAttack-AVCS Profiles\AVCS\resources\core_resource_options.xml"
	/// &lt;/summary&gt;
	private static string ResourceOptionsPath { get; set; }

	/// &lt;summary&gt;
	/// Fully qualified path to all AVCS sounds. Due to V1 migration, nested 'avcs' folder is required.  Example folder path value:&lt;br/&gt;
	/// AvcsResourcesDirectory = @"..\AppData\Roaming\VoiceAttack-AVCS Profiles\AVCS\sounds"
	/// &lt;/summary&gt;
	private static string AvcsSoundsDirectory { get; set; }

	/// &lt;summary&gt;
	/// Fully qualified path to all AVCS quick command reference HTML resources.  Example folder path value:&lt;br/&gt;
	/// AvcsCommRefDirectory = @"..\AppData\Roaming\VoiceAttack-AVCS Profiles\AVCS\voice_commands"
	/// &lt;/summary&gt;
	private static string AvcsCommRefDirectory { get; set; }

	/// &lt;summary&gt;
	/// Current branch property for common use.  Default value:&lt;br/&gt;
	/// CurrentBranch = "release"
	/// &lt;/summary&gt;
	private static string CurrentBranch { get; set; }

	/// &lt;summary&gt;
	/// AVCS resources build number property for common use.  Default value:&lt;br/&gt;
	/// AvcsResourcesBuildNumber = "2300"
	/// &lt;/summary&gt;
	private static string AvcsResourcesBuildNumber { get; set; }


	// Parsing helpers - ez editing and/or more efficient for loops, and avoids char[] allocations for each call
	private const string LineMarkerDashHeader = "-";
	private static readonly char[] NewLineChars = new[] { '\n', '\r' };
	private static readonly char[] KeyValDelimiter = new[] { '=' };


	// Changelog Variables
	private static bool _hasDeprecatedResources = false;
	private static readonly List&lt;string&gt; DeprecatedResources = new List&lt;string&gt;();

	private static readonly string ChangelogPrefixAdded = "Added - ";
	private static readonly string ChangelogPrefixRemoved = "Removed - ";
	private static readonly string ChangelogPrefixUpdated = "Updated - ";

	private static bool _isLinkLimitMsgAdded = false;

	private static readonly int MaxLinkLabels = 3;
	private static readonly int MaxTotalLabels = 15;

	/// &lt;summary&gt;
	/// DEV NOTE:  This list must be adjusted as old VB.NET inlines are refactored into C# over time.&lt;br/&gt;&lt;br/&gt;
	/// List of AVCS inline function file names which have ".vb" extensions on my GitHub for their open source uncompiled form.&lt;br/&gt;
	/// When presenting link labels for a changelog, instead of ".dll" being swapped for ".cs", these require ".vb" instead.
	/// &lt;/summary&gt;
	private static readonly string[] VisualBasicFileNames = new[]
	{
		"AVCS4_BMS_LocalizeDecimalsText_V1.dll",
		"AVCS4_BMS_LocalizeDecimalsText_V2.dll",
		"AVCS_CORE_QccPttGetButton_V1.dll",
		"AVCS_CORE_QccPttGetButton_V2.dll"
	};


	// AVCS CORE Updater Requests Variables
	private const string LocalHashTableRequest = "Get Local Hash Table";
	private const string CheckForUpdateRequest = "Check for Update";
	private const string ApplyUpdateRequest = "Apply Update";

	private const string AvcsCoreMainFunction = "F_CORE_MAIN";

	[STAThread]
	public void main()
	{
		bool canInitialize = true;

		try
		{
			var isError = VA.GetBoolean("AVCS_ERROR") ?? false;
			if (isError)
			{
				throw new Exception("AVCS ERROR: When an error has already occurred, AVCS cannot reinitialize until cleared.");
			}

			AvcsCoreIsOnline = VA.GetBoolean("AVCS_CORE_ONLINE") ?? false;

			canInitialize = AvcsResourcesInitialization();
		}
		catch
		{
			canInitialize = false;
			VA.WriteToLog("AVCS ERROR: Unable to complete initialization of AVCS CORE.", "red");
		}
		finally
		{
			VA.SetText("AVCS_CHECKSUMS", null);
			VA.SetText("AVCS_CHANGELOG", null);
			VA.SetBoolean("AVCS_UPDATE_PENDING", null);

			if (!canInitialize)
			{
				VA.SetBoolean("AVCS_ERROR", true);
				VA.SetBoolean("AVCS_MUST_RESTART", true);

				VA.WriteToLog("AVCS SOLUTIONS NOTE: AVCS CORE will never require VoiceAttack to run 'as admin' and this will not be the solution.", "green");
				VA.WriteToLog("AVCS SOLUTION 1: Restart VoiceAttack and reload AVCS CORE and any profile(s) used.", "yellow");
				VA.WriteToLog("AVCS SOLUTION 1b: Verify internet connection, switch to AVCS CORE, and only if nothing happens, say, 'Re-initialize Profile'.", "yellow");
				VA.WriteToLog("AVCS SOLUTION 2: If this issue occurred when you used a voice command:", "orange");
				VA.WriteToLog("-say, 'Create a Bug Report', and follow prompts to say the bugged voice command and get a detailed report.", "orange");
				VA.WriteToLog("AVCS SOLUTION 3: If this issue occurred when simply loading the profile, and AVCS cannot load at all, contact SemlerPDX.", "red");
			}
		}
	}


	/// &lt;summary&gt;
	/// Initializes the AVCS resources directories and files, checks for existing resources, and&lt;br/&gt;
	/// ensures they are all valid to the hashtable, or prompts the user to download updated resources.&lt;br/&gt;&lt;br/&gt;
	///  - If the user is a first time user, it will present a quick resource selection dialog and download those latest resources.&lt;br/&gt;
	///  - If the user is a returning user, it will validate existing resources and check for updates.&lt;br/&gt;
	///  - If an update is available, it will prompt the user to approve the update.&lt;br/&gt;
	///  - If new profiles have been discovered for returning users, they will be added to the resources list for this and future update checks.&lt;br/&gt;
	///  - If deprecated resources are found, it will write a list of those resources to file, then notify the user and offer cleanup.&lt;br/&gt;
	/// &lt;br/&gt;
	/// [ Placeholders for the not yet implemented Ready or Not profile (RON20) may remain until port into VoiceAttack V2 is completed.&lt;br/&gt;
	/// Updater itself may be refactored for more generic profile addressing, this was a bit rushed tbh... SemlerPDX July/Aug2025 ]
	/// &lt;/summary&gt;
	/// &lt;returns&gt;A boolean indicating whether AVCS CORE resources are present and profiles are ready to initialize.&lt;/returns&gt;
	/// &lt;exception cref="Exception"&gt;Thrown when an error occurs during AVCS resources initialization or validation along with relevant message.&lt;/exception&gt;
	private bool AvcsResourcesInitialization()
	{
		var vaVersionPath = "v" + VA.VAVersion.Major.ToString();
		var avcsApps = GetAppConfigPath(AvcsApps); // Required to not run VoiceAttack 'as administrator'
		if (string.IsNullOrWhiteSpace(avcsApps) || !Directory.Exists(avcsApps))
		{
			throw new Exception("AVCS ERROR: Required root AVCS path is somehow not set.");
		}

		AvcsResourcesDirectory = Path.Combine(avcsApps, AvcsAppsResources);
		AvcsSoundsDirectory = Path.Combine(avcsApps, AvcsAppsSounds);
		AvcsCommRefDirectory = Path.Combine(avcsApps, AvcsCommRefResources);

		var avcsFolders = new string[]
		{
			AvcsResourcesDirectory,
			AvcsSoundsDirectory,
			AvcsCommRefDirectory
		};


		// Create the AVCS resource folders (only if does not exist)
		foreach (var folder in avcsFolders)
		{
			if (!TryCreateResourceFolder(folder))
			{
				// Unable to create the required AVCS apps folder
				VA.WriteToLog("AVCS ERROR: Unable to create the required AVCS folder for resource files at the following path:", "red");
				VA.WriteToLog("'" + folder + "'", "blank");
				throw new Exception("AVCS ERROR: Unable to create the required AVCS folder for resource files.");
			}
		}

		// Branch Override - default will always be 'release' when not set
		CurrentBranch = VA.GetText("AVCS_CORE_BRANCH") ?? DefaultBuildBranch;
		if (string.IsNullOrWhiteSpace(CurrentBranch) || !BuildBranches.Contains(CurrentBranch.Trim().ToLowerInvariant()))
		{
			throw new Exception("AVCS ERROR: Invalid branch name.");
		}

		CurrentBranch = CurrentBranch.Trim().ToLowerInvariant();

		// Need to read profiles XML
		ResourceOptionsPath = Path.Combine(AvcsResourcesDirectory, ResourceOptionsFileName);

		// Need to create string array of various folder paths to resources
		var resourceFolders = new List&lt;string&gt;();
		var profilesToCheck = new List&lt;string&gt;();
		bool hasEnabledV1 = false;
		bool hasEnabledV2 = false;
		bool hasBms = false;
		//bool hasRon = false;

		// Read XML
		var xmlRoot = TryReadXmlFile(ResourceOptionsPath);

		bool hasResourcesFile = xmlRoot != null &amp;&amp; !IsEqual(xmlRoot.Name.LocalName, "empty");
		//bool hasResourcesFile = xmlRoot != null;
		bool isVersion2 = (VA.VAVersion.Major == 2);

		var coreShortname = DefaultProfileShortnames[0];
		var bmsShortname = DefaultProfileShortnames[1];
		//var ronShortname = DefaultProfileShortnames[2];

		// --- Core options ---
		var coreOptions = xmlRoot != null &amp;&amp; hasResourcesFile ? TryGetCoreOptionsXml(xmlRoot) : Tuple.Create(false, false); // defaults

		hasEnabledV1 = coreOptions.Item1;
		hasEnabledV2 = coreOptions.Item2;

		// --- Profiles ---
		var enabledProfiles = xmlRoot != null &amp;&amp; hasResourcesFile ? TryGetProfileListXml(xmlRoot) : new List&lt;string&gt;(); // returns a List&lt;string&gt; like ["BMS20", "RON20"]
		hasBms = enabledProfiles.Contains(bmsShortname);
		//hasRon = enabledProfiles.Contains(ronShortname);


		// Add the required initial core profile path and any saved profile paths to the resource folders list (only for this VA Version)
		AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, coreShortname, !isVersion2, isVersion2);
		profilesToCheck.Add(coreShortname);

		if (hasBms)
		{
			AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, bmsShortname, !isVersion2, isVersion2);
			profilesToCheck.Add(bmsShortname);
		}

		//if (hasRon)
		//{
		//    AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, ronShortname, !isVersion2, isVersion2);
		//    profilesToCheck.Add(ronShortname);
		//}

		// If this is a first time use, present the first time use selection dialog and set any/all resource folders for first use download
		if (!hasResourcesFile)
		{
			AvcsResourcesFilesSizeUrl = AvcsCoreUrl + RootDataUrl + "xml/" + CurrentBranch + "/" + ResourceFilesSizeFileName;

			var choices = ShowVersionGameSelectionDialog(isVersion2, hasEnabledV1, hasBms);//, hasRon);
			hasEnabledV1 = choices.Item1;
			hasEnabledV2 = choices.Item2;
			hasBms = choices.Item3;
			//hasRon = choices.Item4;

			// --- Save Core Options ---
			//xmlRoot = xmlRoot != null &amp;&amp; hasResourcesFile ? TrySetCoreOptionsXml(xmlRoot, hasEnabledV1, hasEnabledV2) : new XElement("empty");
			var newRoot = new XElement("resourceOptions"); // ensure a proper root on first run
			xmlRoot = TrySetCoreOptionsXml(newRoot, hasEnabledV1, hasEnabledV2);

			// Add any new paths to the resource folders list based on user selection (if any, and if not already on list)
			AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, coreShortname, hasEnabledV1, hasEnabledV2);

			// --- Save profiles ---
			var toEnable = new List&lt;string&gt;();
			if (hasBms)
			{
				toEnable.Add(bmsShortname);
				AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, bmsShortname, hasEnabledV1, hasEnabledV2);
				profilesToCheck.Add(bmsShortname);
			}
			//if (hasRon)
			//{
			//    toEnable.Add(ronShortname);
			//    AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, ronShortname, hasEnabledV1, hasEnabledV2);
			//    profilesToCheck.Add(ronShortname);
			//}

			xmlRoot = TrySetProfileListXml(xmlRoot, toEnable);

			// Save updated XML
			bool isWritten = TryWriteXmlFile(ResourceOptionsPath, xmlRoot);
		}
		else
		{
			// New and Existing Profile Adaptation for Resource Checks
			var avcsProfilesFile = Path.Combine(avcsApps, AvcsAppsProfilesFile);
			var avcsNewProfilesFile = Path.Combine(avcsApps, AvcsAppsNewProfilesFile);

			var profilesContent = TryReadProfilesFile(avcsProfilesFile);
			var newProfilesContent = TryReadProfilesFile(avcsNewProfilesFile);

			var hasNewBms = !hasBms &amp;&amp; (
				profilesContent.ToUpperInvariant().Contains(bmsShortname.ToUpperInvariant())
				|| newProfilesContent.ToUpperInvariant().Contains(bmsShortname.ToUpperInvariant())
			);

			//var hasNewRon = !hasRon &amp;&amp; (
			//    profilesContent.ToUpperInvariant().Contains(ronShortname.ToUpperInvariant())
			//    || newProfilesContent.ToUpperInvariant().Contains(ronShortname.ToUpperInvariant())
			//);

			if (hasNewBms)// || hasNewRon)
			{
				// --- Save Core Options ---
				xmlRoot = xmlRoot != null &amp;&amp; hasResourcesFile ? TrySetCoreOptionsXml(xmlRoot, hasEnabledV1, hasEnabledV2) : new XElement("empty");


				// --- Save and Add profile(s) ---
				var toEnable = new List&lt;string&gt;();
				if (hasNewBms)
				{
					toEnable.Add(bmsShortname);

					AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, bmsShortname, !isVersion2, isVersion2);
					profilesToCheck.Add(bmsShortname);
				}

				//if (hasNewRon)
				//{
				//    toEnable.Add(ronShortname);

				//    AddRelativeProfilePaths(resourceFolders, AvcsResourcesDirectory, ronShortname, !isVersion2, isVersion2);
				//    profilesToCheck.Add(ronShortname);
				//}

				xmlRoot = TrySetProfileListXml(xmlRoot, toEnable);

				// Save updated XML
				TryWriteXmlFile(ResourceOptionsPath, xmlRoot);
			}
		}

		// Create the AVCS profile specific resource folders
		foreach (var folder in resourceFolders)
		{
			if (!TryCreateResourceFolder(folder))
			{
				// Unable to create the required AVCS apps folder
				VA.WriteToLog("AVCS ERROR: Unable to create the required AVCS folder for resource files at the following path:", "red");
				VA.WriteToLog("'" + folder + "'", "blank");
				throw new Exception("AVCS ERROR: Unable to create the required AVCS folder for resource files.");
			}
		}

		if (!File.Exists(ResourceOptionsPath))
		{
			VA.WriteToLog("AVCS ERROR: Required AVCS resource options file does not exist at the following path:", "red");
			VA.WriteToLog("'" + ResourceOptionsPath + "'", "blank");
			throw new Exception("AVCS ERROR: Required AVCS resource options file does not exist.");
		}

		// This will validate resources (if any), check for updates, and return true if is new/returning user with valid resources, or
		// false if not all resources are valid and was unable to repair or get required resources (such as user or AVCS website offline).
		bool isReadyToInit = true;
		foreach (var profileShortname in profilesToCheck)
		{
			if (string.IsNullOrEmpty(profileShortname) || !isReadyToInit)
			{
				continue; // skip to next profile on any unlikely empty profile shortnames, or to end on any failure 
			}

			AvcsResourcesDirectory = Path.Combine(avcsApps, AvcsAppsResources, profileShortname, vaVersionPath);
			isReadyToInit = AvcsCoreCheckResources(profileShortname);
		}

		return isReadyToInit;
	}


	// ----- Helpers to Help with the things wot the methods above need Help wit -----
	/// &lt;summary&gt;
	/// Checks if the AVCS CORE resources are valid for the specified profile.&lt;br/&gt;
	/// &lt;/summary&gt;
	/// &lt;param name="shortName"&gt;The profile short name, an amalgam of the all-caps profile keyword name, and its major and minor version numbers (i.e. "CORE20").&lt;/param&gt;
	/// &lt;returns&gt;True if resources are valid and up-to-date and AVCS CORE can initialize, false otherwise.&lt;/returns&gt;
	/// &lt;exception cref="Exception"&gt;Thrown when an error occurs during resource validation or update checks.&lt;/exception&gt;
	private bool AvcsCoreCheckResources(string profileShortname)
	{
		// Validate existing unencrypted resource files (if any)
		bool isReturningUser = HasAllRequiredResources(profileShortname);

		if (AvcsCoreIsOnline)
		{
			// Execute the main AVCS CORE command to get the latest hash table if user and AVCS website are both online
			// Next, if online, will return true if the changelog is different from what is on file locally
			// If different, the contents of the new changelog will be returned for a user update approval message
			// If different (including no local file), and is first time use, will get the latest resources so AVCS CORE can initialize for the first time
			VA.SetText("~passed1", CheckForUpdateRequest);
			VA.SetText("~passed2", profileShortname);
			VA.SetText("~passed3", CurrentBranch);
			VA.Command.Execute(AvcsCoreMainFunction, WaitForReturn: true, AsSubcommand: true, PassedText: "~passed1;~passed2;~passed3");

			var isError = VA.GetBoolean("AVCS_ERROR") ?? false;
			if (isError)
			{
				throw new Exception("AVCS ERROR: Unable to check for updates or validate resources for profile '" + profileShortname + "'.");
			}
		}

		// Set the global build number variable here after every 'first' call to AVCS_CORE_MAIN, as it may change with each profile shortname
		AvcsResourcesBuildNumber = VA.GetText("AVCS_BUILD") ?? ""; // non-crucial, if it dies, it dies

		// If not online, bypass any update checks and return
		if (!AvcsCoreIsOnline)
		{
			if (!isReturningUser)
			{
				VA.WriteToLog("AVCS ERROR: No resources found, and user or AVCS website is offline - cannot initialize AVCS CORE.", "red");
			}

			return isReturningUser;
		}

		var isUpdatePending = VA.GetBoolean("AVCS_UPDATE_PENDING") ?? false;
		if (isReturningUser &amp;&amp; !isUpdatePending)
		{
			return true; // no updates, continue initialization
		}

		var latestChangeLog = VA.GetText("AVCS_CHANGELOG") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(latestChangeLog))
		{
			VA.WriteToLog("AVCS ERROR: Update pending but change log is somehow null/empty, or contains no entries.", "red");
			return isReturningUser;
		}

		if (isReturningUser &amp;&amp; !IsUpdateApprovedByUser(latestChangeLog))
		{
			// If not first time use and update is not approved, just continue initialization
			return true; // all good, user can update another time
		}

		return GetUpdatedResourceFiles(profileShortname);
	}

	/// &lt;summary&gt;
	/// Checks if the AVCS resources folder has all required resources for the specified profile.&lt;br/&gt;
	/// &lt;/summary&gt;
	/// &lt;param name="shortName"&gt;The profile short name, an amalgam of the all-caps profile keyword name, and its major and minor version numbers (i.e. "CORE20").&lt;/param&gt;
	/// &lt;returns&gt;True if resources folder for this profile has all valid required resource files, false otherwise.&lt;/returns&gt;
	private bool HasAllRequiredResources(string profileShortname)
	{
		// Check local files for bare-minimum check of this being a returning user - if no files, no resources to validate
		var versionFilePath = Path.Combine(AvcsResourcesDirectory, VersionFileName);
		var hashTableFilePath = Path.Combine(AvcsResourcesDirectory, HashTableFileName);
		var hasVersionFiles = File.Exists(versionFilePath) &amp;&amp; File.Exists(hashTableFilePath);

		// Validate all functional resource files in the AVCS resources folder
		return hasVersionFiles &amp;&amp; HasValidResourceFiles(profileShortname);
	}

	/// &lt;summary&gt;
	/// Checks if the AVCS resources folder contains valid resource files for the specified profile.&lt;br/&gt;
	/// Also ensures valid paths have been set for each compiled inline function to a VA text variable named for&lt;br/&gt;
	/// the inline function (minus extension and version suffix).&lt;br/&gt;
	/// &lt;/summary&gt;
	/// &lt;param name="shortName"&gt;The profile short name, an amalgam of the all-caps profile keyword name, and its major and minor version numbers (i.e. "CORE20").&lt;/param&gt;
	/// &lt;returns&gt;True if all required resource files are valid, false otherwise.&lt;/returns&gt;
	private bool HasValidResourceFiles(string profileShortname)
	{
		bool isAllValid = true;
		List&lt;string&gt; invalidFilePaths = new List&lt;string&gt;();

		if (!Directory.Exists(AvcsResourcesDirectory))
		{
			VA.WriteToLog("AVCS ERROR: AVCS resources directory does not exist.", "red");
			return false;
		}

		try
		{
			// Execute the main AVCS CORE command to get the local hash table
			VA.SetText("~passed1", LocalHashTableRequest);
			VA.SetText("~passed2", profileShortname);
			VA.SetText("~passed3", CurrentBranch);
			VA.Command.Execute(AvcsCoreMainFunction, WaitForReturn: true, AsSubcommand: true, PassedText: "~passed1;~passed2;~passed3");

			var isError = VA.GetBoolean("AVCS_ERROR") ?? false;
			if (isError)
			{
				throw new Exception("AVCS ERROR: Unable to check for updates or validate resources for profile '" + profileShortname + "'.");
			}

			var localHashTable = VA.GetText("AVCS_CHECKSUMS") ?? string.Empty;
			if (string.IsNullOrWhiteSpace(localHashTable) || !localHashTable.Contains(KeyValDelimiter[0]))
			{
				throw new Exception("AVCS ERROR: Hash table is somehow null/empty, or contains no entries.");
			}

			// Builds a list of files from the latest hash table and validate each functional resource in the AVCS resources folder
			string[] fileNames = GetFileListFromHashTable(localHashTable);

			var parsedHashTable = GetParsedHashTable(localHashTable) ?? new Dictionary&lt;string, string&gt;(StringComparer.OrdinalIgnoreCase);
			if (parsedHashTable.Count == 0)
			{
				throw new Exception("AVCS ERROR: Parsed hash table dictionary is somehow empty.");
			}

			foreach (var fileName in fileNames)
			{
				// Presently, the only AVCS resource files which can "do" things are precompiled inline functions and a small pagination JS within commref HTML template(s)
				// Therefore they should be verified as true to the open source code on my GitHub via the hash table for safety &amp; peace of mind
				var fileExt = Path.GetExtension(fileName);
				if (!IsEqual(fileExt, FunctionalExtensions))
				{
					continue;
				}

				// Determine if this file is in the resources folder or the command reference folder
				var filePath = IsEqual(fileExt, InlineFunctionExtensions)
					? Path.Combine(AvcsResourcesDirectory, fileName)
					: Path.Combine(AvcsCommRefDirectory, fileName);

				if (!IsValidResourceFile(filePath, parsedHashTable))
				{
					invalidFilePaths.Add(filePath);
					isAllValid = false;
					continue; // let it slide and set isAllInvaid false, continue checking all files
				}

				// CRUCIAL: Set each HTML template and compiled inline function path to a VA text variable of its name (minus extension and any version suffix)
				if (IsEqual(fileExt, FunctionalExtensions) &amp;&amp; !IsEqual(fileName, CoreUpdaterFileNames))
				{
					var fileNameWithoutExt = Path.GetFileNameWithoutExtension(fileName).Replace("_V1", "").Replace("_V2", "");
					VA.SetText(fileNameWithoutExt, filePath);
					// To execute AVCS compiled inline functions, pass in the name of the function in ~passedtext1 to F_CORE_RUN
					// - F_CORE_RUN will assemble path from {TXT:{TXT:~passedtext1}}, using passed params to wait and/or retain instance
				}
			}
		}
		catch (Exception ex)
		{
			isAllValid = false;
			VA.WriteToLog(ex.Message, "red");
			VA.WriteToLog("AVCS SOLUTION: Try restarting VoiceAttack and switch to AVCS CORE. You do NOT need to run VoiceAttack as admin for AVCS CORE.", "red");
		}

		// If not all valid, attempt to delete the invalid file to get a new valid one in its place
		if (!isAllValid &amp;&amp; invalidFilePaths.Count &gt; 0)
		{
			VA.WriteToLog("AVCS UPDATER: Invalid or outdated AVCS resource file(s) removed:", "red");
			foreach (var invalidFilePath in invalidFilePaths)
			{
				// If the file is not valid, it must be deleted so it cannot be utilized and so a new one can be downloaded to repair it
				if (File.Exists(invalidFilePath) &amp;&amp; TryDeleteResourceFile(invalidFilePath))
				{
					VA.WriteToLog(invalidFilePath, "blank");
				}
			}
		}


		// If there are deprecated resources, ask user if they want AVCS to clean them up
		if (_hasDeprecatedResources &amp;&amp; IsResourceCleanupApprovedByUser())
		{
			VA.WriteToLog("AVCS NOTE: Cleaning up deprecated resources....", "green");

			var color = "green";
			foreach (var resource in DeprecatedResources)
			{
				// If the file is deprecated, it should not occupy space on users drive - delete upon approval
				var filePath = Path.Combine(AvcsResourcesDirectory, resource);
				if (File.Exists(filePath) &amp;&amp; !TryDeleteResourceFile(filePath))
				{
					color = "red";
					VA.WriteToLog("AVCS ERROR: Failed to delete deprecated resource file: " + resource, "red");
				}
			}

			VA.WriteToLog("AVCS NOTE: Deprecated resources cleanup has concluded...", color);
			_hasDeprecatedResources = false;
			DeprecatedResources.Clear();
		}

		return isAllValid;
	}

	/// &lt;summary&gt;
	/// Builds and adds the profile resource files root paths to the supplied list of resource folders (if not already on it) relative to the&lt;br/&gt;
	/// profile name and version amalgam ('shortname'), and the current VA versions enabled.
	/// &lt;/summary&gt;
	/// &lt;param name="profilesList"&gt;The list of profile paths to add to.&lt;/param&gt;
	/// &lt;param name="rootDir"&gt;The root directory where all resource files are located.&lt;/param&gt;
	/// &lt;param name="shortName"&gt;The profile short name, an amalgam of the all-caps profile keyword name, and its major and minor version numbers (i.e. "CORE20").&lt;/param&gt;
	/// &lt;param name="hasVersion1"&gt;A boolean indicating if the profile has a version 1 resources path.&lt;/param&gt;
	/// &lt;param name="hasVersion2"&gt;A boolean indicating if the profile has a version 2 resources path.&lt;/param&gt;
	private void AddRelativeProfilePaths(List&lt;string&gt; profilesList, string rootDir, string shortName, bool hasVersion1, bool hasVersion2)
	{
		var isVersion2 = VA.VAVersion.Major == 2;
		var addAltPaths = (isVersion2 &amp;&amp; hasVersion1) || (!isVersion2 &amp;&amp; hasVersion2);

		var vaVersionPath = "v" + (isVersion2 ? "2" : "1");
		var otherVaVersionPath = "v" + (isVersion2 ? "1" : "2");

		var profilePath = Path.Combine(rootDir, shortName, vaVersionPath);
		var profileAltPath = Path.Combine(rootDir, shortName, otherVaVersionPath);

		if (profilesList.Count &gt; 0 &amp;&amp; !profilesList.Contains(profilePath, StringComparer.OrdinalIgnoreCase))
		{
			profilesList.Add(profilePath);
		}

		if (addAltPaths &amp;&amp; !profilesList.Contains(profileAltPath, StringComparer.OrdinalIgnoreCase))
		{
			profilesList.Add(profileAltPath);
		}
	}


	// ----- Helpers to Help with the things wot the Helper methods above themselves need Help wit -----
	private bool IsEqual(string input, string comparator) { return IsEqual(input, new[] { comparator }); }
	private bool IsEqual(string input, string[] comparators)
	{
		foreach (var comparator in comparators)
		{
			if (string.Equals(input.ToUpperInvariant(), comparator.ToUpperInvariant()))
			{
				return true;
			}
		}

		return false;
	}

	public bool IsFunctionalLink(string line, string[] exts)
	{
		return exts.Any(ext =&gt; line.ToLowerInvariant().Trim().EndsWith(ext.ToLowerInvariant()));
	}

	private bool IsVisualBasicSource(string dllFileName, string[] vbFiles)
	{
		// Get the base file name (without extension), case-insensitive
		var baseName = System.IO.Path.GetFileNameWithoutExtension(dllFileName);
		foreach (var vbFile in vbFiles)
		{
			var vbBase = System.IO.Path.GetFileNameWithoutExtension(vbFile);
			if (IsEqual(baseName, vbBase))
			{
				return true;
			}
		}

		return false;
	}

	private bool IsValidResourceFile(string resourceFilePath, Dictionary&lt;string, string&gt; hashDict)
	{
		try
		{
			if (hashDict.Count == 0)
			{
				return false; // Invalid hash table
			}

			if (string.IsNullOrWhiteSpace(resourceFilePath) || !File.Exists(resourceFilePath))
			{
				return false; // Invalid path or non-existent
			}

			string expectedHash;
			var resourceFileName = Path.GetFileName(resourceFilePath);
			if (!hashDict.TryGetValue(resourceFileName, out expectedHash))
			{
				// Unknown file, treat as valid yet deprecated and due for removal in upcoming build update
				_hasDeprecatedResources = true;
				DeprecatedResources.Add(resourceFileName); // rather than attempt to delete, ask user?
				return true;
			}

			// Must provide a literal string as a non-comparable string for IsEqual on expectedHash (currentHash could be string.Empty on error)
			expectedHash = string.IsNullOrWhiteSpace(expectedHash) ? "null" : expectedHash; // the word "null" or anything is sufficient

			var currentHash = GetFileHash(resourceFilePath);
			if (!IsEqual(currentHash, expectedHash))
			{
				return false; // Invalid hash - does not match
			}

			return true;
		}
		catch
		{
			return false;
		}
	}

	private bool IsUpdateApprovedByUser(string changelog)
	{
		if (!string.IsNullOrEmpty(changelog))
		{
			changelog = string.Join("\n", changelog.Split(NewLineChars, StringSplitOptions.RemoveEmptyEntries).Select(m =&gt; m.Trim()));
		}

		var result = ShowUpdateApprovalDialog(changelog);

		return result == DialogResult.Yes;
	}

	private bool IsResourceCleanupApprovedByUser()
	{
		// guard and early return on DeprecatedResources having no files as lines...
		if (DeprecatedResources.Count == 0)
		{
			VA.WriteToLog("AVCS ERROR: No deprecated resources found to remove - should not be possible at this stage.", "red");
			return false;
		}
		var isMultipleFiles = DeprecatedResources.Count &gt; 1;
		var pluralSuffix = isMultipleFiles ? "s" : string.Empty;
		var pluralDeterminer = isMultipleFiles ? " some" : " a";
		var pluralPronoun = isMultipleFiles ? " they" : " it";
		var deprecatedResources = string.Join("\n", DeprecatedResources.Select(r =&gt; r.Replace("\\", "\\\\").Replace("\n", "\\n")));

		VA.WriteToLog("AVCS NOTE: Irrelevant or deprecated AVCS resource file" + pluralSuffix + " can be removed.", "orange");

		var message =
			"AVCS CORE has detected" + pluralDeterminer + " deprecated or irrelevant resource file" + pluralSuffix + " in the AVCS resources folder." +
			"\n\n" +
			"Would you like AVCS to auto-cleanup the following file" + pluralSuffix + "?\n" +
			deprecatedResources +
			"\n\n" +
			"A file named '" + DeprecatedResourcesFileName + "' has been written to this folder only for your reference.\n\n" +
			"Press 'No' to open the folder so you can review and delete the file" + pluralSuffix + " manually.\n\n" +
			"Press 'Cancel' to leave the file" + pluralSuffix + " as-is," + pluralPronoun + " will not cause any issues.";

		var result = System.Windows.Forms.MessageBox.Show(
			message,
			"AVCS CORE - Deprecated Resources Cleanup",
			System.Windows.Forms.MessageBoxButtons.YesNoCancel,
			System.Windows.Forms.MessageBoxIcon.Information,
			System.Windows.Forms.MessageBoxDefaultButton.Button1
		);


		// Write a simple text file so user can refer to this list as needed
		var deprecatedFilePath = Path.Combine(AvcsResourcesDirectory, DeprecatedResourcesFileName);
		try
		{
			File.WriteAllLines(deprecatedFilePath, DeprecatedResources);
		}
		catch
		{
			VA.WriteToLog("AVCS ERROR: Failed to write deprecated resources list to file: " + deprecatedFilePath, "red");
		}

		// If user pressed 'yes', return 'true' to clean up deprecated AVCS resource files
		if (result == System.Windows.Forms.DialogResult.Yes)
		{
			return true;
		}

		// If user pressed 'cancel', leave everything as-is
		if (result == System.Windows.Forms.DialogResult.Cancel)
		{
			VA.WriteToLog("AVCS NOTE: Leaving deprecated resource" + pluralSuffix + " as-is in AVCS resource folder.", "yellow");
		}
		// If user pressed 'no', open the AVCS resources folder in explorer
		else if (result == System.Windows.Forms.DialogResult.No)
		{
			VA.WriteToLog("AVCS NOTE: Opening the AVCS resources folder. See file named '" + DeprecatedResourcesFileName + "' for reference", "green");
			System.Diagnostics.Process.Start("explorer.exe", AvcsResourcesDirectory);
		}

		return false;
	}


	// ----- Can't say I don't try...
	private XElement TrySetCoreOptionsXml(XElement root, bool v1, bool v2)
	{
		if (root == null || !IsEqual(root.Name.LocalName, "resourceOptions"))
		{
			root = new XElement("resourceOptions");
		}

		var core = root.Element("core");
		if (core == null)
		{
			core = new XElement("core");
			root.AddFirst(core);
		}

		try
		{
			core.SetElementValue("v1", v1);
			core.SetElementValue("v2", v2);

			return root;
		}
		catch
		{
			return new XElement("resourceOptions");
		}
	}

	private XElement TrySetProfileListXml(XElement root, IEnumerable&lt;string&gt; selectedProfiles)
	{
		if (root == null || !IsEqual(root.Name.LocalName, "resourceOptions"))
		{
			root = new XElement("resourceOptions");
		}

		var profiles = root.Element("profiles");
		if (profiles != null)
		{
			profiles.Remove();
		}

		try
		{
			var list = (selectedProfiles ?? Enumerable.Empty&lt;string&gt;()).Where(p =&gt; !string.IsNullOrWhiteSpace(p)).ToList();
			if (list.Count == 0)
			{
				return root; // do not add &lt;profiles&gt; at all when empty
			}

			profiles = new XElement("profiles", selectedProfiles.Select(p =&gt; new XElement("profile", p)));
			root.Add(profiles);

			return root;
		}
		catch
		{
			return new XElement("resourceOptions");
		}
	}

	private Tuple&lt;bool, bool&gt; TryGetCoreOptionsXml(XElement root)
	{
		if (root == null || !IsEqual(root.Name.LocalName, "resourceOptions"))
		{
			// return empty tuple if root is null
			return Tuple.Create(false, false);
		}

		var core = root.Element("core");
		if (core == null)
		{
			return Tuple.Create(false, false);
		}

		try
		{
			bool v1 = false, v2 = false;
			bool.TryParse((string)core.Element("v1"), out v1);
			bool.TryParse((string)core.Element("v2"), out v2);
			var coreOptions = Tuple.Create(v1, v2);

			return coreOptions;
		}
		catch
		{
			return Tuple.Create(false, false);
		}
	}

	private List&lt;string&gt; TryGetProfileListXml(XElement root)
	{
		// If the root is empty, return new list of string
		if (root == null || !IsEqual(root.Name.LocalName, "resourceOptions"))
		{
			return new List&lt;string&gt;();
		}

		var profiles = root.Element("profiles");
		if (profiles == null)
		{
			return new List&lt;string&gt;();
		}

		try
		{
			var profilesList = profiles.Elements("profile").Select(p =&gt; (string)p).ToList();
			return profilesList;
		}
		catch
		{
			return new List&lt;string&gt;();
		}
	}

	private XElement TryParseXmlFromBytes(byte[] data)
	{
		try
		{
			if (data.Length == 0)
			{
				return new XElement("empty");
			}
			using (var ms = new MemoryStream(data))
			{
				return XElement.Load(ms);
			}
		}
		catch
		{
			return new XElement("empty");
		}
	}

	private bool TryWriteXmlFile(string filePath, XElement xml)
	{
		try
		{
			xml.Save(filePath);
			return true;
		}
		catch
		{
			return false;
		}
	}

	private XElement TryReadXmlFile(string filePath)
	{
		try
		{
			if (!File.Exists(filePath))
			{
				return new XElement("empty");
			}

			var xmlFile = XElement.Load(filePath);
			return xmlFile;
		}
		catch
		{
			return new XElement("empty");
		}
	}

	private string TryReadProfilesFile(string path)
	{
		try
		{
			if (string.IsNullOrWhiteSpace(path) || !File.Exists(path))
			{
				return string.Empty;
			}

			var fileContents = File.ReadAllText(path);

			if (string.IsNullOrWhiteSpace(fileContents))
			{
				return string.Empty;
			}

			return fileContents;
		}
		catch
		{
			return string.Empty;
		}
	}

	private static byte[] TryDownloadResourceFile(string url)
	{
		try
		{
			if (string.IsNullOrWhiteSpace(url))
			{
				return Array.Empty&lt;byte&gt;();
			}

			try { Native.DeleteUrlCacheEntryW(url); } catch { }

			string bustUrl = url + (url.IndexOf('?') &gt;= 0 ? "&amp;" : "?") + "cb=" + DateTime.UtcNow.Ticks.ToString();

			IStream comStream;
			int hr = Native.URLOpenBlockingStreamW(IntPtr.Zero, bustUrl, out comStream, 0, IntPtr.Zero);
			if (hr != 0 || comStream == null)
			{
				return Array.Empty&lt;byte&gt;();
			}

			try
			{
				using (var ms = new MemoryStream())
				{
					byte[] buffer = new byte[8192];
					IntPtr pRead = Marshal.AllocHGlobal(sizeof(int));
					try
					{
						while (true)
						{
							comStream.Read(buffer, buffer.Length, pRead);
							int bytesRead = Marshal.ReadInt32(pRead);
							if (bytesRead == 0)
							{
								break; // EOF
							}
							ms.Write(buffer, 0, bytesRead);
						}
					}
					finally
					{
						Marshal.FreeHGlobal(pRead);
					}

					return ms.ToArray();
				}
			}
			finally
			{
				try { Marshal.ReleaseComObject(comStream); } catch { }
			}
		}
		catch
		{
			return Array.Empty&lt;byte&gt;();
		}
	}

	private bool TryRemoveReadOnly(string filePath)
	{
		if (!File.Exists(filePath))
		{
			return false;
		}

		try
		{
			var attributes = File.GetAttributes(filePath);
			if ((attributes &amp; FileAttributes.ReadOnly) == 0)
			{
				return true; // Not read-only, nothing to do, so return true, as it's all blue
			}

			// Remove read-only attribute
			File.SetAttributes(filePath, attributes &amp; ~FileAttributes.ReadOnly);
			return true;
		}
		catch
		{
			return false;
		}
	}

	private bool TryDeleteResourceFile(string filePath)
	{
		try
		{
			if (string.IsNullOrWhiteSpace(filePath) || !File.Exists(filePath))
			{
				return true; // not really a failure - caller wanted a file gone, it doesn't exist, why communicate a failure?
			}

			// Guard for AVCS resource files: CORE will only ever delete its own files from its own folders
			if (!filePath.ToLowerInvariant().Contains(AvcsApps.ToLowerInvariant()))
			{
				VA.WriteToLog("AVCS ERROR: Attempt to delete a file outside of the AVCS CORE profile folders has failed: " + filePath, "red");
				VA.WriteToLog(filePath, "blank");
				VA.WriteToLog("No files or folders have been deleted by this action, and AVCS will never delete files outside of its own folder tree.", "yellow");
				return false;
			}

			// Must check if this AVCS resource file is read-only and try to remove the read-only attribute if it is set
			// Best to try first on any AVCS file, because if something cocks up, the subsequent delete instruction will hcf AVCS CORE
			if ((File.GetAttributes(filePath) &amp; FileAttributes.ReadOnly) != 0 &amp;&amp; !TryRemoveReadOnly(filePath))
			{
				return false; // Failed to remove read-only attribute from read-only AVCS resource, cannot delete
			}

			File.Delete(filePath);
			return true;
		}
		catch
		{
			// let it slide... just communicate it failed with 'false'
			return false;
		}
	}

	private bool TryCreateResourceFolder(string folderPath)
	{
		if (string.IsNullOrWhiteSpace(folderPath))
		{
			return false;
		}

		try
		{
			var _ = Path.GetFullPath(folderPath);
			Directory.CreateDirectory(folderPath); // no-op if it already exists
			return true;
		}
		catch
		{
			return false; // Folder creation failed
		}
	}


	/// &lt;summary&gt;
	/// Retrieves the full path to the '..\AppData\Roaming' folder for AVCS VoiceAttack profiles.  Example path:&lt;br/&gt;
	/// @"..\AppData\Roaming\VoiceAttack-AVCS Profiles"
	/// &lt;/summary&gt;
	/// &lt;param name="appFolderName"&gt;The name of the AVCS folder. Should be 'VoiceAttack-AVCS Profiles'.&lt;/param&gt;
	/// &lt;returns&gt;&lt;/returns&gt;
	private string GetAppConfigPath(string appFolderName)
	{
		if (string.IsNullOrWhiteSpace(appFolderName))
		{
			return string.Empty;
		}

		var baseDir = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
		if (string.IsNullOrEmpty(baseDir))
		{
			return string.Empty; // super unlikely, but cheap guard
		}

		var resourcesDir = Path.Combine(baseDir, appFolderName);

		return TryCreateResourceFolder(resourcesDir) ? resourcesDir : string.Empty;
	}

	private List&lt;Tuple&lt;string, string&gt;&gt; GetParsedChangelogLines(string changelog)
	{
		var result = new List&lt;Tuple&lt;string, string&gt;&gt;();

		string[] changelogLines = changelog.Split(NewLineChars, StringSplitOptions.RemoveEmptyEntries);

		int startIdx = -1, endIdx = changelogLines.Length; // start and end of .dll section
		for (int i = 0; i &lt; changelogLines.Length; i++)
		{
			if (!changelogLines[i].StartsWith("-AVCS Inline Functions-"))
			{
				continue;
			}

			startIdx = i + 1;
			// Look for next header after this
			for (int j = startIdx; j &lt; changelogLines.Length; j++)
			{
				if (changelogLines[j].StartsWith(LineMarkerDashHeader) &amp;&amp; j != i)
				{
					endIdx = j;
					break;
				}
			}
			break;
		}

		// Determine how many .dll lines there are, and the link limit (simple: n + lines available after .dlls, but max N)
		int dllCount = 0;
		for (int i = startIdx; i &lt; endIdx; i++)
		{
			if (i &gt;= 0 &amp;&amp; IsFunctionalLink(changelogLines[i], InlineFunctionExtensions))
			{
				dllCount++;
			}
		}

		int totalLines = changelogLines.Length;
		int maxLinkLabels = MaxLinkLabels;
		// For every empty "line slot" up to max, increase the link limit by one (simple logic)
		if (totalLines &lt; MaxTotalLabels)
		{
			if (maxLinkLabels &gt; dllCount)
			{
				maxLinkLabels = dllCount;
			}
		}
		else if (dllCount &lt; MaxLinkLabels)
		{
			maxLinkLabels = dllCount; // then, don't gotta worry about too may .dll updates making box too tall
		}
		else
		{
			maxLinkLabels = MaxTotalLabels - (totalLines - dllCount);
		}

		int linksAdded = 0, linksSkipped = 0;
		for (int i = 0; i &lt; changelogLines.Length; i++)
		{
			string line = changelogLines[i];

			// Compiled Inline Function links (.dll)
			if (i &gt;= startIdx &amp;&amp; i &lt; endIdx &amp;&amp; IsFunctionalLink(line, InlineFunctionExtensions) &amp;&amp; !line.StartsWith(ChangelogPrefixRemoved))
			{
				if (linksAdded &lt; maxLinkLabels)
				{
					string fileName = line.Replace(ChangelogPrefixAdded, "").Replace(ChangelogPrefixUpdated, "");
					string repoFileName = Path.GetFileNameWithoutExtension(fileName).Replace("_V1", "").Replace("_V2", "");
					string urlExt = IsVisualBasicSource(fileName, VisualBasicFileNames) ? ".vb" : ".cs";
					string url = AvcsGitHubUrlBase + repoFileName + urlExt;
					result.Add(Tuple.Create(line, url));
					linksAdded++;
				}
				else
				{
					linksSkipped++;
				}
			}
			// Section headers or regular text
			else if (i &lt; startIdx || i &gt;= endIdx || !IsFunctionalLink(line, InlineFunctionExtensions) || line.StartsWith(ChangelogPrefixRemoved))
			{
				// Naturally, this section will not be entered until after the last .dll line to be shown, and more if remained, insert the "...and N more" before this next header line
				if (!_isLinkLimitMsgAdded &amp;&amp; linksAdded == maxLinkLabels &amp;&amp; linksSkipped &gt; 0)
				{
					_isLinkLimitMsgAdded = true;
					result.Add(Tuple.Create("(…and " + linksSkipped.ToString() + " more... big update... see full changelog link at bottom)", ""));
				}

				// This is a non-dll line, and on first entry, possibly another section header line OR the final [message in square brackets]
				result.Add(Tuple.Create(line, ""));
			}
		}

		return result;
	}

	private Dictionary&lt;string, string&gt; GetParsedHashTable(string hashTable)
	{
		return string.IsNullOrWhiteSpace(hashTable)
			? new Dictionary&lt;string, string&gt;(StringComparer.OrdinalIgnoreCase)
			: hashTable
				.Split(NewLineChars, StringSplitOptions.RemoveEmptyEntries)
				.Select(line =&gt; line.Split(KeyValDelimiter, 2))
				.Where(kv =&gt; kv.Length == 2)
				.ToDictionary(
					kv =&gt; kv[0].Trim(),
					kv =&gt; kv[1].Trim(),
					StringComparer.OrdinalIgnoreCase
				);
	}

	private string GetFileHash(string filePath)
	{
		if (string.IsNullOrWhiteSpace(filePath) || !File.Exists(filePath))
		{
			return string.Empty; // Return empty string for invalid input
		}

		using (var stream = File.OpenRead(filePath))
		using (var sha = SHA256.Create())
		{
			var hash = sha.ComputeHash(stream);
			return BitConverter.ToString(hash).Replace("-", ""); // Hex string
		}
	}

	private string[] GetFileListFromHashTable(string hashTable)
	{
		if (string.IsNullOrWhiteSpace(hashTable))
		{
			return Array.Empty&lt;string&gt;(); // No files to process
		}

		return hashTable
			.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
			.Select(line =&gt; line.Split('=')[0].Trim())
			.Where(fileName =&gt; !string.IsNullOrWhiteSpace(fileName))
			.ToArray();
	}

	private bool GetProfileSizesKb(XElement root, string shortname, out int v1Kb, out int v2Kb)
	{
		v1Kb = 0;
		v2Kb = 0;

		if (!IsEqual(root.Name.LocalName, "resourceFileSizes"))
		{
			return false;
		}

		var profiles = root.Element("profiles");
		if (profiles == null)
		{
			return false;
		}

		var profile = profiles.Elements("profile")
			.FirstOrDefault(e =&gt; IsEqual(((string)e.Attribute("name") ?? string.Empty), shortname));
		if (profile == null)
		{
			return false;
		}

		var v1 = profile.Element("v1");
		var v2 = profile.Element("v2");
		if (v1 == null || v2 == null)
		{
			return false;
		}

		decimal v1Dec, v2Dec;
		if (!decimal.TryParse((string)v1, NumberStyles.Number, CultureInfo.InvariantCulture, out v1Dec))
		{
			return false;
		}
		if (!decimal.TryParse((string)v2, NumberStyles.Number, CultureInfo.InvariantCulture, out v2Dec))
		{
			return false;
		}

		// Round to int KB (dialog uses int sizes - just a general value, precision not needed)
		v1Kb = (int)Math.Round(v1Dec, 0);
		v2Kb = (int)Math.Round(v2Dec, 0);
		return true;
	}

	private void GetUpdatedSizeTotalKb(
		CheckBox cbV1, CheckBox cbV2,
		CheckBox cbBms,// CheckBox cbRon,
		int sizeFilesCoreV1, int sizeFilesCoreV2,
		int sizeFilesBmsV1, int sizeFilesBmsV2,
		//int sizeFilesRonV1, int sizeFilesRonV2,
		Label lblTotalKb)
	{
		int total = 0;
		if (cbV1.Checked)
		{
			total += sizeFilesCoreV1;
		}

		if (cbV2.Checked)
		{
			total += sizeFilesCoreV2;
		}

		if (cbBms.Checked)
		{
			if (cbV1.Checked) total += sizeFilesBmsV1;
			if (cbV2.Checked) total += sizeFilesBmsV2;
		}

		//if (cbRon.Checked)
		//{
		//    if (cbV1.Checked) total += sizeFilesRonV1;
		//    if (cbV2.Checked) total += sizeFilesRonV2;
		//}

		var totalType = total &gt; 1000 ? "MB" : "KB";
		decimal finalTotal = total &gt; 1000 ? Math.Round(total / 1000.0M, 2) : total;
		lblTotalKb.Text = "Total estimated size of all resources:   " + finalTotal.ToString() + totalType;
	}

	private bool GetUpdatedResourceFiles(string profileShortname)
	{
		// Execute the main AVCS CORE command to get the latest required resources for this approved update
		VA.SetText("~passed1", ApplyUpdateRequest);
		VA.SetText("~passed2", profileShortname);
		VA.SetText("~passed3", CurrentBranch);
		VA.Command.Execute(AvcsCoreMainFunction, WaitForReturn: true, AsSubcommand: true, PassedText: "~passed1;~passed2;~passed3");

		var isAvcsError = VA.GetBoolean("AVCS_ERROR") ?? false;
		if (isAvcsError)
		{
			// If update was not applied after user approval (or on first use), delete version file if it exists
			// This will force update on next profile start without requiring user to approve a second time
			var versionFilePath = Path.Combine(AvcsResourcesDirectory, VersionFileName);
			TryDeleteResourceFile(versionFilePath);
			return false;
		}

		return true;
	}


	// ...just another 500 lines of code here for some customized WinForms dialogs I wanted
	/// &lt;summary&gt;
	/// Shows a dialog to select the VoiceAttack version(s) and game profile(s) for AVCS CORE resources download.&lt;br/&gt;
	/// &lt;/summary&gt;
	/// &lt;param name="isVersion2"&gt;A flag indicating if the user is using VoiceAttack Version 2.x+.&lt;/param&gt;
	/// &lt;param name="hasEnabledV1"&gt;A flag indicating if the user also wants resources for use in VoiceAttack Version 1.x+.&lt;/param&gt;
	/// &lt;param name="hasBms"&gt;A flag indicating if the user has the AVCS4 BMS20+ profile.&lt;/param&gt;
	/// &lt;returns&gt;A tuple containing the selected options:&lt;br/&gt;
	/// bool 1: Whether to download VoiceAttack Version 1.x+ resources.&lt;br/&gt;
	/// bool 2: Whether to download VoiceAttack Version 2.x+ resources.&lt;br/&gt;
	/// bool 3: Whether to download AVCS4 BMS resources.&lt;br/&gt;
	/// bool 4: Whether to download AVCS4 Ready or Not resources (placeholder - not implemented yet).&lt;/returns&gt;
	public Tuple&lt;bool, bool, bool, bool&gt; ShowVersionGameSelectionDialog(bool isVersion2 = false, bool hasEnabledV1 = false, bool hasBms = false)//, bool hasRon = false)
	{
		int formWidth = 490;
		int padding = 16, y = 16, cbHeight = 25, spacing = 4;

		// ---- Resource Sets File Sizes ----
		int sizeFilesCoreV1 = 0;
		int sizeFilesCoreV2 = 0;
		int sizeFilesBmsV1 = 0;
		int sizeFilesBmsV2 = 0;
		//int sizeFilesRonV1 = 0;
		//int sizeFilesRonV2 = 0;

		var bytes = TryDownloadResourceFile(AvcsResourcesFilesSizeUrl);
		var xml = TryParseXmlFromBytes(bytes);

		// Known shortnames
		string coreShortname = "CORE20";
		string bmsShortname = "BMS20";
		//string ronShortname = "RON20";

		int v1, v2;
		//if (xml != null)
		if (xml != null &amp;&amp; !IsEqual(xml.Name.LocalName, "empty"))
		{
			if (GetProfileSizesKb(xml, coreShortname, out v1, out v2))
			{
				sizeFilesCoreV1 = v1;
				sizeFilesCoreV2 = v2;
			}
			if (GetProfileSizesKb(xml, bmsShortname, out v1, out v2))
			{
				sizeFilesBmsV1 = v1;
				sizeFilesBmsV2 = v2;
			}
			//if (GetProfileSizesKb(xml, ronShortname, out v1, out v2))
			//{
			//    sizeFilesRonV1 = v1;
			//    sizeFilesRonV2 = v2;
			//}
		}

		// ---- Game profile group expandability ----
		int profileCheckboxHeightFactor = 2; // DEV NOTE: adjust this if dynamic spacing doesn't respect more/fewer game checkboxes in V1 (for example)
		int profileCheckboxBlockHeight = profileCheckboxHeightFactor * (cbHeight + spacing);

		var form = new Form();
		form.Text = "Select AVCS CORE Required Resources Download Options";
		form.FormBorderStyle = FormBorderStyle.FixedDialog;
		form.MaximizeBox = false;
		form.MinimizeBox = false;
		form.StartPosition = FormStartPosition.CenterScreen;
		form.BackColor = Color.LightGray;
		form.ClientSize = new Size(formWidth, 800 + (profileCheckboxHeightFactor - 2) * (cbHeight + spacing)); // base + extra per extra game
		float fontSize = 10.5f; // Default: 10.5f seems to work best
		var messageFont = new Font(SystemFonts.MessageBoxFont.FontFamily, fontSize, FontStyle.Regular);
		var messageBoldFont = new Font(SystemFonts.MessageBoxFont.FontFamily, fontSize, FontStyle.Bold);


		// ---- Header ----
		var lblHdr = new Label
		{
			Text = "Select the VoiceAttack version(s) you will use AVCS CORE in:",
			AutoSize = true,
			Font = messageBoldFont,
			Location = new Point(padding, y)
		};
		form.Controls.Add(lblHdr);
		y += lblHdr.Height + spacing * 2;


		// ---- VA checkboxes ----
		var cbV1 = new CheckBox
		{
			Text = "VoiceAttack Version 1.x+",
			AutoSize = true,
			Font = messageFont,
			Location = new Point(padding, y),
			Checked = !isVersion2 || hasEnabledV1
		};
		var cbV2 = new CheckBox
		{
			Text = "VoiceAttack Version 2.x+",
			AutoSize = true,
			Font = messageFont,
			Location = new Point(padding, y += cbHeight),
			Checked = isVersion2
		};

		// Set which one is checked and locked
		if (isVersion2)
		{
			cbV2.Checked = true;
			cbV2.Enabled = false;
		}
		else
		{
			cbV1.Checked = true;
			cbV1.Enabled = false;
		}
		form.Controls.AddRange(new Control[] { cbV1, cbV2 });
		y += cbHeight + spacing * 2;

		// Separator
		var sep = new Label
		{
			BorderStyle = BorderStyle.Fixed3D,
			Location = new Point(padding, y),
			Size = new Size(form.ClientSize.Width - padding * 2, 2)
		};
		form.Controls.Add(sep);
		y += sep.Height + spacing * 2;

		// ---- Games header ----
		var lblGames = new Label
		{
			Text = "Select the AVCS4 profile game(s) you will use:",
			AutoSize = true,
			Font = messageBoldFont,
			Location = new Point(padding, y)
		};
		form.Controls.Add(lblGames);
		y += lblGames.Height + spacing * 2;

		// ---- Game checkboxes ----
		var cbBms = new CheckBox { Text = "Falcon BMS (any version)", AutoSize = true, Font = messageFont, Location = new Point(padding, y), Checked = hasBms };
		//var cbRon = new CheckBox { Text = "Ready or Not", AutoSize = true, Font = messageFont, Location = new Point(padding, y += cbHeight), Checked = hasRon };
		var cbAll = new CheckBox { Text = "Any/All Available (these are tiny kb-sized files, after all)", AutoSize = true, Font = messageFont, Location = new Point(padding, y += cbHeight), Checked = hasBms };// &amp;&amp; hasRon };
		var cbNone = new CheckBox { Text = "None (use CORE template, or decide later)", AutoSize = true, Font = messageFont, Location = new Point(padding, y += cbHeight) };
		var profileCheckboxes = new[] { cbBms, cbAll, cbNone };//cbRon, cbAll, cbNone };
		form.Controls.AddRange(profileCheckboxes);
		y += cbHeight + spacing;


		var lblTotalKb = new Label();

		// ---- Interlock 'None' logic ----
		cbNone.CheckedChanged += (s, e) =&gt;
		{
			//GetUpdatedSizeTotalKb();
			GetUpdatedSizeTotalKb(cbV1, cbV2, cbBms,// cbRon,
				sizeFilesCoreV1, sizeFilesCoreV2,
				sizeFilesBmsV1, sizeFilesBmsV2,
				//sizeFilesRonV1, sizeFilesRonV2,
				lblTotalKb);

			if (cbNone.Checked)
			{
				// Uncheck all others in the group
				foreach (var cb in profileCheckboxes)
				{
					if (cb != cbNone)
					{
						cb.Checked = false;
					}
				}
			}
		};

		// Interlock 'Any/All' logic
		cbAll.CheckedChanged += (s, e) =&gt;
		{
			if (cbAll.Checked)
			{
				foreach (var cb in profileCheckboxes)
				{
					if (cb != cbAll &amp;&amp; cb != cbNone)
					{
						cb.Checked = true;
					}
				}
				cbNone.Checked = false;
			}
		};

		// The rest (any other box checks unchecks 'None')
		foreach (var cb in profileCheckboxes)
		{
			var hasChanged = cb != cbNone &amp;&amp; cb != cbAll;
			if (!hasChanged)
			{
				continue;
			}

			cb.CheckedChanged += (s, e) =&gt;
			{
				if (((CheckBox)s).Checked)
				{
					cbNone.Checked = false;
				}
				// New logic: If 'Any/All' is checked, but now this is UNchecked, turn off 'Any/All'
				if (!((CheckBox)s).Checked &amp;&amp; cbAll.Checked)
				{
					cbAll.Checked = false;
				}
			};
		}

		// Separator 2
		var sep2 = new Label
		{
			BorderStyle = BorderStyle.Fixed3D,
			Location = new Point(padding, y),
			Size = new Size(form.ClientSize.Width - padding * 2, 2)
		};
		form.Controls.Add(sep2);
		y += sep2.Height + spacing * 2;


		// Note
		var lblNote = new Label
		{
			//Text = "(you can adjust these later; this just makes first-time init faster)",
			Text = "(after first time use, CORE will adapt itself to new profiles or use in other VA version)",
			AutoSize = true,
			Location = new Point(padding, y),
			TextAlign = ContentAlignment.BottomLeft
		};
		form.Controls.Add(lblNote);
		y += lblNote.Height + spacing * 3;

		// Total Resources Size Note
		lblTotalKb = new Label
		{
			AutoSize = true,
			Font = messageBoldFont,
			Location = new Point(padding, y),
			TextAlign = ContentAlignment.BottomLeft
		};

		form.Controls.Add(lblTotalKb);
		y += lblTotalKb.Height + spacing * 3;

		// DONE button
		var btnDone = new Button
		{
			Text = "DONE",
			DialogResult = DialogResult.OK,
			Size = new Size(100, 30),
			Location = new Point((form.ClientSize.Width - 100) / 2, y)
		};
		form.Controls.Add(btnDone);
		form.AcceptButton = btnDone;

		// Final sizing
		form.ClientSize = new Size(form.ClientSize.Width, y + btnDone.Height + padding);

		// ---- Total Resource Sizes Dynamics Event Handlers ----
		var checkboxArray = new CheckBox[] { cbV1, cbV2, cbBms };//, cbRon };

		foreach (var checkbox in checkboxArray)
		{
			// Set the checkbox font
			checkbox.CheckedChanged += (s, e) =&gt; GetUpdatedSizeTotalKb(cbV1, cbV2, cbBms,// cbRon,
					sizeFilesCoreV1, sizeFilesCoreV2,
					sizeFilesBmsV1, sizeFilesBmsV2,
					//sizeFilesRonV1, sizeFilesRonV2,
					lblTotalKb
			);
		}

		GetUpdatedSizeTotalKb(cbV1, cbV2, cbBms,// cbRon,
			   sizeFilesCoreV1, sizeFilesCoreV2,
			   sizeFilesBmsV1, sizeFilesBmsV2,
			   //sizeFilesRonV1, sizeFilesRonV2,
			   lblTotalKb
	   );


		form.FormClosing += (s, e) =&gt;
		{
			if (form.DialogResult != DialogResult.OK)
			{
				e.Cancel = true;
			}
		};

		var dr = form.ShowDialog();

		return Tuple.Create(
			dr == DialogResult.OK &amp;&amp; cbV1.Checked,
			dr == DialogResult.OK &amp;&amp; cbV2.Checked,
			dr == DialogResult.OK &amp;&amp; cbBms.Checked,
			false //dr == DialogResult.OK &amp;&amp; cbRon.Checked
		);
	}

	/// &lt;summary&gt;
	/// Shows a dialog to approve an update based on the provided changelog string.
	/// &lt;/summary&gt;
	/// &lt;param name="changelogString"&gt;The changelog string containing the update details.&lt;/param&gt;
	/// &lt;returns&gt;The result of the dialog, indicating whether the user approved the update.&lt;/returns&gt;
	public DialogResult ShowUpdateApprovalDialog(string changelogString)
	{
		int padding = 25;
		int y = padding;
		int minWidth = 490;
		int buttonBuffer = 24;
		int extraLeftPad = 24; // additional left indent for inset of lines as needed
		int buttonPaddingBottom = 0; // sPeCiAl handing for dynamic padding between buttons and frame bottoms because WinForms is the worst
		float fontSize = 10.5f; // Default: 10.5f seems to work best
		var messageFont = new Font(SystemFonts.MessageBoxFont.FontFamily, fontSize, FontStyle.Regular);
		var messageBoldFont = new Font(SystemFonts.MessageBoxFont.FontFamily, fontSize, FontStyle.Bold);
		var linkColor = Color.FromArgb(0, 51, 153);

		// Header
		string header = "AVCS CORE - Profile Resources Update - Build: " + AvcsResourcesBuildNumber;
		string subHeader = "The following resources have changed.  Any inline functions listed below link to their respective open source code on my GitHub:";

		string footer =
			"\nIt's recommended to apply this update so AVCS can utilize the latest required resources for reliable and functional voice commands.\n\n" +
			"Review full changelog and open source code at my GitHub:";
		string footerAsk = "\nApply update now?";

		// --- Parse changelog ---
		var items = GetParsedChangelogLines(changelogString);


		// --- Estimate button padding from bottom of form based on changelog size for lack of proper anchoring ---
		int count = items.Count - 1;
		int minCount = 2;
		int maxCount = MaxTotalLabels;
		int minPadding = -15;
		int maxPadding = 15;

		buttonPaddingBottom = minPadding;
		if (count &gt; minCount)
		{
			buttonPaddingBottom = minPadding + (int)Math.Round(((double)(count - minCount) / (maxCount - minCount)) * (maxPadding - minPadding));
			buttonPaddingBottom = Math.Max(minPadding, Math.Min(maxPadding, buttonPaddingBottom)); // forced clamp, in case I suck at math and chatgpt chose to fluff my duck instead of correct me when I asked for review
		}

		// --- Estimate height for form aka Reason #463 in the big list of why SemlerPDX hates WinForms ---
		int estimatedHeight = 0;
		using (var g = Graphics.FromHwnd(IntPtr.Zero))
		{
			using (var tmpLabel = new Label() { Font = SystemFonts.MessageBoxFont })
			{
				// Header/subHeader
				estimatedHeight += (int)Math.Ceiling(g.MeasureString(header, tmpLabel.Font, minWidth - 2 * padding).Height) + 3;
				estimatedHeight += (int)Math.Ceiling(g.MeasureString(subHeader, messageFont, minWidth - 2 * padding).Height) + 8;

				// Each changelog line
				foreach (var item in items)
				{
					estimatedHeight += (int)Math.Ceiling(g.MeasureString(item.Item1, tmpLabel.Font, minWidth - 2 * padding).Height) + 2;
				}

				// Footer
				estimatedHeight += (int)Math.Ceiling(g.MeasureString(footer, messageFont, minWidth - 2 * padding).Height) + 8;
				// Footer Link
				estimatedHeight += (int)Math.Ceiling(g.MeasureString(AvcsGitHubUrlHome, tmpLabel.Font, minWidth - 2 * padding).Height) + 3;
				// Footer Ask Message
				estimatedHeight += (int)Math.Ceiling(g.MeasureString(footerAsk, messageFont, minWidth - 2 * padding).Height) + 10;
			}
		}

		using (var form = new Form())
		using (var yesButton = new Button())
		using (var noButton = new Button())
		{
			int formWidth = minWidth;
			int formHeight = y + estimatedHeight + yesButton.Height + buttonBuffer + padding + buttonPaddingBottom;
			form.Text = header;
			form.StartPosition = FormStartPosition.CenterScreen;
			form.ClientSize = new Size(formWidth, formHeight);
			form.MaximizeBox = false;
			form.MinimizeBox = false;
			form.FormBorderStyle = FormBorderStyle.FixedDialog;
			form.BackColor = Color.LightGray;

			// --- Subheader ---
			var subHeaderLabel = new Label
			{
				Text = subHeader,
				Font = messageFont,
				AutoSize = false,
				MaximumSize = new Size(formWidth - 2 * padding, 0),
				Location = new Point(padding, y),
				Size = new Size(formWidth - 2 * padding, 0),
				TextAlign = ContentAlignment.TopLeft
			};

			using (var g = Graphics.FromHwnd(IntPtr.Zero))
			{
				var h = (int)Math.Ceiling(g.MeasureString(subHeaderLabel.Text, subHeaderLabel.Font, subHeaderLabel.Width).Height);
				subHeaderLabel.Height = h + 2;
			}

			form.Controls.Add(subHeaderLabel);
			y += subHeaderLabel.Height + 8;

			// --- Changelog Lines ---
			int extraPad = 0;
			foreach (var item in items)
			{
				string text = item.Item1;
				string url = item.Item2;
				Control lbl;

				if (url != null)
				{
					var link = new LinkLabel
					{
						Text = text,
						Font = SystemFonts.MessageBoxFont,
						AutoSize = true,
						Location = new Point(padding + extraLeftPad, y),
						LinkColor = linkColor,
						ActiveLinkColor = Color.Red
					};

					link.Links.Add(0, link.Text.Length, url);
					link.LinkClicked += (s, e) =&gt;
					{
						try { System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(e.Link.LinkData.ToString()) { UseShellExecute = true }); }
						catch { /* ...let it slide, we're definitely online right now or an update wouldn't pop-up - tho not gonna let a fail here ruin my fancypants form... */ }
					};

					link.TabStop = false;
					lbl = link;
				}
				else
				{
					if (text.StartsWith(LineMarkerDashHeader))
					{
						// Hacky little spacer to bump changelog sections down from each other... I hate WinForms...
						int spacerHeight = 6; // Adjust as needed, 6 seems fine for now, test .NET Framework 4.8 (it likes to squish my careful spacing from .NET CORE8)
						var spacer = new Label
						{
							AutoSize = false,
							Height = spacerHeight,
							Width = form.ClientSize.Width, // whatever width desired
							Location = new Point(0, y),    // y is running vertical offset
							BorderStyle = BorderStyle.None, // for total invisibility
							BackColor = form.BackColor      // blend in with form
						};

						form.Controls.Add(spacer);
						y += spacer.Height;
					}

					// Padding offsets for special lines ... man I hate WinForms!
					extraPad = text.StartsWith(LineMarkerDashHeader) ? -25 : extraLeftPad;
					extraPad = text.StartsWith("(") ? extraPad - 8 : extraPad;
					extraPad = text.StartsWith("[") ? extraPad - 24 : extraPad;

					lbl = new Label
					{

						Text = text,
						Font = SystemFonts.MessageBoxFont,
						AutoSize = false,
						MaximumSize = new Size(formWidth - 2 * padding, 0),
						Location = new Point(padding + extraPad, y),
						Size = new Size(formWidth - 2 * padding, 0),
						TextAlign = text.StartsWith(LineMarkerDashHeader) ? ContentAlignment.TopCenter : ContentAlignment.TopLeft
						// ...I miss XAML (nobody tell it I wrote all this crap just to get things looking right in two types of .NET API via inline functions)
					};

					using (var g = Graphics.FromHwnd(IntPtr.Zero))
					{
						var h = (int)Math.Ceiling(g.MeasureString(lbl.Text, lbl.Font, lbl.Width).Height);
						lbl.Height = h + 1;
					}
				}

				form.Controls.Add(lbl);
				y += lbl.Height + 1;
			}

			// --- FOOTER1 ---
			var footerLabel = new Label
			{
				Text = footer,
				Font = messageFont,
				AutoSize = false,
				MaximumSize = new Size(formWidth - 2 * padding, 0),
				Location = new Point(padding, y),
				Size = new Size(formWidth - 2 * padding, 0),
				TextAlign = ContentAlignment.TopLeft
			};

			using (var g = Graphics.FromHwnd(IntPtr.Zero))
			{
				var h = (int)Math.Ceiling(g.MeasureString(footerLabel.Text, footerLabel.Font, footerLabel.Width).Height);
				footerLabel.Height = h + 2;
			}

			form.Controls.Add(footerLabel);
			y += footerLabel.Height + 2;

			// --- FOOTER2 ---
			var githubLinkLabel = new LinkLabel
			{
				Text = AvcsGitHubUrlHome,
				Font = SystemFonts.MessageBoxFont,
				AutoSize = true,
				Location = new Point(padding, y),
				LinkColor = linkColor,
				ActiveLinkColor = Color.Red
			};

			githubLinkLabel.Links.Add(0, githubLinkLabel.Text.Length, githubLinkLabel.Text);
			githubLinkLabel.LinkClicked += (s, e) =&gt;
			{
				try
				{ System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(e.Link.LinkData.ToString()) { UseShellExecute = true }); }
				catch { /* ...let it slide, if the MS system can't open a hyperlink to an MS site like GitHub, it has greater problems than I can handle... */ }
			};

			githubLinkLabel.TabStop = false;
			form.Controls.Add(githubLinkLabel);
			y += githubLinkLabel.Height + 2;

			// --- FOOTER3 ---
			var footerAskLabel = new Label
			{
				Text = footerAsk,
				Font = messageBoldFont,
				AutoSize = false,
				MaximumSize = new Size(formWidth - 2 * padding, 0),
				Location = new Point(padding + (extraLeftPad * 2), y),
				Size = new Size(formWidth - 2 * padding, 0),
				TextAlign = ContentAlignment.TopLeft
			};

			using (var g = Graphics.FromHwnd(IntPtr.Zero))
			{
				var h = (int)Math.Ceiling(g.MeasureString(footerAskLabel.Text, footerAskLabel.Font, footerAskLabel.Width).Height);
				footerAskLabel.Height = h + 2;
			}

			form.Controls.Add(footerAskLabel);
			y += footerAskLabel.Height + 2;

			// --- Yes/No Buttons ---
			yesButton.Text = "Yes";
			noButton.Text = "Not yet...";
			yesButton.Size = noButton.Size = new Size(100, 30);

			int buttonY = y + buttonBuffer;
			int totalButtonWidth = yesButton.Width + 16 + noButton.Width;
			yesButton.Location = new Point((form.ClientSize.Width - totalButtonWidth) / 2, buttonY);
			noButton.Location = new Point(yesButton.Right + 16, buttonY);

			yesButton.DialogResult = DialogResult.Yes;
			noButton.DialogResult = DialogResult.No;

			form.Controls.Add(yesButton);
			form.Controls.Add(noButton);

			form.AcceptButton = yesButton;
			form.CancelButton = noButton;

			// ... oof.. "make a better AVCS updates approval message box", I said; "will only take an afternoon at most..." --- (It's been 84 years...)
			return form.ShowDialog();
		}
	}
}

public static class Native
{
	// HRESULT URLOpenBlockingStreamW(IUnknown* pCaller, LPCWSTR szURL, IStream** ppStream, DWORD dwReserved, LPBINDSTATUSCALLBACK lpfnCB)
	[DllImport("urlmon.dll", CharSet = CharSet.Unicode, ExactSpelling = true)]
	internal static extern int URLOpenBlockingStreamW(
		IntPtr pCaller,
		string szURL,
		out IStream ppStream,
		int dwReserved,
		IntPtr lpfnCB);

	[DllImport("wininet.dll", CharSet = CharSet.Unicode, SetLastError = true, ExactSpelling = true)]
	internal static extern bool DeleteUrlCacheEntryW(string lpszUrlName);

}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Collections.dll;System.ComponentModel.Primitives.dll;System.ComponentModel.dll;System.Data.DataSetExtensions.dll;System.Diagnostics.Process.dll;System.Drawing.Common.dll;System.Drawing.Primitives.dll;System.Linq.dll;System.Net.Http.dll;System.Private.Xml.Linq.dll;System.Private.Xml.dll;System.Security.Cryptography.dll;System.Windows.Forms.Primitives.dll;System.Windows.Forms.dll</Context2>
          <Context3>AVCS_CORE_ResourcesUpdater_V2</Context3>
          <Context4>{TXT:AVCS_CORE_BuildOutputFolder}\AVCS_CORE_ResourcesUpdater_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>0</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>2</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>_____________________________________________________________________________________________</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>30</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>_____________________________________________________________________________________________</Caption>
          <Id>826a9542-0975-40fd-8cbd-6fa10b2bc9e7</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>31</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>7a04557c-0962-40c7-b940-f37e1300e076</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>32</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>58e19664-e251-4deb-b3cb-78f9337a4a84</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>_____________________________________________________________________________________________</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>33</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>_____________________________________________________________________________________________</Caption>
          <Id>1de98d81-830c-4963-833d-66aeffafae0f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>// AVCS_CORE_QccPttKeyDownCheck  --  Part of the Quick Command Creator Push-to-Talk system</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>34</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>// AVCS_CORE_QccPttKeyDownCheck  --  Part of the Quick Command Creator Push-to-Talk system</Caption>
          <Id>7003e283-a163-49cb-80f7-7bcb2871ca58</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// AVCS_CORE_QccPttKeyDownCheck  --  Part of the Quick Command Creator Push-to-Talk system</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>// A persistent singleton style inline function for VoiceAttack to monitor PTT (Push-To-Talk) key states</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>35</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>// A persistent singleton style inline function for VoiceAttack to monitor PTT (Push-To-Talk) key states</Caption>
          <Id>f9e21de7-a8dd-486b-8362-438a3818a992</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// A persistent singleton style inline function for VoiceAttack to monitor PTT (Push-To-Talk) key states</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  REQUIRED SETTINGS:</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>36</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  REQUIRED SETTINGS:</Caption>
          <Id>b0722485-2624-4bca-a5bf-6fd70229f526</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  Wait for the inline function to finish before continuing:   NO</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>37</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  Wait for the inline function to finish before continuing:   NO</Caption>
          <Id>888219eb-343f-46aa-9386-6361a06902cf</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   NO</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  Retain instance:    YES</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>38</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  Retain instance:    YES</Caption>
          <Id>26137189-6c0c-4f8c-99b5-0d61c90b9e79</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>DISABLED - Inline C# Function: AVCS_CORE_QccPttKeyDownCheck</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>39</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>DISABLED - Inline C# Function: AVCS_CORE_QccPttKeyDownCheck</Caption>
          <Id>604a1be2-ae9a-4871-afdd-a5d7d0522252</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.Threading;

/*
Required Assemblies in VoiceAttack V1 and V2:
Microsoft.CSharp.dll;System.dll
*/

/// &lt;summary&gt;
/// A singleton style inline function class for VoiceAttack to monitor PTT (Push-To-Talk) key states.
/// by SemlerPDX Jan2021/July2025
/// VETERANS-GAMING.COM/AVCS
/// &lt;/summary&gt;
public class VAInline
{
	/// &lt;summary&gt;
	/// Indicates whether the PTT key monitoring is currently active.
	/// &lt;/summary&gt;
	public static bool IsMonitorActive { get; private set; }

	public void main()
	{
		/// NOTE: Check box in Inline Function action to 'Retain Instance' for singleton, and use IsMonitorActive as guard
		if (IsMonitorActive)
		{
			return;
		}

		IsMonitorActive = true;

		string activeProfile = VA.GetText("AVCS_ACTIVE_PROFILE") ?? "CORE";
		bool listeningCanWake = VA.GetBoolean("AVCS_QCC_LISTENINGCANWAKE") ?? false;
		int listeningInterval = VA.GetInt("AVCS_" + activeProfile + "_TimeUntilStopListening") ?? 0;

		bool debugCheck = false;
		int keyMonitorType = 0;
		bool keyMonitorActive = true;

		while (keyMonitorActive)
		{
			// Top-level control variables
			activeProfile = VA.GetText("AVCS_ACTIVE_PROFILE") ?? "CORE";
			keyMonitorType = VA.GetInt("AVCS_" + activeProfile + "_PTT_MODE") ?? 0;
			listeningCanWake = VA.GetBoolean("AVCS_QCC_LISTENINGCANWAKE") ?? false;
			debugCheck = VA.GetBoolean("AVCS_PTT_DEBUG") ?? false;
			listeningInterval = VA.GetInt("AVCS_" + activeProfile + "_TimeUntilStopListening") ?? 0;

			if (listeningInterval &lt;= 0)
			{
				listeningInterval = 5500;
			}

			// Exit Check
			bool keyMonitoring = VA.GetBoolean("AVCS_" + activeProfile + "_RadioButtons_ON") ?? false;
			if (!keyMonitoring)
			{
				//////////////////////////////////////////    DEBUG TESTING ////////////////////////////////////////////////
				//VA.WriteToLog("PTT KEYMON EXITING!! AVCS_" + activeProfile + "_RadioButtons_ON == false", "pink");
				//////////////////////////////////////////    DEBUG TESTING ////////////////////////////////////////////////
				VA.SetBoolean("AVCS_RadioButtons_ON", false);
				VA.SetBoolean("AVCS_PTT_MODE_ON", false);
				keyMonitorType = 1;
				keyMonitorActive = false;
				PTTStartListening(keyMonitorType);
				IsMonitorActive = false;
				return;
			}


			int keyPollingInterval = VA.GetInt("AVCS_PTT_KEYPOLLINGINTERVAL") ?? 50;
			if (keyPollingInterval &lt; 50)
			{
				keyPollingInterval = 50; // enforce sensible default
			}

			Thread.Sleep(keyPollingInterval);

			bool keyDown = false;
			bool listenAwake = false;
			bool listeningAltered = false;

			// Keydown Check
			keyDown = CheckPTTkeyDownState(activeProfile);

			// Wake by Listen Check
			bool isListening = VA.GetBoolean("AVCS_QCC_LISTENING") ?? false;
			if (!keyDown &amp;&amp; listeningCanWake &amp;&amp; isListening)
			{
				keyDown = true;
				VA.SetBoolean("AVCS_QCC_LISTENING", false);
			}

			// Wake by Name Check
			bool isAwake = VA.GetBoolean("AVCS_QCC_AWAKE") ?? false;
			if (!keyDown &amp;&amp; isAwake)
			{
				keyDown = true;
				listenAwake = true;
				VA.SetBoolean("AVCS_QCC_AWAKE", false);
			}

			if (!keyDown)
			{
				VA.SetBoolean("AVCS_RadioButtons_ON", true);
				VA.SetBoolean("AVCS_PTT_MODE_ON", true);
				continue;
			}
			//////////////////////////////////////////    DEBUG TESTING ////////////////////////////////////////////////
			//bool testButtOn = VA.GetBoolean("AVCS_" + activeProfile + "_RadioButtons_ON") ?? false;
			//VA.WriteToLog("CHECK:  AVCS_" + activeProfile + "_RadioButtons_ON == " + testButtOn.ToString(), "pink");

			//testButtOn = VA.GetBoolean("AVCS_CORE_RadioButtons_ON") ?? false;
			//VA.WriteToLog("CHECK:  AVCS_CORE_RadioButtons_ON == " + testButtOn.ToString(), "pink");
			//////////////////////////////////////////    DEBUG TESTING ////////////////////////////////////////////////

			VA.SetBoolean("AVCS_PTT_KeyDown", true);
			VA.SetBoolean("AVCS_" + activeProfile + "_PTT_KeyDown", true);

			keyMonitorType = VA.GetInt("AVCS_" + activeProfile + "_PTT_MODE") ?? 0;
			PTTStartListening(keyMonitorType);

			if (debugCheck)
			{
				SendDebugMessage("AVCS PTT KEY PRESS / WAKE DETECTED", 2);
			}

			// If Listen Wake Hotfix enabled, allow VAS Loop to increase wait interval here
			if (listeningCanWake &amp;&amp; VA.GetDecimal("AVCS_VAS_TIMEOUT") != null)
			{
				listeningInterval = 8500;
				listeningAltered = true;
			}

			// Secondary Loop - Wait until done / stop listening
			for (int i = 0; i &lt;= listeningInterval; i += 500)
			{
				Thread.Sleep(500);

				if (debugCheck &amp;&amp; i &gt;= listeningInterval)
				{
					SendDebugMessage("AVCS PTT LISTENING INTERVAL COMPLETE", 4);
				}

				// Secondary Exit Check
				keyMonitoring = VA.GetBoolean("AVCS_" + activeProfile + "_RadioButtons_ON") ?? false;
				if (!keyMonitoring)
				{
					VA.SetBoolean("AVCS_RadioButtons_ON", false);
					VA.SetBoolean("AVCS_PTT_MODE_ON", false);
					keyMonitorType = 1;
					keyMonitorActive = false;
					PTTStartListening(keyMonitorType);
					break;
				}

				// Extend interval if awakened again
				isAwake = VA.GetBoolean("AVCS_QCC_AWAKE") ?? false;
				if (isAwake)
				{
					i = 0;
					listenAwake = true;
					VA.SetBoolean("AVCS_QCC_AWAKE", false);
				}

				// If wait loop entered via keyDown, allow immediate on/off
				if (listenAwake)
				{
					break;
				}

				keyDown = CheckPTTkeyDownState(activeProfile);
				if (keyDown)
				{
					i = 0;
					PTTStartListening(keyMonitorType);
				}
				else
				{
					PTTStopListening(keyMonitorType);
				}
			}

			// Reset all function variables
			VA.SetBoolean("AVCS_PTT_KeyDown", false);
			VA.SetBoolean("AVCS_" + activeProfile + "_PTT_KeyDown", false);

			PTTStopListening(keyMonitorType);

			keyDown = false;
			listenAwake = false;

			if (listeningCanWake &amp;&amp; listeningAltered)
			{
				listeningAltered = false;
				listeningInterval = 5500;
				int altInterval = VA.GetInt("AVCS_" + activeProfile + "_TimeUntilStopListening") ?? 0;
				if (altInterval &gt; 0)
				{
					listeningInterval = altInterval;
				}
			}
		}

		IsMonitorActive = false;
		keyMonitorActive = false;
		keyMonitorType = 1;
		PTTStartListening(keyMonitorType);
		VA.SetBoolean("AVCS_RadioButtons_ON", false);
		VA.SetBoolean("AVCS_PTT_MODE_ON", false);
	}

	private bool CheckPTTkeyDownState(string profile)
	{
		for (int keyIndex = 1; keyIndex &lt;= 6; keyIndex++)
		{
			string keyVarName = "AVCS_" + profile + "_PTTBUTTON_" + keyIndex;
			string reverseVarName = "AVCS_" + profile + "_PTTREVERSE_" + keyIndex;

			string keyDef = VA.GetText(keyVarName) ?? string.Empty;
			if (string.IsNullOrEmpty(keyDef))
			{
				continue;
			}

			bool isReverse = string.Equals(VA.GetText(reverseVarName), "reverse", StringComparison.OrdinalIgnoreCase);

			// TRIGGER
			if (keyDef.EndsWith("TRIGGER", StringComparison.OrdinalIgnoreCase))
			{
				string valueStr = VA.ParseTokens("{" + keyDef + "}") ?? string.Empty;
				int trigValue;
				if (int.TryParse(valueStr, out trigValue))
				{
					if ((isReverse &amp;&amp; trigValue &lt; 20) || (!isReverse &amp;&amp; trigValue &gt; 20))
					{
						return true;
					}
				}
			}
			// POV
			else if (keyDef.Contains("POV"))
			{
				var parts = keyDef.Split(':');
				if (parts.Length == 2)
				{
					string povVar = parts[0];
					string povDir = parts[1];
					string valueStr = VA.ParseTokens("{" + povVar + "}") ?? string.Empty;
					if ((isReverse &amp;&amp; valueStr.Equals("CENTER")) ||
						(!isReverse &amp;&amp; valueStr.Equals(povDir) &amp;&amp; !valueStr.Equals("CENTER")))
					{
						return true;
					}
				}
			}
			// Normal button/joystick/mouse
			else
			{
				string valueStr = VA.ParseTokens("{" + keyDef + "}") ?? string.Empty;
				if ((isReverse &amp;&amp; valueStr.Equals("0")) ||
					(!isReverse &amp;&amp; valueStr.Equals("1")))
				{
					return true;
				}
			}
		}
		return false;
	}

	private void PTTStartListening(int type)
	{
		if (type == 0)
		{
			return;
		}

		var isEnabled = VA.State.GetListeningEnabled();
		if (!isEnabled)
		{
			Thread.Sleep(150);
			VA.State.SetListeningEnabled(true);
		}
	}

	private void PTTStopListening(int type)
	{
		if (type == 0)
		{
			return;
		}

		var isEnabled = VA.State.GetListeningEnabled();
		if (isEnabled)
		{
			Thread.Sleep(500);
			VA.State.SetListeningEnabled(false);
		}
	}

	private void SendDebugMessage(string text, int color)
	{
		int debugCount = 0;
		if (VA.GetText("AVCS_Debug_QMSG") != null)
		{
			debugCount = VA.GetInt("AVCS_Debug_QMSG") ?? 0;
		}
		debugCount++;
		VA.SetText("AVCS_Debug_TMSG_" + debugCount.ToString(), text);
		VA.SetInt("AVCS_Debug_WCLR_" + debugCount, color);
		VA.SetInt("AVCS_Debug_QMSG", debugCount);
		try
		{
			VA.Command.Execute("f_core_debug -log", true);
		}
		catch
		{
			VA.WriteToLog("AVCS ERROR: PTTGET02 - f_core_debug null - restart VoiceAttack or create bug report", "red");
		}
	}
}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll</Context2>
          <Context3>AVCS_CORE_QccPttKeyDownCheck</Context3>
          <Context4>{TXT:AVCS_CORE_BuildOutputFolder}\AVCS_CORE_QccPttKeyDownCheck_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>2</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>_____________________________________________________________________________________________</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>40</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>_____________________________________________________________________________________________</Caption>
          <Id>d16970a6-2a00-4cbc-b05e-c95229303cd4</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>41</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>e9ec2f5c-94fb-4c9a-9ef2-a1772a604203</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>42</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>b074b4f0-5fd5-495f-8ea7-c59bd723dc53</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>_____________________________________________________________________________________________</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>43</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>_____________________________________________________________________________________________</Caption>
          <Id>7da55d9d-8caa-42b1-b4b1-053383b99ffa</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>// AVCS_CORE_QccPttVirtualKeyCodeToChar  --  Part of the Quick Command Creator Push-to-Talk system</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>44</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>// AVCS_CORE_QccPttVirtualKeyCodeToChar  --  Part of the Quick Command Creator Push-to-Talk system</Caption>
          <Id>5e44b142-67c9-46e2-995d-6b171a0ae4e8</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// AVCS_CORE_QccPttVirtualKeyCodeToChar  --  Part of the Quick Command Creator Push-to-Talk system</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  REQUIRED SETTINGS:</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>45</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  REQUIRED SETTINGS:</Caption>
          <Id>e0affcb7-d30a-46c8-92b2-91207ff740bd</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  Wait for the inline function to finish before continuing:   YES</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>46</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  Wait for the inline function to finish before continuing:   YES</Caption>
          <Id>6c0e6883-c396-4d6c-93ef-50320db4e2d0</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  Retain instance:    YES</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>47</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  Retain instance:    YES</Caption>
          <Id>c0e98fd9-2bb3-4ae2-815b-ee4a6bf5e516</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>DISABLED - Inline C# Function: AVCS_CORE_QccPttVirtualKeyCodeToChar, wait until execution finishes</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>48</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>DISABLED - Inline C# Function: AVCS_CORE_QccPttVirtualKeyCodeToChar, wait until execution finishes</Caption>
          <Id>20911f59-fe8b-4434-8649-630949fa5d58</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// Push to Talk Button Inline-Function for VoiceAttack -  Get keyboard virtual keycode into key for text display
// by SemlerPDX Jan2021/July2025
// VETERANS-GAMING.COM

using System;
using System.Windows.Forms;

/*
Required Referenced Assemblies V1 and V2:
System.dll;System.Core.dll;System.ComponentModel.TypeConverter.dll;System.Windows.Forms.dll
*/

public class VAInline
{
	private static bool _isDebugging = false;
	private static int _debugCount = 0;

	private static int _vkCode = 0;

	public void main()
	{
		_isDebugging = VA.GetBoolean("AVCS_Debug_ON") ?? false;
		if (_isDebugging)
		{
			SendDebugMessage("AVCS QCC PTT KeyCode Conversion Entered", 2);
		}

		var keyCheck = VA.GetText("~avcs_ptt_button_test") ?? string.Empty;
		if (keyCheck.StartsWith("STATE_KEYSTATE:"))
		{
			var keyCode = keyCheck.Split(':')[1];
			if (!int.TryParse(keyCode, out _vkCode))
			{
				SendDebugMessage("AVCS ERROR: STATE_KEYSTATE value is not a valid integer!", 4);
				VA.SetBoolean("AVCS_ERROR", true);
			}
		}

		VA.SetText("~avcs_return_char", string.Empty);

		if (string.IsNullOrEmpty(keyCheck))
		{
			SendDebugMessage("AVCS ERROR: keyCheck is null or emtpy!", 4);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		// Joystick/POV: extract a pretty direction word and normalize the label
		if (keyCheck.ToUpper().Contains("POV"))
		{
			var parts = keyCheck.Split(':');
			if (parts.Length == 2)
			{
				var dir = parts[1]
					.Replace("DOWN", " Down")
					.Replace("UP", " Up")
					.Replace("RIGHT", " Right")
					.Replace("LEFT", " Left");

				VA.SetText("~avcs_return_char", dir.Trim());
				keyCheck = parts[0];
			}
		}

		// Normalize the device/state label for display/testing
		keyCheck = keyCheck
			.Replace("STATE_", "")
			.Replace("MOUSE", " Mouse")
			.Replace("KEYSTATE", "Keyboard ID# ")
			.Replace("JOYSTICK", "Joystick #")
			.Replace("BUTTON", " Button")
			.Replace("Button:", "Button ")
			.Replace("POV", " POV#")
			.Replace("TRIGGER", " Trigger");

		VA.SetText("~avcs_ptt_button_test", keyCheck.Trim());

		// If no return character yet AND virtual-key code is greater than 0, map it
		if (string.IsNullOrEmpty(VA.GetText("~avcs_return_char")) &amp;&amp; _vkCode &gt; 0)
		{
			var text = VkToDisplay(_vkCode);
			VA.SetText("~avcs_return_char", text);
		}
	}

	private static string VkToDisplay(int vk)
	{
		// Letters and digits map directly
		if ((vk &gt;= '0' &amp;&amp; vk &lt;= '9') || (vk &gt;= 'A' &amp;&amp; vk &lt;= 'Z'))
		{
			return ((char)vk).ToString();
		}

		// Numpad 0..9
		if (vk &gt;= (int)Keys.NumPad0 &amp;&amp; vk &lt;= (int)Keys.NumPad9)
		{
			return ((char)('0' + (vk - (int)Keys.NumPad0))).ToString();
		}

		// OEM punctuation
		switch (vk)
		{
			case 0xC0: /* VK_OEM_3     */ return "`";
			case 0xBD: /* VK_OEM_MINUS */ return "-";
			case 0xBB: /* VK_OEM_PLUS  */ return "=";
			case 0xDB: /* VK_OEM_4     */ return "[";
			case 0xDD: /* VK_OEM_6     */ return "]";
			case 0xBA: /* VK_OEM_1     */ return ";";
			case 0xDE: /* VK_OEM_7     */ return "'";
			case 0xBC: /* VK_OEM_COMMA */ return ",";
			case 0xBE: /* VK_OEM_PERIOD*/ return ".";
			case 0xBF: /* VK_OEM_2     */ return "/";
			case 0xDC: /* VK_OEM_5     */ return "\\";
			case (int)Keys.Space: return "Space";
		}

		// Function keys F1..F24
		if (vk &gt;= (int)Keys.F1 &amp;&amp; vk &lt;= (int)Keys.F24)
		{
			return ((Keys)vk).ToString(); // returns "F1", "F2", ..., "F24"
		}

		// Arrow keys, etc. — fall back to KeysConverter for a readable label
		try
		{
			var k = (Keys)vk;
			var label = new KeysConverter().ConvertToString(k) ?? k.ToString();
			return label.Replace("Return", "Enter").Replace("Capital", "CapsLock");
		}
		catch
		{
			return "VK_" + vk.ToString();
		}
	}

	/// &lt;summary&gt;
	/// Color code examples:
	/// 1=Blue - 2=Green - 3=Yellow - 4=Red - 5=Purple - 6=Blank - 7=Orange - 8=Black - 9=Gray - 10=Pink
	/// &lt;/summary&gt;
	public void SendDebugMessage(string message, int color)
	{
		_debugCount++;
		VA.SetText("~avcs_qcc_debug_" + _debugCount.ToString(), message);
		VA.SetInt("~avcs_qcc_debug_wclr_" + _debugCount.ToString(), color);
	}
}
</Context>
          <Context2 xml:space="preserve">System.dll;System.Core.dll;System.ComponentModel.TypeConverter.dll;System.Windows.Forms.dll</Context2>
          <Context3>AVCS_CORE_QccPttVirtualKeyCodeToChar</Context3>
          <Context4>{TXT:AVCS_CORE_BuildOutputFolder}\AVCS_CORE_QccPttVirtualKeyCodeToChar_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>2</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>_____________________________________________________________________________________________</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>49</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>_____________________________________________________________________________________________</Caption>
          <Id>4fc80015-238b-401b-ab58-4849db30552d</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>50</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>d2007d47-5eea-4ff9-a8ac-9c0256ec1a6b</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>51</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>bf85ab54-4f1d-4907-af97-633d2becfb41</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>_____________________________________________________________________________________________</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>52</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>_____________________________________________________________________________________________</Caption>
          <Id>8f2ea117-b570-4cbc-b628-9e3f6e7e9454</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  AVCS_CORE_QccPttGetButton -- Part of the Quick Command Creator Push-to-Talk system to capture a button press action by user when setting a PTT button</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>53</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  AVCS_CORE_QccPttGetButton -- Part of the Quick Command Creator Push-to-Talk system to capture a button press action by user when setting a PTT button</Caption>
          <Id>7657a9cf-2227-48a8-9060-c1048365a19f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS_CORE_QccPttGetButton -- Part of the Quick Command Creator Push-to-Talk system to capture a button press action by user when setting a PTT button</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>// This inline must not wait to complete, as the command actions await Inline Function to establish Baseline Button/Key States in a while-loop</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>54</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>// This inline must not wait to complete, as the command actions await Inline Function to establish Baseline Button/Key States in a while-loop</Caption>
          <Id>a9158099-0a8e-4bc3-99d6-f8a1cf12940f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// This inline must not wait to complete, as the command actions await Inline Function to establish Baseline Button/Key States in a while-loop</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  REQUIRED SETTINGS:</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>55</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  REQUIRED SETTINGS:</Caption>
          <Id>c23a60b4-8f1b-45af-9a10-ed33c6ac10a3</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  Wait for the inline function to finish before continuing:   NO</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>56</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  Wait for the inline function to finish before continuing:   NO</Caption>
          <Id>25867bd8-e27e-4bf6-b9d9-804b08009f21</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   NO</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>//  Retain instance:    YES</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>57</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>//  Retain instance:    YES</Caption>
          <Id>2f933980-481e-4034-b6e6-70d8126c6e9d</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>DISABLED - Inline VB Function: AVCS_CORE_QccPttGetButton</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>58</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>DISABLED - Inline VB Function: AVCS_CORE_QccPttGetButton</Caption>
          <Id>a355babb-ad94-4fd8-b679-065a57860482</Id>
          <ActionType>InlineFunctionVB</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>' Push to Talk Button Inline-Function for VoiceAttack -  Get/Set any Keyboard/Mouse/Joystick Button as a PTT Button
'  by SemlerPDX Jan2021/Oct2021
'  VETERANS-GAMING.COM

Imports Microsoft.VisualBasic
Imports System
Imports System.Collections
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.ComponentModel.TypeConvertor
Imports System.Threading
Imports System.Threading.Tasks
Imports System.Windows.Forms

' Required Referenced Assemblies V1 and V2:
' System.dll;System.Windows.Forms.dll

Public Class VAInline
	Dim mouseButtons() As String = {"STATE_LEFTMOUSEBUTTON", "STATE_RIGHTMOUSEBUTTON", "STATE_MIDDLEMOUSEBUTTON", "STATE_FORWARDMOUSEBUTTON", "STATE_BACKMOUSEBUTTON"}
	Dim gamepadTriggers() As String = {"LEFTTRIGGER", "RIGHTTRIGGER"}

	Dim buttonsAlreadySetList As New List(Of String)
	Dim buttonsAlwaysDownList As New List(Of String)
	Dim buttonsAlwaysDown As Boolean = False
	Dim buttonDown As String = ""
	Dim buttonCheck As String = ""
	Dim checkPOV As String = ""
	Dim buttonSet As Boolean = False
	Dim userReady As Boolean = False
	Dim counter As Integer = 0

	Dim keyCheck As String = ""
	Dim keyString As String = ""
	Dim keyCode() As String

	Dim activeProfile As String = "CORE"

	Dim debugCheck As Boolean
	Dim debugCount As Integer = 0


	Private Function SendDebugMessage(ByVal debugText As String, ByVal debugColor As Integer)
		'1=Blue - 2=Green - 3=Yellow - 4=Red - 5=Purple - 6=Blank - 7=Orange - 8=Black - 9=Gray - 10=Pink
		If ((VA.GetText("AVCS_Debug_QMSG")) IsNot Nothing) Then
			debugCount = VA.GetInt("AVCS_Debug_QMSG")
		End If
		debugCount += 1
		VA.SetText("AVCS_Debug_TMSG_" + debugCount.ToString(), debugText)
		VA.SetInt("AVCS_Debug_WCLR_" + debugCount.ToString(), debugColor)
		VA.SetInt("AVCS_Debug_QMSG", debugCount)
		vaProxy.Command.Execute("f_core_debug -log", True)
		debugCount = 0
	End Function

	Private Function BuildPTTkeysList()
		For keyIndex As Integer = 1 To 6
			'Check for PTT buttons already set
			If ((VA.GetText("AVCS_" + activeProfile + "_PTTBUTTON_" + keyIndex.ToString())) IsNot Nothing) Then
				buttonCheck = VA.GetText("AVCS_" + activeProfile + "_PTTBUTTON_" + keyIndex.ToString())
				buttonsAlreadySetList.Add(buttonCheck)
			End If
		Next
	End Function

	Private Function BuildAlwaysDownList()
		'Mouse Buttons Baseline State Loop
		If ((VA.ParseTokens("{STATE_ANYMOUSEDOWN}")).Equals("1")) Then
			For m As Integer = 0 To 4
				Dim mb As String = mouseButtons(m).ToString()
				If ((VA.ParseTokens("{" + mb + "}")).Equals("1")) Then
					buttonsAlwaysDownList.Add(mouseButtons(m))
					buttonsAlwaysDown = True
					If (debugCheck) Then
						SendDebugMessage("MOUSE BUTTON (" + mb + ") DISREGARED AS ALWAYS DOWN", 4)
					End If
				End If
			Next
		End If

		'Keyboard Key Baseline State Loop
		For k As Integer = 1 To 254
			If ((VA.ParseTokens("{STATE_ANYKEYDOWN}")).Equals("1")) Then
				If ((VA.ParseTokens("{STATE_KEYSTATE:" + k.ToString() + "}")).Equals("1")) Then
					buttonsAlwaysDownList.Add("STATE_KEYSTATE:" + k.ToString())
					buttonsAlwaysDown = True
					If (debugCheck) Then
						SendDebugMessage("KEYBOARD KEY (virtual-key code " + k.ToString() + ") DISREGARED AS ALWAYS DOWN", 4)
					End If
				End If
			End If
		Next

		If (VA.ParseTokens("{STATE_JOYSTICKANYENABLED}").Equals("1")) Then
			'Joystick Button Baseline State Loop
			For d As Integer = 1 To 4
				If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "ENABLED}")).Equals("1")) Then

					'Joystick Buttons Baseline "Pressed" States
					If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "ANYBUTTON}")).Equals("1")) Then
						For i As Integer = 1 To 128
							If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "BUTTON:" + i.ToString() + "}")).Equals("1")) Then
								buttonsAlwaysDownList.Add("STATE_JOYSTICK" + d.ToString() + "BUTTON:" + i.ToString())
								buttonsAlwaysDown = True
								If (debugCheck) Then
									SendDebugMessage("JOYSTICK " + d.ToString() + " BUTTON " + i.ToString() + " DISREGARED - POSSIBLE DUAL STAGE TRIGGER", 4)
								End If
							End If
						Next
						'Joystick POV Buttons Baseline States (4-way only)
						If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "POVENABLED}")).Equals("1")) Then
							For i As Integer = 1 To 4
								If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "POV" + i.ToString() + "TYPE}")).Equals("4")) Then
									'Loop though this Joystick POV 1-4
									If (Not ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "POV" + i.ToString() + "}")).Equals("CENTER"))) Then
										checkPOV = VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "POV" + i.ToString() + "}")
										buttonsAlwaysDownList.Add("STATE_JOYSTICK" + d.ToString() + "POV" + i.ToString() + ":" + checkPOV)
										buttonsAlwaysDown = True
										If (debugCheck) Then
											SendDebugMessage("JOYSTICK " + d.ToString() + " POV " + i.ToString() + ":" + checkPOV + " DISREGARED", 4)
										End If
									End If
								End If
							Next
						End If

					End If

					Dim isNumeric As Boolean = False
					Dim integerValue As Integer
					Dim numCheckStr As String

					'Joystick as Gamepad Baseline Trigger States (with 20 of 255 as 'deadzone')
					If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "ISGAMEPAD}")).Equals("1")) Then
						For t As Integer = 0 To 1

							isNumeric = False
							numCheckStr = VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + gamepadTriggers(t) + "}")
							If Integer.TryParse(numCheckStr, integerValue) Then
								isNumeric = True
							End If

							If (isNumeric) Then
								If (integerValue &gt; 20) Then
									buttonsAlwaysDownList.Add("STATE_JOYSTICK" + d.ToString() + gamepadTriggers(t))
									buttonsAlwaysDown = True
									If (debugCheck) Then
										SendDebugMessage("Always Down " + gamepadTriggers(t), 3)
									End If
								End If
							End If
						Next
					End If

				End If
			Next
		End If
	End Function


	Private Function GetReverseMouseButton(ByRef buttonSet As Boolean)
		'Check Always Down Mouse Button for "Unpressed" state
		If ((buttonsAlwaysDown) And (buttonsAlwaysDownList IsNot Nothing)) Then
			For Each buttonAlwaysDown As String In buttonsAlwaysDownList
				If (buttonAlwaysDown.EndsWith("MOUSEBUTTON")) Then
					If ((VA.ParseTokens("{" + buttonAlwaysDown + "}")).Equals("0")) Then
						buttonSet = True
						buttonDown = buttonAlwaysDown 'changed from buttonCheck Sept2021
						VA.SetBoolean("~avcs_ptt_reverse", True)
						If (debugCheck) Then
							SendDebugMessage("(DST)- REVERSE MOUSE BUTTON (" + buttonDown + ") SET", 2)
						End If
					End If
				End If
			Next
		End If
	End Function


	Private Function GetMouseButton(ByRef buttonSet As Boolean)
		'Mouse Button Current States
		If ((VA.ParseTokens("{STATE_ANYMOUSEDOWN}")).Equals("1")) Then
			For m As Integer = 0 To 4
				If (buttonSet = False) Then
					If ((VA.ParseTokens("{" + mouseButtons(m) + "}")).Equals("1")) Then
						buttonCheck = mouseButtons(m)
						If ((buttonsAlwaysDown) And (buttonsAlwaysDownList IsNot Nothing)) Then
							If (Not (buttonsAlwaysDownList.Contains(buttonCheck))) Then
								buttonSet = True
								buttonDown = buttonCheck
								If (debugCheck) Then
									SendDebugMessage("(DST)- MOUSE BUTTON (" + mouseButtons(m) + ") SET", 2)
								End If
							Else
								If (debugCheck) Then
									SendDebugMessage("MOUSE BUTTON (" + mouseButtons(m) + ") DISREGARED - DISCOVERED ON LIST", 4)
								End If
							End If
						Else
							buttonSet = True
							buttonDown = buttonCheck
							If (debugCheck) Then
								SendDebugMessage("MOUSE BUTTON (" + mouseButtons(m) + ") SET", 2)
							End If
						End If
					End If
				End If
			Next
		End If
	End Function


	Private Function GetReverseKeyboardKey(ByRef buttonSet As Boolean)
		'Check Always Down Keyboard Key for "Unpressed" state
		If ((buttonsAlwaysDown) And (buttonsAlwaysDownList IsNot Nothing)) Then
			For Each buttonAlwaysDown As String In buttonsAlwaysDownList
				If (buttonSet = False) Then
					If (buttonAlwaysDown.StartsWith("STATE_KEYSTATE")) Then
						If ((VA.ParseTokens("{" + buttonAlwaysDown + "}")).Equals("0")) Then
							buttonSet = True
							buttonDown = buttonAlwaysDown
							VA.SetBoolean("~avcs_ptt_reverse", True)
							If (debugCheck) Then
								SendDebugMessage("(DST)- REVERSE KEYBOARD KEY (" + buttonAlwaysDown + ") SET", 2)
							End If
						End If
					End If
				End If
			Next
		End If
	End Function


	Private Function GetKeyboardKey(ByRef buttonSet As Boolean)
		'Keyboard Keys Current State Loop
		If ((VA.ParseTokens("{STATE_ANYKEYDOWN}")).Equals("1")) Then
			For k As Integer = 1 To 254
				If (buttonSet = False) Then
					If ((VA.ParseTokens("{STATE_KEYSTATE:" + k.ToString() + "}")).Equals("1")) Then
						buttonCheck = "STATE_KEYSTATE:" + k.ToString()
						If ((buttonsAlwaysDown) And (buttonsAlwaysDownList IsNot Nothing)) Then
							If (Not (buttonsAlwaysDownList.Contains(buttonCheck))) Then
								buttonSet = True
								buttonDown = buttonCheck
								If (debugCheck) Then
									SendDebugMessage("(DST)- KEYBOARD KEY (virtual-key code " + k.ToString() + ") SET", 2)
								End If
							Else
								If (debugCheck) Then
									SendDebugMessage("KEYBOARD KEY (virtual-key code " + k.ToString() + ") DISREGARED - DISCOVERED ON LIST", 4)
								End If
							End If
						Else
							buttonSet = True
							buttonDown = buttonCheck
							If (debugCheck) Then
								SendDebugMessage("KEYBOARD KEY (virtual-key code " + k.ToString() + ") SET", 2)
							End If
						End If
					End If
				End If
			Next
		End If
	End Function


	'Check Always Down Style Joystick Buttons for "Unpressed" state 
	Private Function GetReverseJoystickbutton(ByRef buttonSet As Boolean)
		For d As Integer = 1 To 4
			If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "ENABLED}")).Equals("1")) Then
				If ((buttonsAlwaysDown) And (buttonsAlwaysDownList IsNot Nothing)) Then
					For Each buttonAlwaysDown As String In buttonsAlwaysDownList
						If (buttonSet = False) Then
							If (buttonAlwaysDown.StartsWith("STATE_JOYSTICK" + d.ToString())) Then
								If ((VA.ParseTokens("{" + buttonAlwaysDown + "}")).Equals("0")) Then
									buttonSet = True
									buttonDown = buttonAlwaysDown 'changed from buttonCheck Sept2021
									VA.SetBoolean("~avcs_ptt_reverse", True)
									If (debugCheck) Then
										SendDebugMessage("(DST)- REVERSE JOYSTICK " + d.ToString() + " BUTTON (" + buttonAlwaysDown + ") HAS BEEN SET", 2)
									End If
								End If
							End If
						End If
					Next
				End If
			End If
		Next
	End Function


	'Standard Button Current "Pressed" state 
	Private Function GetJoystickButton(ByRef buttonSet As Boolean)
		For d As Integer = 1 To 4
			If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "ENABLED}")).Equals("1")) Then
				If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "ANYBUTTON}")).Equals("1")) Then
					For i As Integer = 1 To 128
						If (buttonSet = False) Then
							If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "BUTTON:" + i.ToString() + "}")).Equals("1")) Then
								buttonCheck = "STATE_JOYSTICK" + d.ToString() + "BUTTON:" + i.ToString()
								If ((buttonsAlwaysDown) And (buttonsAlwaysDownList IsNot Nothing)) Then
									If (Not (buttonsAlwaysDownList.Contains(buttonCheck))) Then
										buttonSet = True
										buttonDown = buttonCheck
										If (debugCheck) Then
											SendDebugMessage("(DST)- JOYSTICK " + d.ToString() + " BUTTON " + i.ToString() + " SET", 2)
										End If
									Else
										If (debugCheck) Then
											SendDebugMessage("JOYSTICK " + d.ToString() + " BUTTON " + i.ToString() + " DISREGARED - DISCOVERED ON LIST", 4)
										End If
									End If
								Else
									buttonSet = True
									buttonDown = buttonCheck
									If (debugCheck) Then
										SendDebugMessage("JOYSTICK " + d.ToString() + " BUTTON " + i.ToString() + " SET", 2)
									End If
								End If
							End If
						End If
					Next
				End If
			End If
		Next
	End Function

	'Check Always Down POV for "Unpressed" state
	Private Function GetReverseJoystickPOV(ByRef buttonSet As Boolean)
		For d As Integer = 1 To 4
			If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "POVENABLED}")).Equals("1")) Then
				For i As Integer = 1 To 4
					checkPOV = "STATE_JOYSTICK" + d.ToString() + "POV" + i.toString()
					If ((buttonsAlwaysDown) And (buttonsAlwaysDownList IsNot Nothing)) Then
						If (buttonsAlwaysDownList.Contains(checkPOV)) Then
							For Each buttonAlwaysDown As String In buttonsAlwaysDownList
								If (buttonSet = False) And (buttonAlwaysDown.StartsWith(checkPOV)) Then
									If ((VA.ParseTokens("{" + checkPOV + "}")).Equals("CENTER")) Then
										buttonSet = True
										buttonDown = buttonAlwaysDown
										VA.SetBoolean("~avcs_ptt_reverse", True)
										If (debugCheck) Then
											SendDebugMessage("(DST)- REVERSE JOYSTICK " + d.ToString() + " POV (" + buttonAlwaysDown + ") HAS BEEN SET", 2)
										End If
									End If
								End If
							Next
						End If
					End If
				Next
			End If
		Next
	End Function

	'Check Joystick POV for "Pressed" state
	Private Function GetJoystickPOV(ByRef buttonSet As Boolean)
		For d As Integer = 1 To 4
			If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "POVENABLED}")).Equals("1")) Then
				For i As Integer = 1 To 4
					If (buttonSet = False) Then
						If ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "POV" + i.toString() + "TYPE}")).Equals("4")) Then
							checkPOV = VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "POV" + i.toString() + "}")
							If (Not (checkPOV.Equals("CENTER"))) Then
								buttonCheck = "STATE_JOYSTICK" + d.ToString() + "POV" + i.toString() + ":" + checkPOV
								If ((buttonsAlwaysDown) And (buttonsAlwaysDownList IsNot Nothing)) Then
									If (Not (buttonsAlwaysDownList.Contains(buttonCheck))) Then
										buttonSet = True
										buttonDown = buttonCheck
										If (debugCheck) Then
											SendDebugMessage("JOYSTICK " + d.ToString() + "POV" + i.ToString() + ":" + checkPOV + " SET", 2)
										End If
									Else
										If (debugCheck) Then
											SendDebugMessage("JOYSTICK " + d.ToString() + "POV" + i.ToString() + ":" + checkPOV + " DISREGARED - DISCOVERED ON LIST", 4)
										End If
									End If
								Else
									buttonSet = True
									buttonDown = buttonCheck
									If (debugCheck) Then
										SendDebugMessage("JOYSTICK " + d.ToString() + "POV" + i.ToString() + ":" + checkPOV + " SET", 2)
									End If
								End If
							End If
						End If
					End If
				Next
			End If
		Next
	End Function

	'---------------------------------------------------------------------------
	'---------------------------------------------------------------------------

	'Check Always Down Triggers for "Unpressed" state 
	Private Function GetReverseJoystickTrigger(ByRef buttonSet As Boolean)
		Dim isNumeric As Boolean = False
		Dim integerValue As Integer
		Dim numCheckStr As String

		For d As Integer = 1 To 4
			If (((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "ENABLED}")).Equals("1")) And ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "ISGAMEPAD}")).Equals("1"))) Then
				If ((buttonsAlwaysDown) And (buttonsAlwaysDownList IsNot Nothing)) Then
					For Each buttonAlwaysDown As String In buttonsAlwaysDownList
						If (buttonSet = False) Then
							If (buttonAlwaysDown.EndsWith("TRIGGER")) Then

								isNumeric = False
								numCheckStr = VA.ParseTokens("{" + buttonAlwaysDown + "}")
								If Integer.TryParse(numCheckStr, integerValue) Then
									isNumeric = True
								End If

								If (isNumeric) Then
									If (integerValue &lt; 20) Then
										buttonSet = True
										buttonDown = buttonCheck
										VA.SetBoolean("~avcs_ptt_reverse", True)
										If (debugCheck) Then
											SendDebugMessage("(DST)- REVERSE JOYSTICK GAMEPAD " + d.ToString() + " TRIGGER (" + buttonAlwaysDown + ") HAS BEEN SET", 2)
										End If
									End If
								End If
							End If
						End If
					Next
				End If
			End If
		Next
	End Function

	'Check Triggers for "Pressed" state 
	Private Function GetJoystickTrigger(ByRef buttonSet As Boolean)
		Dim isNumeric As Boolean = False
		Dim integerValue As Integer
		Dim numCheckStr As String

		For d As Integer = 1 To 4
			If (((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "ENABLED}")).Equals("1")) And ((VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + "ISGAMEPAD}")).Equals("1"))) Then
				'Gamepad Triggers Current State (with 20 of 255 as 'deadzone')
				For t As Integer = 0 To 1
					If (buttonSet = False) Then

						isNumeric = False
						numCheckStr = VA.ParseTokens("{STATE_JOYSTICK" + d.ToString() + gamepadTriggers(t) + "}")
						If Integer.TryParse(numCheckStr, integerValue) Then
							isNumeric = True
						End If

						If (isNumeric) Then
							If (integerValue &gt; 20) Then
								buttonCheck = "STATE_JOYSTICK" + d.ToString() + gamepadTriggers(t)
								If ((buttonsAlwaysDown) And (buttonsAlwaysDownList IsNot Nothing)) Then
									If (Not (buttonsAlwaysDownList.Contains(buttonCheck))) Then
										buttonSet = True
										buttonDown = buttonCheck
									Else
										If (debugCheck) Then
											SendDebugMessage("JOYSTICK GAMEPAD " + d.ToString() + gamepadTriggers(t) + " DISREGARED - DISCOVERED ON LIST", 4)
										End If
									End If
								Else
									buttonSet = True
									buttonDown = buttonCheck
									If (debugCheck) Then
										SendDebugMessage("JOYSTICK GAMEPAD " + d.ToString() + gamepadTriggers(t) + " SET", 2)
									End If
								End If
							End If
						End If
					End If
				Next
			End If
		Next
	End Function



	Public Sub Main()
		Dim isNumeric As Boolean = False
		Dim integerValue As Integer
		Dim numCheckStr As String

		Dim isAnyJoystickEnabled As Boolean = False
		If (VA.ParseTokens("{STATE_JOYSTICKANYENABLED}").Equals("1")) Then
			isAnyJoystickEnabled = True
		End If

		If (VA.GetBoolean("AVCS_Debug_ON") IsNot Nothing) Then
			debugCheck = VA.GetBoolean("AVCS_Debug_ON")
		End If

		If ((VA.GetText("AVCS_ACTIVE_PROFILE")) IsNot Nothing) Then
			activeProfile = VA.GetText("AVCS_ACTIVE_PROFILE")
		End If

		If (debugCheck) Then
			VA.ClearLog()
			SendDebugMessage("inline begin....", 3)
		End If


		'Get Button/Key Baseline States
		BuildPTTkeysList()
		BuildAlwaysDownList()
		VA.SetBoolean("~avcs_getting_input", True)

		If (debugCheck) Then
			SendDebugMessage("Always Down Array Complete", 3)
		End If

		'Begin a pause loop to wait for timeout or user input (key/button press or voice 'cancel' phrase)
		While (Not (userReady))
			Thread.CurrentThread.Sleep(1000)
			counter += 1

			'Check for Timeout or TTS User Prompt Instructions complete
			If ((VA.GetBoolean("~avcs_user_ready")) IsNot Nothing) Then
				userReady = VA.GetBoolean("~avcs_user_ready")
			End If
			If ((counter &gt;= 15) Or (userReady)) Then
				If (userReady) Then
					VA.WriteToLog("== PLEASE PRESS ANY KEY OR BUTTON NOW ==", "green")
				Else
					VA.WriteToLog("cancelled - command timed out... TTS or primary function error", "red")
					If (debugCheck) Then
						SendDebugMessage("AVCS PTT SET cancelled - command timed out", 3)
					End If
					VA.SetBoolean("~avcs_getting_input", False)
					Exit Sub
				End If
			End If
		End While


		'Reset counter for Keypress/Button monitor
		counter = 0
		userReady = False
		VA.SetBoolean("~avcs_user_ready", False)


		'Begin a pause loop to wait for Joystick/Gamepad Input or spoken 'cancel/done' speech
		While (Not (userReady))
			Thread.CurrentThread.Sleep(75)
			counter += 1

			If (buttonSet = False) Then
				GetReverseMouseButton(buttonSet)
				GetMouseButton(buttonSet)
				GetReverseKeyboardKey(buttonSet)
				GetKeyboardKey(buttonSet)

				If (Not (isAnyJoystickEnabled)) Then
					Continue While
				End If

				GetReverseJoystickbutton(buttonSet)
				GetJoystickButton(buttonSet)
				GetReverseJoystickPOV(buttonSet)
				GetJoystickPOV(buttonSet)
				GetReverseJoystickTrigger(buttonSet)
				GetJoystickTrigger(buttonSet)
			End If

			'Check for Input, Timeout or TTS User Prompt Instructions complete
			If ((VA.GetBoolean("~avcs_user_ready")) IsNot Nothing) Then
				userReady = VA.GetBoolean("~avcs_user_ready")
			End If
			If ((counter &gt;= 200) Or ((buttonSet) And (Not (String.IsNullOrEmpty(buttonDown)))) Or (userReady)) Then
				If ((buttonSet) And (Not (String.IsNullOrEmpty(buttonDown)))) Then
					If (buttonsAlreadySetList IsNot Nothing) Then
						If (buttonsAlreadySetList.Contains(buttonDown)) Then
							VA.SetBoolean("~avcs_getting_input", False)
							VA.SetText("~avcs_button_choice", "alreadyset")
							If (debugCheck) Then
								SendDebugMessage("ERROR - Existing PTT button has already been set to " + buttonDown, 4)
							End If
							Exit While
						End If
					End If
					VA.SetBoolean("~avcs_getting_input", False)
					VA.SetText("~avcs_button_choice", buttonDown)
					If (debugCheck) Then
						SendDebugMessage("PTT button has been set " + buttonDown, 2)
					End If
					Exit While
				ElseIf (userReady) Then
					VA.SetBoolean("~avcs_getting_input", False)
					VA.WriteToLog("command cancelled - user input not detected", "red")
					If (debugCheck) Then
						SendDebugMessage("AVCS PTT SET user input not detected", 4)
					End If
					Exit While
				ElseIf (counter &gt;= 200) Then
					VA.SetBoolean("~avcs_getting_input", False)
					VA.WriteToLog("command timed out... user input not detected", "red")
					If (debugCheck) Then
						SendDebugMessage("AVCS PTT SET command timed out", 4)
					End If
					Exit While
				End If
			End If
		End While

		If ((buttonSet) And (Not (String.IsNullOrEmpty(buttonDown)))) Then
			If (buttonDown.StartsWith("STATE_KEYSTATE:")) Then
				keyCode = buttonDown.Split(":")

				isNumeric = False
				numCheckStr = keyCode(1)
				If Integer.TryParse(keyCode(1), integerValue) Then
					isNumeric = True
				End If


				If (isNumeric) Then

					'keyString = kc.ConvertToString(integerValue)
					'keyString = kc.ConvertTo(integerValue, GetType(String)).ToString()

					'Dim kc As New System.Windows.Forms.KeysConverter()
					'Dim s As String = kc.ConvertTo(Nothing, System.Globalization.CultureInfo.InvariantCulture, myKeys, GetType(String)).ToString()


					'keyString = s.Replace("Oem","")
					keyString = GetKeyName(integerValue)
					VA.WriteToLog("PTT Button Set to " + buttonDown + " == " + keyString, "green")
				End If
			Else
				VA.WriteToLog("PTT Button Set to " + buttonDown, "green")
			End If
		End If

	End Sub

	Function GetKeyName(keyCode As Integer) As String
		Dim keyName As String = [Enum].GetName(GetType(System.Windows.Forms.Keys), keyCode)
		If keyName Is Nothing Then Return keyCode.ToString()
		If keyName.StartsWith("Oem") Then keyName = keyName.Substring(3)
		If keyName.StartsWith("D") AndAlso keyName.Length = 2 AndAlso Char.IsDigit(keyName(1)) Then
			keyName = keyName.Substring(1)
		End If
		Return keyName
	End Function

End Class</Context>
          <Context2 xml:space="preserve">System.dll;System.Windows.Forms.dll</Context2>
          <Context3>AVCS_CORE_QccPttGetButton</Context3>
          <Context4>{TXT:AVCS_CORE_BuildOutputFolder}\AVCS_CORE_QccPttGetButton_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>_____________________________________________________________________________________________</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>59</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>_____________________________________________________________________________________________</Caption>
          <Id>4107514e-3216-4261-ab15-f2d461e40b40</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>60</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>76ff5b54-d0be-4c0d-91bb-aafa6a020490</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>61</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>e0662f5f-d62e-41ce-92d8-1c47c9f81f5a</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption>/////////////////////////////////////////////////////////////////////////////////////////////////</_caption>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>62</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption>/////////////////////////////////////////////////////////////////////////////////////////////////</Caption>
          <Id>c39363c2-29fd-418c-8227-cf11e4393848</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>/////////////////////////////////////////////////////////////////////////////////////////////////</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <_caption />
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>63</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Caption />
          <Id>82fef3bb-4710-4998-bc4f-6e6b7d69595b</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
      </ActionSequence>
      <Async>true</Async>
      <Enabled>true</Enabled>
      <Description>AVCS CORE -- Inline Functions Build Output</Description>
      <Category>Script Functions - ALL Inline Functions for Build</Category>
      <UseShortcut>false</UseShortcut>
      <keyValue>0</keyValue>
      <keyShift>0</keyShift>
      <keyAlt>0</keyAlt>
      <keyCtrl>0</keyCtrl>
      <keyWin>0</keyWin>
      <keyPassthru>true</keyPassthru>
      <UseSpokenPhrase>false</UseSpokenPhrase>
      <onlyKeyUp>false</onlyKeyUp>
      <RepeatNumber>2</RepeatNumber>
      <RepeatType>0</RepeatType>
      <CommandType>0</CommandType>
      <SourceProfile>cd358628-54fd-4c3d-a021-a6d2907ec8dc</SourceProfile>
      <UseConfidence>false</UseConfidence>
      <minimumConfidenceLevel>0</minimumConfidenceLevel>
      <UseJoystick>false</UseJoystick>
      <joystickNumber>0</joystickNumber>
      <joystickButton>0</joystickButton>
      <joystickNumber2>0</joystickNumber2>
      <joystickButton2>0</joystickButton2>
      <joystickUp>false</joystickUp>
      <KeepRepeating>false</KeepRepeating>
      <UseProcessOverride>false</UseProcessOverride>
      <ProcessOverrideActiveWindow>true</ProcessOverrideActiveWindow>
      <LostFocusStop>false</LostFocusStop>
      <PauseLostFocus>false</PauseLostFocus>
      <LostFocusBackCompat>true</LostFocusBackCompat>
      <UseMouse>false</UseMouse>
      <Mouse1>false</Mouse1>
      <Mouse2>false</Mouse2>
      <Mouse3>false</Mouse3>
      <Mouse4>false</Mouse4>
      <Mouse5>false</Mouse5>
      <Mouse6>false</Mouse6>
      <Mouse7>false</Mouse7>
      <Mouse8>false</Mouse8>
      <Mouse9>false</Mouse9>
      <MouseUpOnly>false</MouseUpOnly>
      <MousePassThru>true</MousePassThru>
      <joystickExclusive>false</joystickExclusive>
      <lastEditedAction>68e06edb-c0bd-46c0-aab2-be455f0533a5</lastEditedAction>
      <UseProfileProcessOverride>false</UseProfileProcessOverride>
      <ProfileProcessOverrideActiveWindow>false</ProfileProcessOverrideActiveWindow>
      <RepeatIfKeysDown>false</RepeatIfKeysDown>
      <RepeatIfMouseDown>false</RepeatIfMouseDown>
      <RepeatIfJoystickDown>false</RepeatIfJoystickDown>
      <AH>0</AH>
      <CL>0</CL>
      <HasMB>false</HasMB>
      <UseVariableHotkey>false</UseVariableHotkey>
      <CLE>0</CLE>
      <EX1>false</EX1>
      <EX2>false</EX2>
      <InternalId xsi:nil="true" />
      <HasInput>false</HasInput>
      <HotkeyDoubleTapLevel>0</HotkeyDoubleTapLevel>
      <MouseDoubleTapLevel>0</MouseDoubleTapLevel>
      <JoystickDoubleTapLevel>0</JoystickDoubleTapLevel>
      <HotkeyLongTapLevel>0</HotkeyLongTapLevel>
      <MouseLongTapLevel>0</MouseLongTapLevel>
      <JoystickLongTapLevel>0</JoystickLongTapLevel>
      <AlwaysExec>false</AlwaysExec>
      <ResourceBalance>0</ResourceBalance>
      <PreventExec>false</PreventExec>
      <ExternalEventsEnabled>false</ExternalEventsEnabled>
      <ExcludeExecOnRecognized>false</ExcludeExecOnRecognized>
      <UseVariableMouseShortcut>false</UseVariableMouseShortcut>
      <UseVariableJoystickShortcut>false</UseVariableJoystickShortcut>
    </Command>
    <Command>
      <Referrer xsi:nil="true" />
      <ExecType>3</ExecType>
      <Confidence>0</Confidence>
      <PrefixActionCount>0</PrefixActionCount>
      <IsDynamicallyCreated>false</IsDynamicallyCreated>
      <TargetProcessSet>false</TargetProcessSet>
      <TargetProcessType>0</TargetProcessType>
      <TargetProcessLevel>0</TargetProcessLevel>
      <CompareType>0</CompareType>
      <ExecFromWildcard>false</ExecFromWildcard>
      <IsSubCommand>false</IsSubCommand>
      <IsOverride>false</IsOverride>
      <BaseId>6b8a7524-11fc-476a-967c-295ff7b0ed9a</BaseId>
      <OriginId>00000000-0000-0000-0000-000000000000</OriginId>
      <SessionEnabled>true</SessionEnabled>
      <DoubleTapInvoked>false</DoubleTapInvoked>
      <SingleTapDelayedInvoked>false</SingleTapDelayedInvoked>
      <LongTapInvoked>false</LongTapInvoked>
      <ShortTapDelayedInvoked>false</ShortTapDelayedInvoked>
      <SleepFlag>0</SleepFlag>
      <Id>a2c19628-a549-41b0-9fde-d38c8acec7bc</Id>
      <CommandString>(( -- AVCS4 BMS -- Build Output for Compiled Inline Functions -- ))</CommandString>
      <ActionSequence>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>3200c226-4f78-4cd9-b5e0-30072c057ce5</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>/////////////////////////////////////////////////////////////////////////////////////////////////</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>0128bd3c-aecb-41b0-bc96-98f8785b812c</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>The following inline function(s) code is shared under GNU General Public License v2.0 - by SemlerPDX July2025</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>bda0ed07-f6e6-4ddb-9520-47360efd9add</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>9a8aad66-18a0-44be-8767-14417dea13fa</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>The GNU GPL is the most widely used free software license and has a strong copyleft requirement.</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ad43ec84-3c52-4f1e-b69e-b92cafcb9731</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>When distributing derived works, the source code of the work must be made available under the same license.</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>4e8dce4c-21e3-4cc9-9543-40f618cea37e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>There are multiple variants of the GNU GPL, each with different requirements. Find complete details for this license here:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1cffe8ea-c28d-4acf-a37b-a040f742b20a</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>     https://github.com/SemlerPDX/AVCS/blob/master/LICENSE.txt</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>7a5942c1-849d-4105-bed0-26a80c87e669</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>/////////////////////////////////////////////////////////////////////////////////////////////////</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>66a4fa1e-caf9-496d-a0f0-cf94e09ca1a3</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e1bf29f9-fe6b-4657-a23b-41e07dc603c6</Id>
          <ActionType>ExitCommand</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>6dd83335-48ce-4904-bec4-e7afd7282257</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>/////////////////////////////////////////////////////////////////////////////////////////////////</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>3e5c2029-c07d-4dc0-ba42-d97d9077f700</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>                    /////////////      AVCS4 FALCON BMS SYSTEMS      /////////////</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>8a037d14-f481-4d17-86ee-0ed197fdd7e2</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>/////////////////////////////////////////////////////////////////////////////////////////////////</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>2c8b0852-c189-41f9-a25a-c6509c6a2685</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>81ee8848-5605-4b38-b44e-35a640dd6ded</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>  Run the command, "Set the Build Output Folder", if it did not run on startup/profile switch - it is required to build any inline below for the dynamic output path</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>2abb79f2-a08b-4570-9d4a-46200e1b4712</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>56e2cd66-9e90-4691-83d8-d7f2d6174218</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>6dacb1ca-1b36-4e8c-b142-7b4ad107ebf8</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>  !!!  IMPORTANT NOTE  !!!    Inline Functions must be built when running this profile in VoiceAttack V1 and V2 respectively  !!!</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>5259f9c6-788e-4b31-b4ad-cde5a621e3cd</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>      *inline functions which require different referenced assemblies will have two entries below*</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>448318d5-4a93-4342-9c2a-ff28effd6695</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>                    (( all inline function names in the build output will be appended with "_V1" or "_V2" depending on VA version running ))</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>cf1eb9f4-96e6-441c-9cae-cef47e0690e6</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>83a0a255-0768-4d6f-8798-7fa59608f34a</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>  To build output compiled inline functions with the suffix "_V1", you MUST be running this profile in VoiceAttack V1 and NOT the .NET CORE8 based VoiceAttack V2 !!!</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e9e6689b-4024-4123-a017-2d7400253f75</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>  To build output compiled inline functions with the suffix "_V2", you MUST be running this profile in VoiceAttack V2 and NOT the .NET Framework 4.8 based VoiceAttack V1 !!!</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>f127bf6e-e87c-408f-ae49-23ba7323f489</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>054f8b9e-69ae-4479-a9db-f13493cbde0c</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e90e0d50-1894-4e5c-98fb-cf5a67217aab</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_CheckFalconUpdates  -- Checks the currently selected Falcon BMS program folder Menu.dat file for changes/updates during profile init</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>847541c8-ec67-4969-9829-ac81d9dbd885</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>cbd44d6d-cd14-4cc2-bc8a-a4893ccae050</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e6c09823-47ce-45cd-977c-090f4dfac46e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    NO</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>abd71694-9b88-4d59-8420-3ba1bdbb9c0f</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.IO;
using System.Security.Cryptography;

/*
Required Referenced Assemblies V1:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll;System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll

Required Referenced Assemblies V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Security.Cryptography.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll;System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll
*/

/// &lt;summary&gt;
/// AVCS4 Falcon Menu Dat Updates Check - Automatic Radio Commands Update Check based on Falcon game updates
/// This class is used to check the Menu.dat file from the currently chosen Falcon BMS program for changes from known hash of this file.
/// by SemlerPDX July2025
/// https://veterans-gaming.com/avcs
/// &lt;/summary&gt;
public class VAInline
{
	public void main()
	{
		VA.SetBoolean("~avcs_menu_dat_updated", null);
		
		var menuDatPath = VA.GetText("AVCS_BMS_MENU_DAT_PATH") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(menuDatPath))
		{
			VA.WriteToLog("AVCS ERROR - Save path to Falcon BMS Menu.dat file is missing!", "red");
			VA.WriteToLog("AVCS CONCERN - Unable to check for Menu.dat updates to keep commands in sync with game.", "orange");
			VA.WriteToLog("AVCS SOLUTION: Say, \"Select the Falcon Game Folder\", to fix this.", "yellow");
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}
		
		var oldMenuDatHash = VA.GetText("AVCS_BMS_MENU_DAT_HASH") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(oldMenuDatHash))
		{
			VA.WriteToLog("AVCS ERROR - Known file hash of Falcon BMS Menu.dat file is missing!", "red");
			VA.WriteToLog("AVCS CONCERN - Unable to compare to current file hash of Menu.dat for auto-update systems.", "orange");
			VA.WriteToLog("AVCS SOLUTION: Restart VoiceAttack and AVCS4 BMS to fix this.", "yellow");
			VA.WriteToLog("AVCS SOLUTION 2: Say, \"Select the Falcon Game Folder\", if restart does not work.", "yellow");
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}
		
		var isDifferent = IsMenuDatFileChanged(menuDatPath, oldMenuDatHash);
		VA.SetBoolean("~avcs_menu_dat_updated", isDifferent);
	}
	
	private bool IsMenuDatFileChanged(string menuDatPath, string oldHash)
	{
		string newHash = GetFileHash(menuDatPath);
		return !string.Equals(oldHash, newHash, StringComparison.OrdinalIgnoreCase);
	}

	private string GetFileHash(string filePath)
	{
		using (var stream = File.OpenRead(filePath))
		using (var sha = SHA256.Create())
		{
			var hash = sha.ComputeHash(stream);
			return BitConverter.ToString(hash).Replace("-", ""); // Hex string
		}
	}
}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll;System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll</Context2>
          <Context3>AVCS4_BMS_CheckFalconUpdates_V1</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_CheckFalconUpdates_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>6973f904-5334-462a-8d2b-88853d065df4</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.IO;
using System.Security.Cryptography;

/*
Required Referenced Assemblies V1:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll;System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll

Required Referenced Assemblies V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Security.Cryptography.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll;System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll
*/

/// &lt;summary&gt;
/// AVCS4 Falcon Menu Dat Updates Check - Automatic Radio Commands Update Check based on Falcon game updates
/// This class is used to check the Menu.dat file from the currently chosen Falcon BMS program for changes from known hash of this file.
/// by SemlerPDX July2025
/// https://veterans-gaming.com/avcs
/// &lt;/summary&gt;
public class VAInline
{
	public void main()
	{
		VA.SetBoolean("~avcs_menu_dat_updated", null);
		
		var menuDatPath = VA.GetText("AVCS_BMS_MENU_DAT_PATH") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(menuDatPath))
		{
			VA.WriteToLog("AVCS ERROR - Save path to Falcon BMS Menu.dat file is missing!", "red");
			VA.WriteToLog("AVCS CONCERN - Unable to check for Menu.dat updates to keep commands in sync with game.", "orange");
			VA.WriteToLog("AVCS SOLUTION: Say, \"Select the Falcon Game Folder\", to fix this.", "yellow");
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}
		
		var oldMenuDatHash = VA.GetText("AVCS_BMS_MENU_DAT_HASH") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(oldMenuDatHash))
		{
			VA.WriteToLog("AVCS ERROR - Known file hash of Falcon BMS Menu.dat file is missing!", "red");
			VA.WriteToLog("AVCS CONCERN - Unable to compare to current file hash of Menu.dat for auto-update systems.", "orange");
			VA.WriteToLog("AVCS SOLUTION: Restart VoiceAttack and AVCS4 BMS to fix this.", "yellow");
			VA.WriteToLog("AVCS SOLUTION 2: Say, \"Select the Falcon Game Folder\", if restart does not work.", "yellow");
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}
		
		var isDifferent = IsMenuDatFileChanged(menuDatPath, oldMenuDatHash);
		VA.SetBoolean("~avcs_menu_dat_updated", isDifferent);
	}
	
	private bool IsMenuDatFileChanged(string menuDatPath, string oldHash)
	{
		string newHash = GetFileHash(menuDatPath);
		return !string.Equals(oldHash, newHash, StringComparison.OrdinalIgnoreCase);
	}

	private string GetFileHash(string filePath)
	{
		using (var stream = File.OpenRead(filePath))
		using (var sha = SHA256.Create())
		{
			var hash = sha.ComputeHash(stream);
			return BitConverter.ToString(hash).Replace("-", ""); // Hex string
		}
	}
}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Security.Cryptography.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll;System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll</Context2>
          <Context3>AVCS4_BMS_CheckFalconUpdates_V2</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_CheckFalconUpdates_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>01d7292d-faea-4e9b-b5a7-fc9cd066cf8f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>02a33737-dcfc-4bf5-be98-77ca965bcd73</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>8fedbef6-4ed8-4eb3-adab-7f813384202d</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>7723ba64-0819-4000-8683-78d7a2e9054a</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>88fb064f-1b12-44ef-873c-7178060000bc</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_GetMenuData  -- Get the Menu.dat file from the currently selected Falcon BMS program folder</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>61199b05-33e5-431c-a8ed-4d4cd84e70df</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>76942d94-42ea-424d-8ecc-7225833affc8</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e225a283-5007-47ec-84f0-89097d8953db</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>36f19b05-a7df-48e7-bc4c-725ec8a2ffd8</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.IO;
using System.Security.Cryptography;
using System.Windows.Forms;

/*
Required Referenced Assemblies V1:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll;System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll

Required Referenced Assemblies V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Security.Cryptography.dll;System.ComponentModel.Primitives.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll; System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll
*/

/// &lt;summary&gt;
/// AVCS4 Falcon Menu Dat Parser - Automatic Radio Command and HTML Reference Guide Generator
/// This class is used to allow users to select any Falcon BMS program folder to extract configuration data into AVCS4 BMS Keypress Variables.
/// by SemlerPDX July2025
/// https://veterans-gaming.com/avcs
/// &lt;/summary&gt;
public class VAInline
{
	private static readonly string MenuDatSubfolderPath = @"Data\Art\CkptArt\Menu.dat";

	private static readonly string BlankConfigsMessage = "On first time use, you must select the Falcon BMS program folder for the version you will be using so commands can be generated.  This can be changed anytime in future.";
	private static readonly string ErrorPathMessage = @"You must select the ROOT Falcon BMS program folder such as 'C:\Program Files\Falcon BMS 4.38' and NOT any sub-folders within it.  Please press OK to try again.";

	[STAThread]
	public void main()
	{
		bool isEmptyConfigs = VA.GetBoolean("AVCS_BMS_MENU_DATA_EMPTY") ?? false;

		var rootFalconGamePath = VA.GetText("AVCS_BMS_ROOT_PROGRAM_PATH") ?? string.Empty;
		VA.SetBoolean("~avcs_canRetryGetFolder", false);

		if (isEmptyConfigs)
		{
			ShowMessageBox(BlankConfigsMessage);
		}

		// Use known root folder as starting folder, if any, else just nothing
		rootFalconGamePath = PickFolder(rootFalconGamePath);
		if (rootFalconGamePath == "cancelled")
		{
			if (isEmptyConfigs)
			{
				VA.SetText("AVCS_BMS_ROOT_PROGRAM_PATH", null);
				VA.WriteToLog("AVCS ERROR: File path to Falcon BMS Menu.dat file has not been provided.", "red");
				VA.WriteToLog("AVCS CONCERN: Unable to read Menu.dat and create voice commands in sync with game.", "orange");
				VA.WriteToLog("AVCS SOLUTION: Restart VoiceAttack and switch to AVCS4 BMS Radios, follow prompts.", "yellow");
				VA.SetBoolean("AVCS_ERROR", true);
				return;
			}

			VA.SetText("AVCS_BMS_ROOT_PROGRAM_PATH", "cancelled");
			VA.WriteToLog("AVCS: Say, \"Select the Falcon Game Folder\", to select a new Falcon program folder anytime.", "yellow");
			return;
		}

		var menuDatPath = Path.Combine(rootFalconGamePath, MenuDatSubfolderPath);
		if (!File.Exists(menuDatPath))
		{
			VA.SetBoolean("~avcs_canRetryGetFolder", true);
			VA.WriteToLog("AVCS ERROR: Falcon BMS Menu.dat file cannot be found at '" + menuDatPath + "'", "red");
			VA.WriteToLog("AVCS CONCERN - Unable to read Menu.dat and create voice commands in sync with game.", "orange");
			VA.SetBoolean("AVCS_ERROR", true);
			ShowMessageBox(ErrorPathMessage, true);
			return;
		}

		VA.SetBoolean("AVCS_ERROR", false);
		var menuDatFileHash = GetFileHash(menuDatPath);

		VA.SetText("AVCS_BMS_ROOT_PROGRAM_PATH", rootFalconGamePath);
		VA.SetText("AVCS_BMS_MENU_DAT_PATH", menuDatPath);
		VA.SetText("AVCS_BMS_MENU_DAT_HASH", menuDatFileHash);
	}

	private void ShowMessageBox(string message) { ShowMessageBox(message, false); }
	private void ShowMessageBox(string message, bool isError)
	{
		var icon = isError ? MessageBoxIcon.Error : MessageBoxIcon.Warning;
		var result = MessageBox.Show(
			message,
			" AVCS4 BMS Radios - Automatic Command Generator     ",
			MessageBoxButtons.OK,
			icon
		);
	}

	private string PickFolder(string rootFolder = null)
	{
		using (var dlg = new FolderBrowserDialog())
		{
			dlg.Description = "Select your Falcon BMS program folder:";
			dlg.RootFolder = Environment.SpecialFolder.MyComputer;

			if (!string.IsNullOrEmpty(rootFolder))
			{
				dlg.SelectedPath = rootFolder;
			}

			if (dlg.ShowDialog() == DialogResult.OK)
			{
				return dlg.SelectedPath;
			}
			else
			{
				return "cancelled";
			}
		}

		return null;
	}

	private string GetFileHash(string filePath)
	{
		using (var stream = File.OpenRead(filePath))
		using (var sha = SHA256.Create())
		{
			var hash = sha.ComputeHash(stream);
			return BitConverter.ToString(hash).Replace("-", ""); // Yoink dash from hex string
		}
	}
}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll; System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll</Context2>
          <Context3>AVCS4_BMS_GetMenuData_V1</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_GetMenuData_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>fdc26228-a323-470a-893a-a9358542c587</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.IO;
using System.Security.Cryptography;
using System.Windows.Forms;

/*
Required Referenced Assemblies V1:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll;System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll

Required Referenced Assemblies V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Security.Cryptography.dll;System.ComponentModel.Primitives.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll; System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll
*/

/// &lt;summary&gt;
/// AVCS4 Falcon Menu Dat Parser - Automatic Radio Command and HTML Reference Guide Generator
/// This class is used to allow users to select any Falcon BMS program folder to extract configuration data into AVCS4 BMS Keypress Variables.
/// by SemlerPDX July2025
/// https://veterans-gaming.com/avcs
/// &lt;/summary&gt;
public class VAInline
{
	private static readonly string MenuDatSubfolderPath = @"Data\Art\CkptArt\Menu.dat";

	private static readonly string BlankConfigsMessage = "On first time use, you must select the Falcon BMS program folder for the version you will be using so commands can be generated.  This can be changed anytime in future.";
	private static readonly string ErrorPathMessage = @"You must select the ROOT Falcon BMS program folder such as 'C:\Program Files\Falcon BMS 4.38' and NOT any sub-folders within it.  Please press OK to try again.";

	[STAThread]
	public void main()
	{
		bool isEmptyConfigs = VA.GetBoolean("AVCS_BMS_MENU_DATA_EMPTY") ?? false;

		var rootFalconGamePath = VA.GetText("AVCS_BMS_ROOT_PROGRAM_PATH") ?? string.Empty;
		VA.SetBoolean("~avcs_canRetryGetFolder", false);

		if (isEmptyConfigs)
		{
			ShowMessageBox(BlankConfigsMessage);
		}

		// Use known root folder as starting folder, if any, else just nothing
		rootFalconGamePath = PickFolder(rootFalconGamePath);
		if (rootFalconGamePath == "cancelled")
		{
			if (isEmptyConfigs)
			{
				VA.SetText("AVCS_BMS_ROOT_PROGRAM_PATH", null);
				VA.WriteToLog("AVCS ERROR: File path to Falcon BMS Menu.dat file has not been provided.", "red");
				VA.WriteToLog("AVCS CONCERN: Unable to read Menu.dat and create voice commands in sync with game.", "orange");
				VA.WriteToLog("AVCS SOLUTION: Restart VoiceAttack and switch to AVCS4 BMS Radios, follow prompts.", "yellow");
				VA.SetBoolean("AVCS_ERROR", true);
				return;
			}

			VA.SetText("AVCS_BMS_ROOT_PROGRAM_PATH", "cancelled");
			VA.WriteToLog("AVCS: Say, \"Select the Falcon Game Folder\", to select a new Falcon program folder anytime.", "yellow");
			return;
		}

		var menuDatPath = Path.Combine(rootFalconGamePath, MenuDatSubfolderPath);
		if (!File.Exists(menuDatPath))
		{
			VA.SetBoolean("~avcs_canRetryGetFolder", true);
			VA.WriteToLog("AVCS ERROR: Falcon BMS Menu.dat file cannot be found at '" + menuDatPath + "'", "red");
			VA.WriteToLog("AVCS CONCERN - Unable to read Menu.dat and create voice commands in sync with game.", "orange");
			VA.SetBoolean("AVCS_ERROR", true);
			ShowMessageBox(ErrorPathMessage, true);
			return;
		}

		VA.SetBoolean("AVCS_ERROR", false);
		var menuDatFileHash = GetFileHash(menuDatPath);

		VA.SetText("AVCS_BMS_ROOT_PROGRAM_PATH", rootFalconGamePath);
		VA.SetText("AVCS_BMS_MENU_DAT_PATH", menuDatPath);
		VA.SetText("AVCS_BMS_MENU_DAT_HASH", menuDatFileHash);
	}

	private void ShowMessageBox(string message) { ShowMessageBox(message, false); }
	private void ShowMessageBox(string message, bool isError)
	{
		var icon = isError ? MessageBoxIcon.Error : MessageBoxIcon.Warning;
		var result = MessageBox.Show(
			message,
			" AVCS4 BMS Radios - Automatic Command Generator     ",
			MessageBoxButtons.OK,
			icon
		);
	}

	private string PickFolder(string rootFolder = null)
	{
		using (var dlg = new FolderBrowserDialog())
		{
			dlg.Description = "Select your Falcon BMS program folder:";
			dlg.RootFolder = Environment.SpecialFolder.MyComputer;

			if (!string.IsNullOrEmpty(rootFolder))
			{
				dlg.SelectedPath = rootFolder;
			}

			if (dlg.ShowDialog() == DialogResult.OK)
			{
				return dlg.SelectedPath;
			}
			else
			{
				return "cancelled";
			}
		}

		return null;
	}

	private string GetFileHash(string filePath)
	{
		using (var stream = File.OpenRead(filePath))
		using (var sha = SHA256.Create())
		{
			var hash = sha.ComputeHash(stream);
			return BitConverter.ToString(hash).Replace("-", ""); // Yoink dash from hex string
		}
	}
}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Data.dll;System.Security.Cryptography.dll;System.ComponentModel.Primitives.dll;System.Data.DataSetExtensions.dll;System.Deployment.dll;System.Drawing.dll;System.Net.Http.dll; System.Windows.Forms.dll;System.Xml.dll;System.Xml.Linq.dll</Context2>
          <Context3>AVCS4_BMS_GetMenuData_V2</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_GetMenuData_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>033d63c5-4d7f-48b9-9510-f294018af0df</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>17bb7387-1db3-40df-b1e3-75b0be3c5b3b</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>69324be5-d37e-4de1-8883-1adf89ddccaa</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>08b73d75-b0db-40cb-ab26-55b2fcb898da</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1a3b6fd9-c9e4-418d-a343-3852f3ecf858</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_RadioCommandsGenerator  -- Automatic Radio Command and HTML Reference Guide Generator</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e6cff117-21c2-47d3-915c-cae0797db384</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// This inline function is used to parse the Menu.dat file from Falcon BMS and extract configuration data into AVCS4 BMS Keypress Variables.</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>f333b2cf-8c37-4660-85b3-b358be71394c</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>b9d2d3a3-dd1e-4f1c-9e10-c49d558a75d7</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>34799f86-8606-43ef-9414-d04547a29adc</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>fdfda927-75db-4f0f-bafc-3439a680992e</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Windows.Forms;

/*
Required Referenced Assemblies V1:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Windows.Forms.dll;

Required Referenced Assemblies V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Collections.dll;System.Linq.dll;System.Linq.Expressions.dll;System.Security.Claims.dll;System.Security.Principal.Windows.dll;System.Windows.Forms.dll;
*/

/// &lt;summary&gt;
/// AVCS4 BMS Command Generator - Automatic Radio Command and HTML Reference Guide Generator
/// This class is used to parse the Menu.dat file from Falcon BMS and extract configuration data into AVCS4 BMS Keypress Variables.
/// by SemlerPDX July2025
/// https://veterans-gaming.com/avcs
/// &lt;/summary&gt;
public class VAInline
{
	private const string DefaultProfileName = "AVCS4 Falcon BMS Radios (v2.0)";
	private const string MenuDatSubfolderPath = @"Data\Art\CkptArt\Menu.dat";

	private const string PhrasesConfigFileName = "avcs_bms_data_3.cfg";
	private const string KeysConfigFileName = "avcs_bms_data_4.cfg";

	private static readonly HashSet&lt;string&gt; FlightMenus = new HashSet&lt;string&gt; { "WINGMAN", "ELEMENT", "FLIGHT" };

	private static string _currentProfileName = "";

	// Must set single-threaded apartment, required for win forms folder selection dialog
	[STAThread]
	public void main()
	{
		_currentProfileName = VA.ParseTokens("{PROFILE}") ?? DefaultProfileName;

		var rootFalconGamePath = VA.GetText("AVCS_BMS_ROOT_PROGRAM_PATH") ?? string.Empty; // Path to Falcon BMS root folder
		if (string.IsNullOrWhiteSpace(rootFalconGamePath))
		{
			VA.WriteToLog("AVCS ERROR: AVCS_BMS_ROOT_PROGRAM_PATH is not set or empty.", "red");
			var errorMessage = "AVCS_BMS_ROOT_PROGRAM_PATH is not set or empty.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var di = new DirectoryInfo(rootFalconGamePath);
		var falconGameTitle = di.Name;

		var menuDatPath = Path.Combine(rootFalconGamePath, MenuDatSubfolderPath);
		if (!File.Exists(menuDatPath))
		{
			VA.WriteToLog("AVCS ERROR: Menu.dat not found at '" + menuDatPath + "'", "red");
			VA.WriteToLog("AVCS ERROR: File does not exist or access denied.", "red");
			var errorMessage = "Menu.dat not found at '" + menuDatPath + "' Please ensure the path is correct, access is permitted, and the file exists.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var configFolderPath = VA.ParseTokens(@"{TXT:AVCS_APPS}\AVCS\CORE\BMS\{INT:AVCS_BMS_VER_MAJOR}\update");
		if (!Directory.Exists(configFolderPath))
		{
			VA.WriteToLog("AVCS ERROR: AVCS4 BMS config folder does not exist.", "red");
			var errorMessage = "AVCS4 BMS config folder does not exist.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var keysConfigPath = Path.Combine(configFolderPath, KeysConfigFileName);
		var phrasesConfigPath = Path.Combine(configFolderPath, PhrasesConfigFileName);

		var htmlFolderPath = VA.ParseTokens(@"{TXT:AVCS_APPS}\AVCS\voice_commands");
		var htmlOutFileName = VA.ParseTokens(@"commref_bms{INT:AVCS_BMS_VER_MAJOR}.html");
		var htmlOutPath = Path.Combine(htmlFolderPath, htmlOutFileName);

		var htmlMainTemplate = VA.GetText("~commandReferenceTemplate") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(htmlMainTemplate))
		{
			VA.WriteToLog("AVCS ERROR: AVCS_BMS_COMMREF_TEMPLATE is null or white space.", "red");
			var errorMessage = "AVCS_BMS_COMMREF_TEMPLATE is null or empty.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var htmlBlockTemplate = VA.GetText("~agencyBlockTemplate") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(htmlBlockTemplate))
		{
			VA.WriteToLog("AVCS ERROR: AVCS_BMS_COMMREF_BLOCK_TEMPLATE is null or white space.", "red");
			var errorMessage = "AVCS_BMS_COMMREF_BLOCK_TEMPLATE is null or empty.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var htmlPageTemplate = VA.GetText("~agencyPageTemplate") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(htmlPageTemplate))
		{
			VA.WriteToLog("AVCS ERROR: AVCS_BMS_COMMREF_PAGE_TEMPLATE is null or white space.", "red");
			var errorMessage = "AVCS_BMS_COMMREF_PAGE_TEMPLATE is null or empty.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var htmlItemTemplate = VA.GetText("~commandItemTemplate") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(htmlItemTemplate))
		{
			VA.WriteToLog("AVCS ERROR: AVCS_BMS_COMMREF_ITEM_TEMPLATE is null or white space.", "red");
			var errorMessage = "AVCS_BMS_COMMREF_ITEM_TEMPLATE is null or empty.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var htmlCompoundImage = VA.GetText("AVCS_BMS_COMMREF_COMPOUND_IMG") ?? string.Empty;
		var htmlWildcardImage = VA.GetText("AVCS_BMS_COMMREF_WILDCARD_IMG") ?? string.Empty;

		TemplateData templateData = new TemplateData(
			htmlMainTemplate,
			htmlBlockTemplate,
			htmlPageTemplate,
			htmlItemTemplate,
			htmlCompoundImage,
			htmlWildcardImage
		);


		var aliasesFile = VA.GetText("~commandGlobalAliases") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(aliasesFile))
		{
			VA.WriteToLog("AVCS ERROR: AVCS_BMS_COMMAND_ALIASES is null or white space. No aliases will be built.", "red");
			var errorMessage = "AVCS_BMS_COMMREF_TEMPLATE is null or empty. No aliases will be built, continuing anyway.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
		}

		var parser = new MenuDatParser(VA, aliasesFile);
		ConfigData configData;
		try
		{
			var data = parser.ParseToCfgLines(menuDatPath);

			configData = new ConfigData(
				data.KeyLines.ToList(),
				data.CommandLines.ToList(),
				data.CompoundCommandLines.ToList(),
				data.AllCommandsLines.ToList(),
				data.AgencyReferences.ToList()
			);

			if (configData == null)
			{
				throw new Exception("Failed to parse Menu.dat file - config data is null.");
			}
		}
		catch (Exception ex)
		{
			// Handle any exception via AVCS Debug and error messaging system
			VA.WriteToLog("AVCS ERROR: FalconMenuDatParser exited early with the following message", "red");
			VA.WriteToLog("AVCS ERROR: " + ex.Message, "red");
			VA.SetText("AVCS_EX_MSG", ex.Message);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}



		// The phrase lines containing everything we can possibly say and some things we shouldn't
		var commandLines = string.Join(";", configData.CommandLines.ToList());
		var compoundCommandLines = string.Join(";", configData.CompoundCommandLines.ToList());
		var allCommandsLines = configData.AllCommandsLines.ToList();

		commandLines = "AVCS_BMS_COMMAND_PHRASES=[" + commandLines + "]";
		compoundCommandLines = "AVCS_BMS_COMPOUND_COMMAND_PHRASES=" + compoundCommandLines;
		var phraseLines = new List&lt;string&gt;() { commandLines, compoundCommandLines };

		foreach (var line in allCommandsLines)
		{
			phraseLines.Add(line);
		}


		// The almightly key lines that turn what we say into keypress macros
		var keyLines = configData.KeyLines.ToList();


		// The fancy pants HTML lines of the quick command reference guide which tells us what we can say to enact keypress macros
		var agencyReferences = configData.AgencyReferences;
		var htmlLines = BuildHtmlGuide(agencyReferences, templateData, falconGameTitle, htmlOutPath);



		// Try to write the configuration files and HTML guide to AVCS folder under VoiceAttack Apps directory
		try
		{
			WriteToFile(phrasesConfigPath, phraseLines);
			WriteToFile(keysConfigPath, keyLines);
			WriteToFile(htmlOutPath, htmlLines);
		}
		catch (Exception ex)
		{
			// Handle any exception via AVCS Debug and error messaging system
			VA.WriteToLog("AVCS ERROR: FalconMenuDatParser exited when trying to write files with the following message", "red");
			VA.WriteToLog("AVCS ERROR: " + ex.Message, "red");
			VA.SetText("AVCS_EX_MSG", ex.Message);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var finalMessage = VA.ParseTokens(FinalMessageTemplate);
		finalMessage = finalMessage.Replace("falconGameTitle", falconGameTitle);

		ShowFinalMessageBox(finalMessage);
		///... see? That wasn't so hard!  Only took 85 hours to write 1000 lines of code to parse a game file and write some config files! :D
	}


	private static void WriteToFile(string filePath, List&lt;string&gt; lines)
	{
		using (var sw = new StreamWriter(filePath, false, new UTF8Encoding(false)))
		{
			foreach (var line in lines)
			{
				if (string.IsNullOrWhiteSpace(line))
				{
					continue; // Skip empty lines
				}

				sw.WriteLine(line);
			}
		}
	}

	private static List&lt;string&gt; BuildHtmlGuide(List&lt;AgencyReference&gt; agencyReferences, TemplateData templateData, string falconGameTitle, string htmlOutPath)
	{
		string htmlTemplate = templateData.MainTemplate;
		foreach (var agency in agencyReferences)
		{
			string allPagesHtml = "";
			var isFlightAgency = FlightMenus.Contains(agency.AgencyName);

			var imagePath = isFlightAgency
				? templateData.CompoundCommandTitleImage
				: templateData.WildcardCommandTitleImage;

			for (int p = 0; p &lt; agency.Pages.Count; ++p)
			{
				var page = agency.Pages[p];
				string commandItemsHtml = "";

				for (int i = 0; i &lt; page.Commands.Count; ++i)
				{
					var cmd = page.Commands[i];

					// Use semicolon-separator for aliases to match VA style "or"
					string aliases = (cmd.Aliases != null &amp;&amp; cmd.Aliases.Count &gt; 0)
						? "(" + string.Join("; ", cmd.Aliases) + ")"
						: "";

					string commandItemHtml = templateData.CommandItemTemplate
						.Replace("INSERTITEMNUM", cmd.ItemNumber.ToString())
						.Replace("INSERTMAINPHRASE", cmd.MainPhrase)
						.Replace("INSERTALIASES", aliases);

					commandItemsHtml += commandItemHtml + "\r\n";
				}

				string pageHtml = templateData.AgencyPageTemplate
					.Replace("INSERTPAGENUM", (p + 1).ToString())
					.Replace("INSERTPAGETITLE", page.PageName)
					.Replace("INSERTCOMMANDITEMS", commandItemsHtml)
					.Replace("DISPLAYBLOCK", p == 0 ? "block" : "none"); // Show first, hide others

				allPagesHtml += pageHtml + "\r\n";
			}

			string agencyBlockHtml = templateData.AgencyBlockTemplate
				.Replace("INSERTTITLEIMAGEPATH", imagePath)
				.Replace("INSERTAGENCY", agency.AgencyName)
				.Replace("INSERTALLPAGES", allPagesHtml);

			string marker = string.Format("&lt;!-- {0} INSERTAGENCYBLOCK --&gt;", agency.AgencyName.ToUpperInvariant());
			htmlTemplate = htmlTemplate.Replace(marker, agencyBlockHtml);
			htmlTemplate = htmlTemplate.Replace("FALCONGAMETITLE", falconGameTitle);
			htmlTemplate = htmlTemplate.Replace("AVCSPROFILENAME", _currentProfileName);
		}

		return htmlTemplate.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).ToList() ?? new List&lt;string&gt;();
	}

	private static void ShowFinalMessageBox(string finalMessage)
	{
		MessageBox.Show(
			finalMessage,
			" AVCS4 BMS Radios - Automatic Command Generator     ",
			MessageBoxButtons.OK,
			MessageBoxIcon.Information
		);
	}

	private const string FinalMessageTemplate = @"Profile will now restart." +
		@"{NEWLINE}{NEWLINE}Radio menu voice commands and a quick command reference" +
		@" guide have been generated for falconGameTitle " +
		@"{NEWLINE}{NEWLINE}To view this guide, say, ""Open the Command Reference""" +
		@"{NEWLINE}{NEWLINE}To create command aliases, say, ""Create a Command Alias""" +
		@"{NEWLINE}{NEWLINE}To change BMS version, say, ""Generate Radio Commands""" +
		@"{NEWLINE}{NEWLINE}{NEWLINE}Thanks for checking out AVCS4 BMS!{NEWLINE}-Sem";
}

/// &lt;summary&gt;
/// Represents the configuration data parsed from the Menu.dat file for AVCS systems in VoiceAttack.
/// &lt;/summary&gt;
public class ConfigData
{
	/// &lt;summary&gt;
	/// Contains the key lines for the configuration file.
	/// &lt;/summary&gt;
	public IEnumerable&lt;string&gt; KeyLines { get; set; }

	/// &lt;summary&gt;
	/// Contains the command lines for the configuration file.
	/// &lt;/summary&gt;
	public IEnumerable&lt;string&gt; CommandLines { get; set; }

	/// &lt;summary&gt;
	/// Contains the compound command lines for the configuration file.
	/// &lt;/summary&gt;
	public IEnumerable&lt;string&gt; CompoundCommandLines { get; set; }

	/// &lt;summary&gt;
	/// Contains all command lines, formatted for the configuration file.
	/// &lt;/summary&gt;
	public IEnumerable&lt;string&gt; AllCommandsLines { get; set; }

	/// &lt;summary&gt;
	/// Contains the full list of agency/page/item reference objects for HTML export.
	/// &lt;/summary&gt;
	public List&lt;AgencyReference&gt; AgencyReferences { get; set; }

	/// &lt;summary&gt;
	/// Initializes a new instance of the &lt;see cref="ConfigData"/&gt; class with the specified lines.
	/// &lt;/summary&gt;
	/// &lt;param name="keyLines"&gt;Key lines for the configuration file.&lt;/param&gt;
	/// &lt;param name="commandLines"&gt;Command lines for the configuration file.&lt;/param&gt;
	/// &lt;param name="compoundCommandLines"&gt;Compound command lines for the configuration file.&lt;/param&gt;
	/// &lt;param name="allCommandsLines"&gt;All command lines (pre-formatted) for the configuration file.&lt;/param&gt;
	/// &lt;param name="agencyReferences"&gt;List of agency references for HTML export.&lt;/param&gt;"
	public ConfigData
	(
		List&lt;string&gt; keyLines = null,
		List&lt;string&gt; commandLines = null,
		List&lt;string&gt; compoundCommandLines = null,
		List&lt;string&gt; allCommandsLines = null,
		List&lt;AgencyReference&gt; agencyReferences = null
	)
	{
		KeyLines = keyLines;
		CommandLines = commandLines;
		CompoundCommandLines = compoundCommandLines;
		AllCommandsLines = allCommandsLines;
		AgencyReferences = agencyReferences;
	}
}

/// &lt;summary&gt;
/// Represents the template data used for dynamically generating the AVCS4 BMS quick command reference guide HTML.
/// &lt;/summary&gt;
public class TemplateData
{
	/// &lt;summary&gt;
	/// The main template for the HTML guide, which includes placeholders for agency blocks.
	/// &lt;/summary&gt;
	public string MainTemplate { get; set; }

	/// &lt;summary&gt;
	/// The template for the agency block in the HTML guide.
	/// &lt;/summary&gt;
	public string AgencyBlockTemplate { get; set; }

	/// &lt;summary&gt;
	/// The template for the agency page in the HTML guide.
	/// &lt;/summary&gt;
	public string AgencyPageTemplate { get; set; }

	/// &lt;summary&gt;
	/// The template for the command item in the HTML guide.
	/// &lt;/summary&gt;
	public string CommandItemTemplate { get; set; }

	/// &lt;summary&gt;
	/// The image path for the compound command title in the HTML guide.
	/// &lt;/summary&gt;
	public string CompoundCommandTitleImage { get; set; }

	/// &lt;summary&gt;
	/// The image path for the wildcard command title in the HTML guide.
	/// &lt;/summary&gt;
	public string WildcardCommandTitleImage { get; set; }

	/// &lt;summary&gt;
	/// Initializes a new instance of the &lt;see cref="TemplateData"/&gt; class with the specified templates.
	/// &lt;/summary&gt;
	/// &lt;param name="mainTemplate"&gt;The main template for the HTML guide, which includes placeholders for agency blocks.&lt;/param&gt;
	/// &lt;param name="agencyBlockTemplate"&gt;The template for the agency block in the HTML guide.&lt;/param&gt;
	/// &lt;param name="agencyPageTemplate"&gt;The template for the agency page in the HTML guide.&lt;/param&gt;
	/// &lt;param name="commandItemTemplate"&gt;The template for the command item in the HTML guide.&lt;/param&gt;
	/// &lt;param name="compoundCommandTitleImage"&gt;The image path for the compound command title in the HTML guide.&lt;/param&gt;
	/// &lt;param name="wildcardCommandTitleImage"&gt;The image path for the wildcard command title in the HTML guide.&lt;/param&gt;
	public TemplateData(
		string mainTemplate,
		string agencyBlockTemplate,
		string agencyPageTemplate,
		string commandItemTemplate,
		string compoundCommandTitleImage,
		string wildcardCommandTitleImage
	)
	{
		MainTemplate = mainTemplate;
		AgencyBlockTemplate = agencyBlockTemplate;
		AgencyPageTemplate = agencyPageTemplate;
		CommandItemTemplate = commandItemTemplate;
		CompoundCommandTitleImage = compoundCommandTitleImage;
		WildcardCommandTitleImage = wildcardCommandTitleImage;
	}
}

/// &lt;summary&gt;
/// Represents a reference to an agency in the Menu.dat file, containing its name and associated pages.
/// &lt;/summary&gt;
public class AgencyReference
{
	/// &lt;summary&gt;
	/// The name of the agency as defined in the Menu.dat file.
	/// &lt;/summary&gt;
	public string AgencyName;

	/// &lt;summary&gt;
	/// Contains a list of pages associated with this agency, each with its own commands.
	/// &lt;/summary&gt;
	public List&lt;PageReference&gt; Pages = new List&lt;PageReference&gt;();
}

/// &lt;summary&gt;
/// Represents a reference to a page in the Menu.dat file, containing its name and associated commands.
/// &lt;/summary&gt;
public class PageReference
{
	/// &lt;summary&gt;
	/// The name of the page as defined in the Menu.dat file.
	/// &lt;/summary&gt;
	public string PageName;

	/// &lt;summary&gt;
	/// Contains a list of commands associated with this page, each with its own item number and aliases.
	/// &lt;/summary&gt;
	public List&lt;CommandReference&gt; Commands = new List&lt;CommandReference&gt;();
}

/// &lt;summary&gt;
/// Represents a reference to a command in the Menu.dat file, containing its item number, main phrase, and aliases.
/// &lt;/summary&gt;
public class CommandReference
{
	/// &lt;summary&gt;
	/// The item number of the command as defined in the Menu.dat file, with 10 normalized to 0 for keyboard.
	/// &lt;/summary&gt;
	public int ItemNumber;

	/// &lt;summary&gt;
	/// The main phrase of the command, which is the primary label used in the configuration.
	/// &lt;/summary&gt;
	public string MainPhrase;

	/// &lt;summary&gt;
	/// Contains a list of aliases for the command, which are alternative labels that can be used.
	/// &lt;/summary&gt;
	public List&lt;string&gt; Aliases = new List&lt;string&gt;();
}

/// &lt;summary&gt;
/// Parses the Menu.dat file from Falcon BMS and extracts configuration data into AVCS4 BMS Keypress Variables.
/// &lt;/summary&gt;
public sealed class MenuDatParser
{

	private readonly HashSet&lt;string&gt; FlightMenus = new HashSet&lt;string&gt; { "WINGMAN", "ELEMENT", "FLIGHT" };

	private readonly Dictionary&lt;string, List&lt;string&gt;&gt; _aliases;

	private readonly List&lt;string&gt; _otherAgencyLabels = new List&lt;string&gt;();

	/// &lt;summary&gt;
	/// Initializes a new instance of the &lt;see cref="MenuDatParser"/&gt; class.
	/// &lt;/summary&gt;
	/// &lt;param name="aliasesFilePath"&gt;The file path to the command phrase aliases file.&lt;/param&gt;
	public MenuDatParser(dynamic VA, string aliasesFile = null)
	{
		_aliases = LoadAliases(VA, aliasesFile);
	}

	/// &lt;summary&gt;
	/// Parses the Menu.dat file and extracts configuration data into AVCS4 BMS Keypress Variables.
	/// &lt;/summary&gt;
	/// &lt;param name="rootFalconGamePath"&gt;The root path to the Falcon BMS game folder of any version.&lt;/param&gt;
	/// &lt;returns&gt;A &lt;see cref="ConfigData"/&gt; object containing the parsed BMS radio menus and AVCS variables configuration data.&lt;/returns&gt;
	public ConfigData ParseToCfgLines(string menuDatPath)
	{
		var outKeyLines = new List&lt;string&gt;();
		var outCommandLabels = new List&lt;string&gt;();
		var outCompoundCommandLabels = new List&lt;string&gt;();

		var outAllCommands = new List&lt;string&gt;();

		Dictionary&lt;string, AgencyReference&gt; htmlDict = new Dictionary&lt;string, AgencyReference&gt;();
		AgencyReference currentAgencyReference = null;
		PageReference currentPageReference = null;

		string currentMenuCommands = string.Empty;
		string currentAgency = null;
		string currentPage = null;
		string currentPageNumber = null;

		int pageIndex = 0; // 1-based under each menu
		int position = 0;  // 1-based under each page

		var menuDat = File.ReadLines(menuDatPath);

		foreach (var raw in menuDat)
		{
			var line = raw.Trim();
			if (!line.StartsWith("#"))
			{
				continue;
			}

			// ─── MENU ───
			// "#menu &lt;intName&gt; &lt;cat&gt; &lt;num&gt; &lt;num&gt; &lt;color&gt; &lt;AGENCY…&gt;"
			// 0      1          2    3     4     5       6…
			if (line.StartsWith("#menu "))
			{
				outAllCommands.Add(currentMenuCommands);
				var menuTokens = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

				var isValidMenuLine = (menuTokens.Length &gt;= 7);
				if (!isValidMenuLine)
				{
					continue;
				}

				// Grab everything after the color word
				var display = string.Join(" ", menuTokens.Skip(6));
				currentAgency = ExtractMenuGroup(display);

				if (currentAgency.StartsWith("OTHER AGENCIES"))
				{
					currentAgency = currentAgency.Replace("OTHER AGENCIES", "TANKER"); // special case for "Other Agencies Commands"
				}

				currentMenuCommands = currentAgency + ":";

				currentAgencyReference = new AgencyReference
				{
					AgencyName = currentAgency,
				};
				htmlDict[currentAgency] = currentAgencyReference; // Add or replace the current agency

				pageIndex = 0;
				currentPage = null;
				continue;
			}

			if (currentAgency == null)
			{
				continue;   // haven't hit a #menu yet
			}

			// ─── PAGE ───
			// "#page &lt;id&gt; &lt;skip&gt; &lt;skip&gt; &lt;color&gt; &lt;PAGE…&gt;"
			//   0      1     2      3      4      5…
			if (line.StartsWith("#page "))
			{
				var pageTokens = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

				var isValidPageLine = (pageTokens.Length &gt;= 5);
				if (!isValidPageLine)
				{
					continue;
				}

				pageIndex++;

				// drop pageTokens[0]-[3], keep from [4] onward
				var page = string.Join(" ", pageTokens.Skip(4));

				currentPage = page;
				currentPageNumber = pageIndex.ToString();

				currentPageReference = new PageReference
				{
					PageName = currentPage
				};
				currentAgencyReference.Pages.Add(currentPageReference);


				position = 0;

				continue;
			}

			// ─── ITEM ───
			// "#item &lt;type&gt; &lt;skip&gt; &lt;skip&gt; &lt;skip&gt; &lt;skip&gt; &lt;PAGE…&gt;"
			//   0      1      2      3      4      5      6…
			var isValidLine = (line.StartsWith("#item ") &amp;&amp; currentPage != null);
			if (!isValidLine)
			{
				// if this is not a valid item line, skip this line
				continue;
			}

			var itemTokens = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

			var isValidTokens = (itemTokens.Length &gt;= 7);
			if (!isValidTokens)
			{
				// if there are not enough itemTokens, skip this line
				continue;
			}

			// Join itemTokens[6…] into the raw cleanLabel
			var rawLabel = string.Join(" ", itemTokens.Skip(6));
			var cleanLabel = CleanLabel(rawLabel);

			var isFlightMenu = IsFlightMenu(currentAgency);

			position++;
			var key = position % 10;   // 10th -&gt; 0
			var currentVarNamePrefix = "AVCS_BMS_KEY_" + GetAgencySuffix(currentAgency);
			var keyData = currentPageNumber + "_" + currentAgency + "_" + key;
			var aliasedLabel = currentPage + "_" + cleanLabel;

			List&lt;string&gt; allLabels = new List&lt;string&gt;();
			List&lt;string&gt; validLabels = new List&lt;string&gt;();

			// Check in _aliases if this cleanLabel has alternate format alias(es)
			var isInAltAliases = _aliases.ContainsKey(aliasedLabel);

			cleanLabel = isInAltAliases ? aliasedLabel : cleanLabel;
			if (!_aliases.TryGetValue(cleanLabel, out allLabels))
			{
				allLabels = new List&lt;string&gt; { cleanLabel }; // if no alias(es), add the cleanLabel itself
			}

			foreach (var label in allLabels)
			{
				if (string.IsNullOrWhiteSpace(label))
				{
					continue; // skip empty labels
				}

				var validLabel = isFlightMenu ? label : GetValidLabel(label, currentPage);

				validLabels.Add(validLabel);
				outKeyLines.Add(currentVarNamePrefix + validLabel + "=" + keyData);

				var altSpeechLabel = ToHumanReadable(validLabel);
				if (isFlightMenu)
				{
					outCompoundCommandLabels.Add(altSpeechLabel);
				}
				else
				{
					outCommandLabels.Add(altSpeechLabel);
				}

				var optionalSemicolon = currentMenuCommands.EndsWith(":") ? string.Empty : ";";
				currentMenuCommands += optionalSemicolon + altSpeechLabel;
			}

			// Human readable (for HTML display)
			string mainPhrase = ToHumanReadable(validLabels[0]);

			// Build aliases for HTML, filtering out any that (case-insensitive) match the main phrase
			List&lt;string&gt; aliases = validLabels.Select(ToHumanReadable)
											.Where(a =&gt; !string.Equals(a, mainPhrase, StringComparison.OrdinalIgnoreCase))
											.Distinct(StringComparer.OrdinalIgnoreCase)
											.ToList();

			var commandReference = new CommandReference
			{
				ItemNumber = key,
				MainPhrase = mainPhrase,
				Aliases = aliases
			};
			currentPageReference.Commands.Add(commandReference);

		}

		outAllCommands.Add(currentMenuCommands);
		var allCommandVariables = GenerateAllCommandVariables(outAllCommands);

		var agencyRefs = htmlDict.Values.ToList();

		ConfigData configData = new ConfigData(
			outKeyLines,
			outCommandLabels,
			outCompoundCommandLabels,
			allCommandVariables,
			agencyRefs
		);

		return configData; /// boom! drops mic! grabs coffee!! picks up mic and inspects for damage cuz dayum I need it for voice commands... why did I drop that thing?! :D
	}


	private bool IsFlightMenu(string currentMenu)
	{
		return FlightMenus.Contains(currentMenu);
	}

	private string GetAgencySuffix(string currentAgency)
	{
		return IsFlightMenu(currentAgency) ? currentAgency + "_" : string.Empty;
	}

	private string GetValidLabel(string label, string page)
	{
		// If this new label already exists on running list, enforce a prefix of currentPage.ToTitleCase() + cleanLabel
		if (_otherAgencyLabels.Contains(label))
		{
			var labelPrefix = GetFirstWordInString(page);

			TextInfo textInfo = CultureInfo.InvariantCulture.TextInfo;
			labelPrefix = textInfo.ToTitleCase(labelPrefix.ToLower());

			label = labelPrefix + label;
		}

		// Add to running list of labels not belonging to Flight agency
		_otherAgencyLabels.Add(label);

		return label;
	}

	private string GetFirstWordInString(string input)
	{
		// Split by whitespace and take the first word
		var words = input.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
		return words.Length &gt; 0 ? words[0] : string.Empty;
	}

	private string ToHumanReadable(string input)
	{
		if (string.IsNullOrEmpty(input))
		{
			return input;
		}

		// Convert PascalCase to human-readable format, with handlers for numbers and acronyms
		var sb = new StringBuilder();
		for (int i = 0; i &lt; input.Length; i++)
		{
			char c = input[i];

			// If this char is uppercase or a number, and either:
			//  it's not the first char AND previous was lowercase, -OR-
			//  it's not the last char AND next is lowercase,
			// then this is a word boundary.
			var isUpperOrNumber = char.IsUpper(c) || !char.IsLetter(c);
			var isPrevLower = (i &gt; 0 &amp;&amp; char.IsLower(input[i - 1]));
			var isNextLower = (i + 1 &lt; input.Length &amp;&amp; char.IsLower(input[i + 1]));

			if (isUpperOrNumber &amp;&amp; (isPrevLower || isNextLower))
			{
				sb.Append(' ');
			}

			sb.Append(c);
		}

		// Trim in case there was a space inserted at the very start
		return sb.ToString().Trim();
	}

	private string ExtractMenuGroup(string display)
	{
		// From "ELEMENT COMMANDS" → "ELEMENT", from "AWACS COMMANDS" → "AWACS"
		const string suffix = " COMMANDS";
		if (display.EndsWith(suffix, StringComparison.OrdinalIgnoreCase))
		{
			display = display.Substring(0, display.Length - suffix.Length);
		}

		return display.ToUpperInvariant();
	}

	private string CleanLabel(string input)
	{
		// Remove everything but letters/digits/spaces, then CamelCase
		var sb = new StringBuilder();
		foreach (var c in input)
		{
			if (char.IsLetterOrDigit(c) || char.IsWhiteSpace(c))
			{
				sb.Append(c);
			}
		}

		var words = sb
			.ToString()
			.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

		sb.Clear();
		foreach (var w in words)
		{
			sb.Append(char.ToUpperInvariant(w[0]));
			if (w.Length &gt; 1)
			{
				sb.Append(w.Substring(1));
			}
		}

		return sb.ToString();
	}


	private List&lt;string&gt; GenerateAllCommandVariables(List&lt;string&gt; commandLines)
	{
		const string prefix = "AVCS_BMS_ALL_COMMANDS_";

		var allCommandVariables = commandLines
			.Where(line =&gt; !string.IsNullOrWhiteSpace(line) &amp;&amp; line.Contains(':'))
			.Select(line =&gt;
			{
				var parts = line.Split(new[] { ':' }, 2, StringSplitOptions.RemoveEmptyEntries);
				var agencyName = parts[0].Trim();
				var commandName = parts.Length &gt; 1 ? parts[1].Trim() : "";
				return prefix + agencyName + "=" + commandName;
			})
			.ToList();

		return allCommandVariables;
	}

	private Dictionary&lt;string, List&lt;string&gt;&gt; LoadAliases(dynamic VA, string textFile)
	{
		// If no alias data, just return empty
		if (string.IsNullOrWhiteSpace(textFile))
		{
			return new Dictionary&lt;string, List&lt;string&gt;&gt;(StringComparer.OrdinalIgnoreCase);
		}

		var dict = new Dictionary&lt;string, List&lt;string&gt;&gt;(StringComparer.OrdinalIgnoreCase);

		var lines = textFile.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
		foreach (var line in lines)
		{
			var parts = line.Split(new[] { '=' }, 2);
			if (parts.Length != 2)
			{
				continue;
			}

			var key = parts[0].Trim();

			VA.SetText(key, null);

			var aliases = !parts[1].Contains(';') ? new List&lt;string&gt; { parts[1] } :
				parts[1].Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)
						.Select(a =&gt; a.Trim())
						.ToList();

			if (!dict.ContainsKey(key))
			{
				dict[key] = new List&lt;string&gt;();
			}

			dict[key].AddRange(aliases);
		}

		// In case of null (any issue not thrown), just return empty
		return dict ?? new Dictionary&lt;string, List&lt;string&gt;&gt;(StringComparer.OrdinalIgnoreCase);
	}

}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Windows.Forms.dll;</Context2>
          <Context3>AVCS4_BMS_RadioCommandsGenerator_V1</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_RadioCommandsGenerator_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>f6b3b97d-7525-4519-a2b9-9afb4a2be59e</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Windows.Forms;

/*
Required Referenced Assemblies V1:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Windows.Forms.dll;

Required Referenced Assemblies V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Collections.dll;System.Linq.dll;System.Linq.Expressions.dll;System.Security.Claims.dll;System.Security.Principal.Windows.dll;System.Windows.Forms.dll;
*/

/// &lt;summary&gt;
/// AVCS4 BMS Command Generator - Automatic Radio Command and HTML Reference Guide Generator
/// This class is used to parse the Menu.dat file from Falcon BMS and extract configuration data into AVCS4 BMS Keypress Variables.
/// by SemlerPDX July2025
/// https://veterans-gaming.com/avcs
/// &lt;/summary&gt;
public class VAInline
{
	private const string DefaultProfileName = "AVCS4 Falcon BMS Radios (v2.0)";
	private const string MenuDatSubfolderPath = @"Data\Art\CkptArt\Menu.dat";

	private const string PhrasesConfigFileName = "avcs_bms_data_3.cfg";
	private const string KeysConfigFileName = "avcs_bms_data_4.cfg";

	private static readonly HashSet&lt;string&gt; FlightMenus = new HashSet&lt;string&gt; { "WINGMAN", "ELEMENT", "FLIGHT" };

	private static string _currentProfileName = "";

	// Must set single-threaded apartment, required for win forms folder selection dialog
	[STAThread]
	public void main()
	{
		_currentProfileName = VA.ParseTokens("{PROFILE}") ?? DefaultProfileName;

		var rootFalconGamePath = VA.GetText("AVCS_BMS_ROOT_PROGRAM_PATH") ?? string.Empty; // Path to Falcon BMS root folder
		if (string.IsNullOrWhiteSpace(rootFalconGamePath))
		{
			VA.WriteToLog("AVCS ERROR: AVCS_BMS_ROOT_PROGRAM_PATH is not set or empty.", "red");
			var errorMessage = "AVCS_BMS_ROOT_PROGRAM_PATH is not set or empty.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var di = new DirectoryInfo(rootFalconGamePath);
		var falconGameTitle = di.Name;

		var menuDatPath = Path.Combine(rootFalconGamePath, MenuDatSubfolderPath);
		if (!File.Exists(menuDatPath))
		{
			VA.WriteToLog("AVCS ERROR: Menu.dat not found at '" + menuDatPath + "'", "red");
			VA.WriteToLog("AVCS ERROR: File does not exist or access denied.", "red");
			var errorMessage = "Menu.dat not found at '" + menuDatPath + "' Please ensure the path is correct, access is permitted, and the file exists.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var configFolderPath = VA.ParseTokens(@"{TXT:AVCS_APPS}\AVCS\CORE\BMS\{INT:AVCS_BMS_VER_MAJOR}\update");
		if (!Directory.Exists(configFolderPath))
		{
			VA.WriteToLog("AVCS ERROR: AVCS4 BMS config folder does not exist.", "red");
			var errorMessage = "AVCS4 BMS config folder does not exist.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var keysConfigPath = Path.Combine(configFolderPath, KeysConfigFileName);
		var phrasesConfigPath = Path.Combine(configFolderPath, PhrasesConfigFileName);

		var htmlFolderPath = VA.ParseTokens(@"{TXT:AVCS_APPS}\AVCS\voice_commands");
		var htmlOutFileName = VA.ParseTokens(@"commref_bms{INT:AVCS_BMS_VER_MAJOR}.html");
		var htmlOutPath = Path.Combine(htmlFolderPath, htmlOutFileName);

		var htmlMainTemplate = VA.GetText("~commandReferenceTemplate") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(htmlMainTemplate))
		{
			VA.WriteToLog("AVCS ERROR: AVCS_BMS_COMMREF_TEMPLATE is null or white space.", "red");
			var errorMessage = "AVCS_BMS_COMMREF_TEMPLATE is null or empty.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var htmlBlockTemplate = VA.GetText("~agencyBlockTemplate") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(htmlBlockTemplate))
		{
			VA.WriteToLog("AVCS ERROR: AVCS_BMS_COMMREF_BLOCK_TEMPLATE is null or white space.", "red");
			var errorMessage = "AVCS_BMS_COMMREF_BLOCK_TEMPLATE is null or empty.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var htmlPageTemplate = VA.GetText("~agencyPageTemplate") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(htmlPageTemplate))
		{
			VA.WriteToLog("AVCS ERROR: AVCS_BMS_COMMREF_PAGE_TEMPLATE is null or white space.", "red");
			var errorMessage = "AVCS_BMS_COMMREF_PAGE_TEMPLATE is null or empty.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var htmlItemTemplate = VA.GetText("~commandItemTemplate") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(htmlItemTemplate))
		{
			VA.WriteToLog("AVCS ERROR: AVCS_BMS_COMMREF_ITEM_TEMPLATE is null or white space.", "red");
			var errorMessage = "AVCS_BMS_COMMREF_ITEM_TEMPLATE is null or empty.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var htmlCompoundImage = VA.GetText("AVCS_BMS_COMMREF_COMPOUND_IMG") ?? string.Empty;
		var htmlWildcardImage = VA.GetText("AVCS_BMS_COMMREF_WILDCARD_IMG") ?? string.Empty;

		TemplateData templateData = new TemplateData(
			htmlMainTemplate,
			htmlBlockTemplate,
			htmlPageTemplate,
			htmlItemTemplate,
			htmlCompoundImage,
			htmlWildcardImage
		);


		var aliasesFile = VA.GetText("~commandGlobalAliases") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(aliasesFile))
		{
			VA.WriteToLog("AVCS ERROR: AVCS_BMS_COMMAND_ALIASES is null or white space. No aliases will be built.", "red");
			var errorMessage = "AVCS_BMS_COMMREF_TEMPLATE is null or empty. No aliases will be built, continuing anyway.";
			VA.SetText("AVCS_EX_MSG", errorMessage);
		}

		var parser = new MenuDatParser(VA, aliasesFile);
		ConfigData configData;
		try
		{
			var data = parser.ParseToCfgLines(menuDatPath);

			configData = new ConfigData(
				data.KeyLines.ToList(),
				data.CommandLines.ToList(),
				data.CompoundCommandLines.ToList(),
				data.AllCommandsLines.ToList(),
				data.AgencyReferences.ToList()
			);

			if (configData == null)
			{
				throw new Exception("Failed to parse Menu.dat file - config data is null.");
			}
		}
		catch (Exception ex)
		{
			// Handle any exception via AVCS Debug and error messaging system
			VA.WriteToLog("AVCS ERROR: FalconMenuDatParser exited early with the following message", "red");
			VA.WriteToLog("AVCS ERROR: " + ex.Message, "red");
			VA.SetText("AVCS_EX_MSG", ex.Message);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}



		// The phrase lines containing everything we can possibly say and some things we shouldn't
		var commandLines = string.Join(";", configData.CommandLines.ToList());
		var compoundCommandLines = string.Join(";", configData.CompoundCommandLines.ToList());
		var allCommandsLines = configData.AllCommandsLines.ToList();

		commandLines = "AVCS_BMS_COMMAND_PHRASES=[" + commandLines + "]";
		compoundCommandLines = "AVCS_BMS_COMPOUND_COMMAND_PHRASES=" + compoundCommandLines;
		var phraseLines = new List&lt;string&gt;() { commandLines, compoundCommandLines };

		foreach (var line in allCommandsLines)
		{
			phraseLines.Add(line);
		}


		// The almightly key lines that turn what we say into keypress macros
		var keyLines = configData.KeyLines.ToList();


		// The fancy pants HTML lines of the quick command reference guide which tells us what we can say to enact keypress macros
		var agencyReferences = configData.AgencyReferences;
		var htmlLines = BuildHtmlGuide(agencyReferences, templateData, falconGameTitle, htmlOutPath);



		// Try to write the configuration files and HTML guide to AVCS folder under VoiceAttack Apps directory
		try
		{
			WriteToFile(phrasesConfigPath, phraseLines);
			WriteToFile(keysConfigPath, keyLines);
			WriteToFile(htmlOutPath, htmlLines);
		}
		catch (Exception ex)
		{
			// Handle any exception via AVCS Debug and error messaging system
			VA.WriteToLog("AVCS ERROR: FalconMenuDatParser exited when trying to write files with the following message", "red");
			VA.WriteToLog("AVCS ERROR: " + ex.Message, "red");
			VA.SetText("AVCS_EX_MSG", ex.Message);
			VA.SetBoolean("AVCS_ERROR", true);
			return;
		}

		var finalMessage = VA.ParseTokens(FinalMessageTemplate);
		finalMessage = finalMessage.Replace("falconGameTitle", falconGameTitle);

		ShowFinalMessageBox(finalMessage);
		///... see? That wasn't so hard!  Only took 85 hours to write 1000 lines of code to parse a game file and write some config files! :D
	}


	private static void WriteToFile(string filePath, List&lt;string&gt; lines)
	{
		using (var sw = new StreamWriter(filePath, false, new UTF8Encoding(false)))
		{
			foreach (var line in lines)
			{
				if (string.IsNullOrWhiteSpace(line))
				{
					continue; // Skip empty lines
				}

				sw.WriteLine(line);
			}
		}
	}

	private static List&lt;string&gt; BuildHtmlGuide(List&lt;AgencyReference&gt; agencyReferences, TemplateData templateData, string falconGameTitle, string htmlOutPath)
	{
		string htmlTemplate = templateData.MainTemplate;
		foreach (var agency in agencyReferences)
		{
			string allPagesHtml = "";
			var isFlightAgency = FlightMenus.Contains(agency.AgencyName);

			var imagePath = isFlightAgency
				? templateData.CompoundCommandTitleImage
				: templateData.WildcardCommandTitleImage;

			for (int p = 0; p &lt; agency.Pages.Count; ++p)
			{
				var page = agency.Pages[p];
				string commandItemsHtml = "";

				for (int i = 0; i &lt; page.Commands.Count; ++i)
				{
					var cmd = page.Commands[i];

					// Use semicolon-separator for aliases to match VA style "or"
					string aliases = (cmd.Aliases != null &amp;&amp; cmd.Aliases.Count &gt; 0)
						? "(" + string.Join("; ", cmd.Aliases) + ")"
						: "";

					string commandItemHtml = templateData.CommandItemTemplate
						.Replace("INSERTITEMNUM", cmd.ItemNumber.ToString())
						.Replace("INSERTMAINPHRASE", cmd.MainPhrase)
						.Replace("INSERTALIASES", aliases);

					commandItemsHtml += commandItemHtml + "\r\n";
				}

				string pageHtml = templateData.AgencyPageTemplate
					.Replace("INSERTPAGENUM", (p + 1).ToString())
					.Replace("INSERTPAGETITLE", page.PageName)
					.Replace("INSERTCOMMANDITEMS", commandItemsHtml)
					.Replace("DISPLAYBLOCK", p == 0 ? "block" : "none"); // Show first, hide others

				allPagesHtml += pageHtml + "\r\n";
			}

			string agencyBlockHtml = templateData.AgencyBlockTemplate
				.Replace("INSERTTITLEIMAGEPATH", imagePath)
				.Replace("INSERTAGENCY", agency.AgencyName)
				.Replace("INSERTALLPAGES", allPagesHtml);

			string marker = string.Format("&lt;!-- {0} INSERTAGENCYBLOCK --&gt;", agency.AgencyName.ToUpperInvariant());
			htmlTemplate = htmlTemplate.Replace(marker, agencyBlockHtml);
			htmlTemplate = htmlTemplate.Replace("FALCONGAMETITLE", falconGameTitle);
			htmlTemplate = htmlTemplate.Replace("AVCSPROFILENAME", _currentProfileName);
		}

		return htmlTemplate.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).ToList() ?? new List&lt;string&gt;();
	}

	private static void ShowFinalMessageBox(string finalMessage)
	{
		MessageBox.Show(
			finalMessage,
			" AVCS4 BMS Radios - Automatic Command Generator     ",
			MessageBoxButtons.OK,
			MessageBoxIcon.Information
		);
	}

	private const string FinalMessageTemplate = @"Profile will now restart." +
		@"{NEWLINE}{NEWLINE}Radio menu voice commands and a quick command reference" +
		@" guide have been generated for falconGameTitle " +
		@"{NEWLINE}{NEWLINE}To view this guide, say, ""Open the Command Reference""" +
		@"{NEWLINE}{NEWLINE}To create command aliases, say, ""Create a Command Alias""" +
		@"{NEWLINE}{NEWLINE}To change BMS version, say, ""Generate Radio Commands""" +
		@"{NEWLINE}{NEWLINE}{NEWLINE}Thanks for checking out AVCS4 BMS!{NEWLINE}-Sem";
}

/// &lt;summary&gt;
/// Represents the configuration data parsed from the Menu.dat file for AVCS systems in VoiceAttack.
/// &lt;/summary&gt;
public class ConfigData
{
	/// &lt;summary&gt;
	/// Contains the key lines for the configuration file.
	/// &lt;/summary&gt;
	public IEnumerable&lt;string&gt; KeyLines { get; set; }

	/// &lt;summary&gt;
	/// Contains the command lines for the configuration file.
	/// &lt;/summary&gt;
	public IEnumerable&lt;string&gt; CommandLines { get; set; }

	/// &lt;summary&gt;
	/// Contains the compound command lines for the configuration file.
	/// &lt;/summary&gt;
	public IEnumerable&lt;string&gt; CompoundCommandLines { get; set; }

	/// &lt;summary&gt;
	/// Contains all command lines, formatted for the configuration file.
	/// &lt;/summary&gt;
	public IEnumerable&lt;string&gt; AllCommandsLines { get; set; }

	/// &lt;summary&gt;
	/// Contains the full list of agency/page/item reference objects for HTML export.
	/// &lt;/summary&gt;
	public List&lt;AgencyReference&gt; AgencyReferences { get; set; }

	/// &lt;summary&gt;
	/// Initializes a new instance of the &lt;see cref="ConfigData"/&gt; class with the specified lines.
	/// &lt;/summary&gt;
	/// &lt;param name="keyLines"&gt;Key lines for the configuration file.&lt;/param&gt;
	/// &lt;param name="commandLines"&gt;Command lines for the configuration file.&lt;/param&gt;
	/// &lt;param name="compoundCommandLines"&gt;Compound command lines for the configuration file.&lt;/param&gt;
	/// &lt;param name="allCommandsLines"&gt;All command lines (pre-formatted) for the configuration file.&lt;/param&gt;
	/// &lt;param name="agencyReferences"&gt;List of agency references for HTML export.&lt;/param&gt;"
	public ConfigData
	(
		List&lt;string&gt; keyLines = null,
		List&lt;string&gt; commandLines = null,
		List&lt;string&gt; compoundCommandLines = null,
		List&lt;string&gt; allCommandsLines = null,
		List&lt;AgencyReference&gt; agencyReferences = null
	)
	{
		KeyLines = keyLines;
		CommandLines = commandLines;
		CompoundCommandLines = compoundCommandLines;
		AllCommandsLines = allCommandsLines;
		AgencyReferences = agencyReferences;
	}
}

/// &lt;summary&gt;
/// Represents the template data used for dynamically generating the AVCS4 BMS quick command reference guide HTML.
/// &lt;/summary&gt;
public class TemplateData
{
	/// &lt;summary&gt;
	/// The main template for the HTML guide, which includes placeholders for agency blocks.
	/// &lt;/summary&gt;
	public string MainTemplate { get; set; }

	/// &lt;summary&gt;
	/// The template for the agency block in the HTML guide.
	/// &lt;/summary&gt;
	public string AgencyBlockTemplate { get; set; }

	/// &lt;summary&gt;
	/// The template for the agency page in the HTML guide.
	/// &lt;/summary&gt;
	public string AgencyPageTemplate { get; set; }

	/// &lt;summary&gt;
	/// The template for the command item in the HTML guide.
	/// &lt;/summary&gt;
	public string CommandItemTemplate { get; set; }

	/// &lt;summary&gt;
	/// The image path for the compound command title in the HTML guide.
	/// &lt;/summary&gt;
	public string CompoundCommandTitleImage { get; set; }

	/// &lt;summary&gt;
	/// The image path for the wildcard command title in the HTML guide.
	/// &lt;/summary&gt;
	public string WildcardCommandTitleImage { get; set; }

	/// &lt;summary&gt;
	/// Initializes a new instance of the &lt;see cref="TemplateData"/&gt; class with the specified templates.
	/// &lt;/summary&gt;
	/// &lt;param name="mainTemplate"&gt;The main template for the HTML guide, which includes placeholders for agency blocks.&lt;/param&gt;
	/// &lt;param name="agencyBlockTemplate"&gt;The template for the agency block in the HTML guide.&lt;/param&gt;
	/// &lt;param name="agencyPageTemplate"&gt;The template for the agency page in the HTML guide.&lt;/param&gt;
	/// &lt;param name="commandItemTemplate"&gt;The template for the command item in the HTML guide.&lt;/param&gt;
	/// &lt;param name="compoundCommandTitleImage"&gt;The image path for the compound command title in the HTML guide.&lt;/param&gt;
	/// &lt;param name="wildcardCommandTitleImage"&gt;The image path for the wildcard command title in the HTML guide.&lt;/param&gt;
	public TemplateData(
		string mainTemplate,
		string agencyBlockTemplate,
		string agencyPageTemplate,
		string commandItemTemplate,
		string compoundCommandTitleImage,
		string wildcardCommandTitleImage
	)
	{
		MainTemplate = mainTemplate;
		AgencyBlockTemplate = agencyBlockTemplate;
		AgencyPageTemplate = agencyPageTemplate;
		CommandItemTemplate = commandItemTemplate;
		CompoundCommandTitleImage = compoundCommandTitleImage;
		WildcardCommandTitleImage = wildcardCommandTitleImage;
	}
}

/// &lt;summary&gt;
/// Represents a reference to an agency in the Menu.dat file, containing its name and associated pages.
/// &lt;/summary&gt;
public class AgencyReference
{
	/// &lt;summary&gt;
	/// The name of the agency as defined in the Menu.dat file.
	/// &lt;/summary&gt;
	public string AgencyName;

	/// &lt;summary&gt;
	/// Contains a list of pages associated with this agency, each with its own commands.
	/// &lt;/summary&gt;
	public List&lt;PageReference&gt; Pages = new List&lt;PageReference&gt;();
}

/// &lt;summary&gt;
/// Represents a reference to a page in the Menu.dat file, containing its name and associated commands.
/// &lt;/summary&gt;
public class PageReference
{
	/// &lt;summary&gt;
	/// The name of the page as defined in the Menu.dat file.
	/// &lt;/summary&gt;
	public string PageName;

	/// &lt;summary&gt;
	/// Contains a list of commands associated with this page, each with its own item number and aliases.
	/// &lt;/summary&gt;
	public List&lt;CommandReference&gt; Commands = new List&lt;CommandReference&gt;();
}

/// &lt;summary&gt;
/// Represents a reference to a command in the Menu.dat file, containing its item number, main phrase, and aliases.
/// &lt;/summary&gt;
public class CommandReference
{
	/// &lt;summary&gt;
	/// The item number of the command as defined in the Menu.dat file, with 10 normalized to 0 for keyboard.
	/// &lt;/summary&gt;
	public int ItemNumber;

	/// &lt;summary&gt;
	/// The main phrase of the command, which is the primary label used in the configuration.
	/// &lt;/summary&gt;
	public string MainPhrase;

	/// &lt;summary&gt;
	/// Contains a list of aliases for the command, which are alternative labels that can be used.
	/// &lt;/summary&gt;
	public List&lt;string&gt; Aliases = new List&lt;string&gt;();
}

/// &lt;summary&gt;
/// Parses the Menu.dat file from Falcon BMS and extracts configuration data into AVCS4 BMS Keypress Variables.
/// &lt;/summary&gt;
public sealed class MenuDatParser
{

	private readonly HashSet&lt;string&gt; FlightMenus = new HashSet&lt;string&gt; { "WINGMAN", "ELEMENT", "FLIGHT" };

	private readonly Dictionary&lt;string, List&lt;string&gt;&gt; _aliases;

	private readonly List&lt;string&gt; _otherAgencyLabels = new List&lt;string&gt;();

	/// &lt;summary&gt;
	/// Initializes a new instance of the &lt;see cref="MenuDatParser"/&gt; class.
	/// &lt;/summary&gt;
	/// &lt;param name="aliasesFilePath"&gt;The file path to the command phrase aliases file.&lt;/param&gt;
	public MenuDatParser(dynamic VA, string aliasesFile = null)
	{
		_aliases = LoadAliases(VA, aliasesFile);
	}

	/// &lt;summary&gt;
	/// Parses the Menu.dat file and extracts configuration data into AVCS4 BMS Keypress Variables.
	/// &lt;/summary&gt;
	/// &lt;param name="rootFalconGamePath"&gt;The root path to the Falcon BMS game folder of any version.&lt;/param&gt;
	/// &lt;returns&gt;A &lt;see cref="ConfigData"/&gt; object containing the parsed BMS radio menus and AVCS variables configuration data.&lt;/returns&gt;
	public ConfigData ParseToCfgLines(string menuDatPath)
	{
		var outKeyLines = new List&lt;string&gt;();
		var outCommandLabels = new List&lt;string&gt;();
		var outCompoundCommandLabels = new List&lt;string&gt;();

		var outAllCommands = new List&lt;string&gt;();

		Dictionary&lt;string, AgencyReference&gt; htmlDict = new Dictionary&lt;string, AgencyReference&gt;();
		AgencyReference currentAgencyReference = null;
		PageReference currentPageReference = null;

		string currentMenuCommands = string.Empty;
		string currentAgency = null;
		string currentPage = null;
		string currentPageNumber = null;

		int pageIndex = 0; // 1-based under each menu
		int position = 0;  // 1-based under each page

		var menuDat = File.ReadLines(menuDatPath);

		foreach (var raw in menuDat)
		{
			var line = raw.Trim();
			if (!line.StartsWith("#"))
			{
				continue;
			}

			// ─── MENU ───
			// "#menu &lt;intName&gt; &lt;cat&gt; &lt;num&gt; &lt;num&gt; &lt;color&gt; &lt;AGENCY…&gt;"
			// 0      1          2    3     4     5       6…
			if (line.StartsWith("#menu "))
			{
				outAllCommands.Add(currentMenuCommands);
				var menuTokens = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

				var isValidMenuLine = (menuTokens.Length &gt;= 7);
				if (!isValidMenuLine)
				{
					continue;
				}

				// Grab everything after the color word
				var display = string.Join(" ", menuTokens.Skip(6));
				currentAgency = ExtractMenuGroup(display);

				if (currentAgency.StartsWith("OTHER AGENCIES"))
				{
					currentAgency = currentAgency.Replace("OTHER AGENCIES", "TANKER"); // special case for "Other Agencies Commands"
				}

				currentMenuCommands = currentAgency + ":";

				currentAgencyReference = new AgencyReference
				{
					AgencyName = currentAgency,
				};
				htmlDict[currentAgency] = currentAgencyReference; // Add or replace the current agency

				pageIndex = 0;
				currentPage = null;
				continue;
			}

			if (currentAgency == null)
			{
				continue;   // haven't hit a #menu yet
			}

			// ─── PAGE ───
			// "#page &lt;id&gt; &lt;skip&gt; &lt;skip&gt; &lt;color&gt; &lt;PAGE…&gt;"
			//   0      1     2      3      4      5…
			if (line.StartsWith("#page "))
			{
				var pageTokens = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

				var isValidPageLine = (pageTokens.Length &gt;= 5);
				if (!isValidPageLine)
				{
					continue;
				}

				pageIndex++;

				// drop pageTokens[0]-[3], keep from [4] onward
				var page = string.Join(" ", pageTokens.Skip(4));

				currentPage = page;
				currentPageNumber = pageIndex.ToString();

				currentPageReference = new PageReference
				{
					PageName = currentPage
				};
				currentAgencyReference.Pages.Add(currentPageReference);


				position = 0;

				continue;
			}

			// ─── ITEM ───
			// "#item &lt;type&gt; &lt;skip&gt; &lt;skip&gt; &lt;skip&gt; &lt;skip&gt; &lt;PAGE…&gt;"
			//   0      1      2      3      4      5      6…
			var isValidLine = (line.StartsWith("#item ") &amp;&amp; currentPage != null);
			if (!isValidLine)
			{
				// if this is not a valid item line, skip this line
				continue;
			}

			var itemTokens = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

			var isValidTokens = (itemTokens.Length &gt;= 7);
			if (!isValidTokens)
			{
				// if there are not enough itemTokens, skip this line
				continue;
			}

			// Join itemTokens[6…] into the raw cleanLabel
			var rawLabel = string.Join(" ", itemTokens.Skip(6));
			var cleanLabel = CleanLabel(rawLabel);

			var isFlightMenu = IsFlightMenu(currentAgency);

			position++;
			var key = position % 10;   // 10th -&gt; 0
			var currentVarNamePrefix = "AVCS_BMS_KEY_" + GetAgencySuffix(currentAgency);
			var keyData = currentPageNumber + "_" + currentAgency + "_" + key;
			var aliasedLabel = currentPage + "_" + cleanLabel;

			List&lt;string&gt; allLabels = new List&lt;string&gt;();
			List&lt;string&gt; validLabels = new List&lt;string&gt;();

			// Check in _aliases if this cleanLabel has alternate format alias(es)
			var isInAltAliases = _aliases.ContainsKey(aliasedLabel);

			cleanLabel = isInAltAliases ? aliasedLabel : cleanLabel;
			if (!_aliases.TryGetValue(cleanLabel, out allLabels))
			{
				allLabels = new List&lt;string&gt; { cleanLabel }; // if no alias(es), add the cleanLabel itself
			}

			foreach (var label in allLabels)
			{
				if (string.IsNullOrWhiteSpace(label))
				{
					continue; // skip empty labels
				}

				var validLabel = isFlightMenu ? label : GetValidLabel(label, currentPage);

				validLabels.Add(validLabel);
				outKeyLines.Add(currentVarNamePrefix + validLabel + "=" + keyData);

				var altSpeechLabel = ToHumanReadable(validLabel);
				if (isFlightMenu)
				{
					outCompoundCommandLabels.Add(altSpeechLabel);
				}
				else
				{
					outCommandLabels.Add(altSpeechLabel);
				}

				var optionalSemicolon = currentMenuCommands.EndsWith(":") ? string.Empty : ";";
				currentMenuCommands += optionalSemicolon + altSpeechLabel;
			}

			// Human readable (for HTML display)
			string mainPhrase = ToHumanReadable(validLabels[0]);

			// Build aliases for HTML, filtering out any that (case-insensitive) match the main phrase
			List&lt;string&gt; aliases = validLabels.Select(ToHumanReadable)
											.Where(a =&gt; !string.Equals(a, mainPhrase, StringComparison.OrdinalIgnoreCase))
											.Distinct(StringComparer.OrdinalIgnoreCase)
											.ToList();

			var commandReference = new CommandReference
			{
				ItemNumber = key,
				MainPhrase = mainPhrase,
				Aliases = aliases
			};
			currentPageReference.Commands.Add(commandReference);

		}

		outAllCommands.Add(currentMenuCommands);
		var allCommandVariables = GenerateAllCommandVariables(outAllCommands);

		var agencyRefs = htmlDict.Values.ToList();

		ConfigData configData = new ConfigData(
			outKeyLines,
			outCommandLabels,
			outCompoundCommandLabels,
			allCommandVariables,
			agencyRefs
		);

		return configData; /// boom! drops mic! grabs coffee!! picks up mic and inspects for damage cuz dayum I need it for voice commands... why did I drop that thing?! :D
	}


	private bool IsFlightMenu(string currentMenu)
	{
		return FlightMenus.Contains(currentMenu);
	}

	private string GetAgencySuffix(string currentAgency)
	{
		return IsFlightMenu(currentAgency) ? currentAgency + "_" : string.Empty;
	}

	private string GetValidLabel(string label, string page)
	{
		// If this new label already exists on running list, enforce a prefix of currentPage.ToTitleCase() + cleanLabel
		if (_otherAgencyLabels.Contains(label))
		{
			var labelPrefix = GetFirstWordInString(page);

			TextInfo textInfo = CultureInfo.InvariantCulture.TextInfo;
			labelPrefix = textInfo.ToTitleCase(labelPrefix.ToLower());

			label = labelPrefix + label;
		}

		// Add to running list of labels not belonging to Flight agency
		_otherAgencyLabels.Add(label);

		return label;
	}

	private string GetFirstWordInString(string input)
	{
		// Split by whitespace and take the first word
		var words = input.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
		return words.Length &gt; 0 ? words[0] : string.Empty;
	}

	private string ToHumanReadable(string input)
	{
		if (string.IsNullOrEmpty(input))
		{
			return input;
		}

		// Convert PascalCase to human-readable format, with handlers for numbers and acronyms
		var sb = new StringBuilder();
		for (int i = 0; i &lt; input.Length; i++)
		{
			char c = input[i];

			// If this char is uppercase or a number, and either:
			//  it's not the first char AND previous was lowercase, -OR-
			//  it's not the last char AND next is lowercase,
			// then this is a word boundary.
			var isUpperOrNumber = char.IsUpper(c) || !char.IsLetter(c);
			var isPrevLower = (i &gt; 0 &amp;&amp; char.IsLower(input[i - 1]));
			var isNextLower = (i + 1 &lt; input.Length &amp;&amp; char.IsLower(input[i + 1]));

			if (isUpperOrNumber &amp;&amp; (isPrevLower || isNextLower))
			{
				sb.Append(' ');
			}

			sb.Append(c);
		}

		// Trim in case there was a space inserted at the very start
		return sb.ToString().Trim();
	}

	private string ExtractMenuGroup(string display)
	{
		// From "ELEMENT COMMANDS" → "ELEMENT", from "AWACS COMMANDS" → "AWACS"
		const string suffix = " COMMANDS";
		if (display.EndsWith(suffix, StringComparison.OrdinalIgnoreCase))
		{
			display = display.Substring(0, display.Length - suffix.Length);
		}

		return display.ToUpperInvariant();
	}

	private string CleanLabel(string input)
	{
		// Remove everything but letters/digits/spaces, then CamelCase
		var sb = new StringBuilder();
		foreach (var c in input)
		{
			if (char.IsLetterOrDigit(c) || char.IsWhiteSpace(c))
			{
				sb.Append(c);
			}
		}

		var words = sb
			.ToString()
			.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

		sb.Clear();
		foreach (var w in words)
		{
			sb.Append(char.ToUpperInvariant(w[0]));
			if (w.Length &gt; 1)
			{
				sb.Append(w.Substring(1));
			}
		}

		return sb.ToString();
	}


	private List&lt;string&gt; GenerateAllCommandVariables(List&lt;string&gt; commandLines)
	{
		const string prefix = "AVCS_BMS_ALL_COMMANDS_";

		var allCommandVariables = commandLines
			.Where(line =&gt; !string.IsNullOrWhiteSpace(line) &amp;&amp; line.Contains(':'))
			.Select(line =&gt;
			{
				var parts = line.Split(new[] { ':' }, 2, StringSplitOptions.RemoveEmptyEntries);
				var agencyName = parts[0].Trim();
				var commandName = parts.Length &gt; 1 ? parts[1].Trim() : "";
				return prefix + agencyName + "=" + commandName;
			})
			.ToList();

		return allCommandVariables;
	}

	private Dictionary&lt;string, List&lt;string&gt;&gt; LoadAliases(dynamic VA, string textFile)
	{
		// If no alias data, just return empty
		if (string.IsNullOrWhiteSpace(textFile))
		{
			return new Dictionary&lt;string, List&lt;string&gt;&gt;(StringComparer.OrdinalIgnoreCase);
		}

		var dict = new Dictionary&lt;string, List&lt;string&gt;&gt;(StringComparer.OrdinalIgnoreCase);

		var lines = textFile.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
		foreach (var line in lines)
		{
			var parts = line.Split(new[] { '=' }, 2);
			if (parts.Length != 2)
			{
				continue;
			}

			var key = parts[0].Trim();

			VA.SetText(key, null);

			var aliases = !parts[1].Contains(';') ? new List&lt;string&gt; { parts[1] } :
				parts[1].Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)
						.Select(a =&gt; a.Trim())
						.ToList();

			if (!dict.ContainsKey(key))
			{
				dict[key] = new List&lt;string&gt;();
			}

			dict[key].AddRange(aliases);
		}

		// In case of null (any issue not thrown), just return empty
		return dict ?? new Dictionary&lt;string, List&lt;string&gt;&gt;(StringComparer.OrdinalIgnoreCase);
	}

}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Collections.dll;System.Linq.dll;System.Linq.Expressions.dll;System.Security.Claims.dll;System.Security.Principal.Windows.dll;System.Windows.Forms.dll;</Context2>
          <Context3>AVCS4_BMS_RadioCommandsGenerator_V2</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_RadioCommandsGenerator_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>cdcd38be-d8b3-4b1e-9055-b0629ccab0a7</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>662e008d-69cf-4253-8fbf-d03e19a346f4</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d0fdd1ea-0d6e-496f-ba8c-02ae93676217</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>21fba702-5a9e-45dc-aa74-a05ec7f6d2dd</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>32766a61-ac63-4d8c-8b74-c45b87fc2954</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_GetAliasesFilePath  -- Get the local path to the global radio command aliases file under AVCS resources folder</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>9b523116-3731-45ea-a14b-45c08264d92f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e1dec17f-64de-4e6a-8d1a-ca12bff653df</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>bb6b7feb-5f88-4aa0-92b9-1a53ef0a499a</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>6a194bd9-d5ab-4f35-8586-5ee31dbcdc12</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.IO;

/*
Required Referenced Assemblies V1 and V2:
Microsoft.CSharp.dll;System.dll
*/

public class VAInline
{

	/// &lt;summary&gt;
	/// Just a tiny helper, update here if other inlines using this are altered
	/// &lt;/summary&gt;
	public void main()
	{
		var templatePath = VA.GetText("commref_bms_command_item_template") ?? string.Empty;
		if (string.IsNullOrEmpty(templatePath))
		{
			return;
		}

		var rootPath = Path.GetDirectoryName(templatePath);
		if (rootPath == null)
		{
			return;
		}

		var aliasesFile = Path.Combine(rootPath, "aliases.txt");
		VA.SetText("aliases", aliasesFile);
	}
}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll</Context2>
          <Context3>AVCS4_BMS_GetAliasesFilePath</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_GetAliasesFilePath_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>0ba287e1-f719-4984-b83f-f8ce3829bb3e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>faf146a4-5180-472e-978a-33636945e5b8</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>bd262df5-e0e2-43ae-a618-d10caa51583f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>25e82d4d-e3ce-445d-9d15-ce9e45275b0a</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ec48d814-e380-4d80-95e4-ce9f0b53089c</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_SplitAliasCommand  -- A tiny helper command to split key/value of a command alias data variable</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>0c76ee23-befd-4747-b872-5fb41a9fe7d9</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>78674579-b453-4a45-8bb5-cc321149965f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d1515673-4e1a-4fec-b7fc-1ed55c3200e6</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>be5c294b-ab16-48d8-be99-86d7910a040e</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;

/*
Required Referenced Assemblies V1 and V2:
Microsoft.CSharp.dll;System.dll
*/

public class VAInline
{

	/// &lt;summary&gt;
	/// Just a tiny helper, update here if other inlines using this are altered
	/// &lt;/summary&gt;
	public void main()
	{
		var aliasedCommand = VA.GetText("~aliasedCommand") ?? string.Empty;

		if (!string.IsNullOrEmpty(aliasedCommand) &amp;&amp; aliasedCommand.Contains(":"))
		{
			var aliasParts = aliasedCommand.Split(new[] { ':' }, 2, StringSplitOptions.RemoveEmptyEntries);

			VA.SetText("~command", aliasParts[0].Trim());
			VA.SetText("~alias", aliasParts[1].Trim());
		}
	}
}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll</Context2>
          <Context3>AVCS4_BMS_SplitAliasCommand</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_SplitAliasCommand_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>2ce53c5d-458e-4c11-b0bd-1d9748d4b504</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>de59e700-b7ee-4b27-824d-d48a5e57f234</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>58c33eb5-cbd5-461f-860f-ccc5ed9ff90c</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>9b09a135-8f45-428a-9ec6-a384ef63e7dc</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>64ee91e0-e3d8-416e-9a12-ca9ff4e488cd</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_SplitWildcardAliases  -- Split dynamic compound and wildcard commands into a semicolon delimited list of commands</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>28ce188b-ac5b-481b-9e04-934181fdb2f4</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>c5869cbf-1a38-4f8c-9131-f55e5828d2ec</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>48360302-10eb-4231-b137-63197d7c528d</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>99ec1911-4338-4b1f-a740-6bfccec003ea</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// AVCS - Split aliases with semicolon and Handle Wildcard Aliases for non-Flight Agencies
// by SemlerPDX July2025

using System;
using System.Collections.Generic;

/*
Required Referenced Assemblies V1 and V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;
*/

public class VAInline
{
	private static readonly HashSet&lt;string&gt; FlightAgency = new HashSet&lt;string&gt; { "WINGMAN", "ELEMENT", "FLIGHT" };
	
	
	public void main()
	{
		var aliases = VA.GetText("~alias") ?? string.Empty;  //  Null check lives outside here, this will always have value, else allow throw
		var agency = VA.GetText("~agency") ?? string.Empty;  //  Null check lives outside here, this will always have value, else allow throw
		
		var isFlightAgency = FlightAgency.Contains(agency);
		
		string[] extractedAliases = VA.ExtractPhrases(aliases);
		List&lt;string&gt; preparedAliases = new List&lt;string&gt;();
		
		List&lt;string&gt; alreadyAddedAliases = new List&lt;string&gt;();
		foreach (var alias in extractedAliases)
		{
			if (string.IsNullOrWhiteSpace(alias) &amp;&amp; !alreadyAddedAliases.Contains(alias))
			{
				continue;
			}
			alreadyAddedAliases.Add(alias);
			
			// Add a wildcard asterisk prefix to non-flight agency aliases
			var optionalPrefix = isFlightAgency ? "" : "*";
			var preparedAlias = optionalPrefix + alias;
			preparedAliases.Add(preparedAlias);
		}
		
		var splitAliases = string.Join(";", preparedAliases);
		VA.SetText("~splitAlias", splitAliases);
	}
} </Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;</Context2>
          <Context3>AVCS4_BMS_SplitWildcardAliases</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_SplitWildcardAliases_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>8a9fc7c5-6afb-4151-9e91-1a36611879a6</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>38fd3630-4a07-47c6-b786-288133f79b28</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>9bf1830f-e5d0-4c1f-8afd-b75258afaeb7</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>dbd26438-e58f-48a6-b56d-a750fb3ef70c</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>dba261f9-459c-4a67-8724-2bd20f0ef1b3</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_CheckExistingAliases  -- Checks new alias input againt existing commands for duplicates</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>b9af8a60-0819-4182-bb98-603ae1eaab22</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1d6d4620-d8ab-4358-97c9-54f1eadf52ec</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>5b9de0fc-ad81-49ee-89ef-d80173ed9c25</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>5b083613-0437-4e62-b185-210ff1b30721</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.Collections.Generic;

/*
Required Referenced Assemblies V1 and V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;
*/

public class VAInline
{
	private static readonly string AllCommandsVarPrefix = "AVCS_BMS_ALL_COMMANDS_";
	private static readonly HashSet&lt;string&gt; FlightAgency = new HashSet&lt;string&gt; { "WINGMAN", "ELEMENT", "FLIGHT" };

	private List&lt;string&gt; OtherAgencies = new List&lt;string&gt; { "AWACS", "ATC", "TANKER" };

	public void main()
	{
		string baseCommands = string.Empty;
		List&lt;string&gt; allCommandSets = new List&lt;string&gt;();

		var currentAliases = VA.GetText("~currentAliases") ?? string.Empty;
		var agency = VA.GetText("~agency") ?? string.Empty; // Null or Empty check lives outside and well above this inline - will always have value, else allow throw

		var isFlightAgency = FlightAgency.Contains(agency);

		if (!isFlightAgency)
		{
			foreach (var otherAgency in OtherAgencies)
			{
				var allCommandsVarName = AllCommandsVarPrefix + otherAgency;
				var newCommands = VA.GetText(allCommandsVarName) ?? string.Empty;
				allCommandSets.Add(newCommands);
			}

			baseCommands = string.Join(";", allCommandSets);
		}
		else
		{
			var allCommandsVarName = AllCommandsVarPrefix + agency;
			baseCommands = VA.GetText(allCommandsVarName) ?? string.Empty;
		}


		var aliases = VA.GetText("~alias") ?? string.Empty; // Null or Empty check lives just outside and above this inline - will always have value, else allow throw
		string[] extractedAliases = VA.ExtractPhrases(aliases);


		int aliasesLength = extractedAliases.Length;
		if (aliasesLength &gt; 10)
		{
			VA.SetBoolean("~avcs_alias_extreme_count", true);
			VA.SetInt("~avcs_alias_count", aliasesLength);
		}

		foreach (var alias in extractedAliases)
		{
			if (string.IsNullOrWhiteSpace(alias))
			{
				continue;
			}

			if (currentAliases.Contains(alias) || baseCommands.Contains(alias))
			{
				VA.SetBoolean("~avcs_alias_exists", true);
				VA.SetText("~avcs_existing_alias", alias);
				return;
			}
		}
	}

}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;</Context2>
          <Context3>AVCS4_BMS_CheckExistingAliases</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_CheckExistingAliases_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>f20730d2-7ed2-46fd-bcb5-ee76f2e151d0</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>61b534b4-dfd1-42ac-a0d9-4961250dd0f5</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ab08f087-8c2c-42cb-aa84-ffd1061e0e7b</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>f8d4f363-4490-41b1-88ef-3295392d6ffa</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>0b6d0f4b-1b50-4d09-919d-2fa84161672e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_CheckEditedAliases  -- Checks edited alias input againt existing commands for duplicates</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>2f4aec82-720b-4ef5-b88d-8fefefba87d9</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1de415ad-3e1d-4eda-aac1-fa8d6b115175</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>9360466c-5bd6-4bae-9a7a-83051fb60d26</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>495c2572-a124-4e49-a800-a95558500dcb</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.Collections.Generic;

/*
Required Referenced Assemblies V1 and V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;
*/

public class VAInline
{
	private static readonly string AllCommandsVarPrefix = "AVCS_BMS_ALL_COMMANDS_";
	private static readonly HashSet&lt;string&gt; FlightAgency = new HashSet&lt;string&gt; { "WINGMAN", "ELEMENT", "FLIGHT" };

	private static readonly List&lt;string&gt; OtherAgencies = new List&lt;string&gt; { "AWACS", "ATC", "TANKER" };

	public void main()
	{
		string baseCommands = string.Empty;
		List&lt;string&gt; allCommandSets = new List&lt;string&gt;();

		var currentAliases = VA.GetText("~currentAliases") ?? string.Empty;
		var agency = VA.GetText("~agency") ?? string.Empty; // Null or Empty check lives outside and well above this inline - will always have value, else allow throw

		var isFlightAgency = FlightAgency.Contains(agency);

		if (!isFlightAgency)
		{
			foreach (var otherAgency in OtherAgencies)
			{
				var allCommandsVarName = AllCommandsVarPrefix + otherAgency;
				var newCommands = VA.GetText(allCommandsVarName) ?? string.Empty;
				allCommandSets.Add(newCommands);
			}

			baseCommands = string.Join(";", allCommandSets);
		}
		else
		{
			var allCommandsVarName = AllCommandsVarPrefix + agency;
			baseCommands = VA.GetText(allCommandsVarName) ?? string.Empty;
		}

		var aliases = VA.GetText("~alias") ?? string.Empty; // Null or Empty check lives just outside and above this inline - will always have value, else allow throw
		string[] extractedAliases = VA.ExtractPhrases(aliases);

		// This is an edit, so SOME parts of the new extracted aliases may exist in currentAliases
		// Build set of current aliases for fast lookup
		HashSet&lt;string&gt; currentAliasSet = new HashSet&lt;string&gt;();
		if (!string.IsNullOrEmpty(currentAliases))
		{
			string[] arr = currentAliases.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
			for (int i = 0; i &lt; arr.Length; i++)
			{
				string v = arr[i].Trim();
				if (!string.IsNullOrEmpty(v))
				{
					currentAliasSet.Add(v);
				}
			}
		}

		// Filter extractedAliases to only unique and not in currentAliasSet
		List&lt;string&gt; unique = new List&lt;string&gt;();
		HashSet&lt;string&gt; added = new HashSet&lt;string&gt;();
		for (int i = 0; i &lt; extractedAliases.Length; i++)
		{
			string v = extractedAliases[i].Trim();
			if (string.IsNullOrEmpty(v)) continue;
			if (!currentAliasSet.Contains(v) &amp;&amp; !added.Contains(v))
			{
				unique.Add(v);
				added.Add(v);
			}
		}
		extractedAliases = unique.ToArray();

		int aliasesLength = extractedAliases.Length;
		if (aliasesLength &gt; 10)
		{
			VA.SetBoolean("~avcs_alias_extreme_count", true);
			VA.SetInt("~avcs_alias_count", aliasesLength);
		}

		foreach (var alias in extractedAliases)
		{
			if (string.IsNullOrWhiteSpace(alias))
			{
				continue;
			}

			if (currentAliases.Contains(alias) || baseCommands.Contains(alias))
			{
				VA.SetBoolean("~avcs_alias_exists", true);
				VA.SetText("~avcs_existing_alias", alias);
				return;
			}
		}
	}

}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;</Context2>
          <Context3>AVCS4_BMS_CheckEditedAliases</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_CheckEditedAliases_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>4665cd55-cd5a-467a-a391-68d42e8e98b3</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a53f98aa-5a84-4fb7-a0a2-fef974de3e2c</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>96e1fc92-9004-4428-b5ab-6e30eb8bb009</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>5e9450d6-8b2a-462a-a414-23e00aba8a03</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d043f46d-cd1d-4205-9bbc-52a125cf35aa</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_SaveAliasKeys  -- Extract dynamic aliases to create individual key for each one - including populating the SFS Save Variable/Value for them</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>c91f11b7-135e-4261-9cd2-f1099bb1f1a1</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d24b881b-73b8-4b97-8b38-5826819e64e6</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>430782b0-ce98-4370-8bff-138701969902</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>dcc742f3-9a50-4baa-bbc4-0e34ddf035a8</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// AVCS - Create Alias Key Variables For Save
// by SemlerPDX July2025
// -- outputs VA Text Variables for the AVCS Save File System to iterate through and save to user save file

using System;
using System.Collections.Generic;

/*
Required Referenced Assemblies V1 and V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;
*/

public class VAInline
{
	private static readonly string KeyVarPrefix = "AVCS_BMS_KEY_";
	private static readonly string SavedVarPrefix = "AVCS_SFS_SAVED_name_";
	private static readonly string SavedValuePrefix = "AVCS_SFS_SAVED_value_";

	private static readonly HashSet&lt;string&gt; FlightAgency = new HashSet&lt;string&gt; { "WINGMAN", "ELEMENT", "FLIGHT" };


	public void main()
	{
		var aliases = VA.GetText("~alias") ?? string.Empty;  //  Null check lives outside here, this will always have value, else allow throw
		var agency = VA.GetText("~agency") ?? string.Empty;  //  Null check lives outside here, this will always have value, else allow throw

		var command = VA.GetText("~command") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(command))
		{
			VA.WriteToLog("AVCS ERROR:  cannot locate value of '~command' - should not be empty at this point", "pink");
			VA.Profile.Reset();
			return;
		}

		command = command.Replace(" ", "");

		int savedRequests = VA.GetInt("AVCS_SFS_SAVED_requests") ?? 2; // Should be two saved variables waiting at least

		string[] extractedAliases = VA.ExtractPhrases(aliases);

		var isFlightAgency = FlightAgency.Contains(agency);
		var newKeyVarPrefix = isFlightAgency ? KeyVarPrefix + agency + "_" : KeyVarPrefix;

		var keyValue = VA.GetText(newKeyVarPrefix + command) ?? string.Empty;

		if (string.IsNullOrWhiteSpace(keyValue))
		{
			VA.WriteToLog("AVCS ERROR:  cannot locate value of '" + newKeyVarPrefix + command + "' saved key variable", "pink");
			VA.Profile.Reset();
			return;
		}

		List&lt;string&gt; alreadyAdded = new List&lt;string&gt;();
		foreach (var alias in extractedAliases)
		{
			if (string.IsNullOrWhiteSpace(alias) &amp;&amp; !alreadyAdded.Contains(alias))
			{
				continue;
			}

			alreadyAdded.Add(alias);
			savedRequests++;

			var aliasConcat = alias.Replace(" ", "");
			var keyVarName = newKeyVarPrefix + aliasConcat;

			VA.SetText(keyVarName, keyValue);

			var savedVarName = SavedVarPrefix + savedRequests.ToString();
			VA.SetText(savedVarName, keyVarName);

			var savedVarValue = SavedValuePrefix + savedRequests.ToString();
			VA.SetText(savedVarValue, keyValue);
		}

		VA.SetInt("AVCS_SFS_SAVED_requests", savedRequests);
	}
}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;</Context2>
          <Context3>AVCS4_BMS_SaveAliasKeys</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_SaveAliasKeys_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>6913c6f2-e910-47ac-a62c-304c53e9054b</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>7ff70ec1-82fe-48a3-989f-98f2d7a3ee09</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d5aae51f-6c74-4621-83db-f230fbcb316c</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ef522349-d908-4843-8844-331bb6eef44a</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>4844108a-2746-43a3-9406-9e0eada28049</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_SaveAliasCommands  -- Append new (potentially dynamic) phrase alias(es) to end of existing or empty commands variable</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>728c94af-6099-41b7-944b-b35914ac8181</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>c0a9cb4a-c192-4da7-94fb-b7603bd35dea</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ac183250-ccf8-4fd5-bb1c-7d558246182e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>f77cb3d6-05ab-4428-b354-155b83e481c3</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.Collections.Generic;

/*
Required Referenced Assemblies V1 and V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;
*/

public class VAInline
{
	private static readonly string AliasCommandsVarPrefix = "AVCS_BMS_ALIAS_COMMANDS_";
	private static readonly string SavedVarPrefix = "AVCS_SFS_SAVED_name_";
	private static readonly string SavedValuePrefix = "AVCS_SFS_SAVED_value_";

	public void main()
	{
		// Null check lives outside here, this will always have value, else allow throw
		var agency = VA.GetText("~agency") ?? string.Empty;
		var oldCommands = VA.GetText("~oldAlias") ?? string.Empty; // Dynamic Phrases possible
		if (string.IsNullOrEmpty(oldCommands))
		{
			// No old commands to process, return early
			return;
		}

		oldCommands = oldCommands.Replace(",", ";");
		string[] deprecatedCommands = VA.ExtractPhrases(oldCommands);

		var existingAgencyCommands = VA.GetText(AliasCommandsVarPrefix + agency) ?? string.Empty;
		var existingCommands = existingAgencyCommands.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);

		// Build a HashSet for deprecated (removal) commands
		HashSet&lt;string&gt; deprecatedSet = new HashSet&lt;string&gt;();
		for (int i = 0; i &lt; deprecatedCommands.Length; i++)
		{
			string val = deprecatedCommands[i].Trim();
			if (!string.IsNullOrEmpty(val))
				deprecatedSet.Add(val);
		}

		List&lt;string&gt; finalCommands = new List&lt;string&gt;();

		// Extract all aliases from potential dynamic phrase structures into individual commands
		for (int i = 0; i &lt; existingCommands.Length; i++)
		{
			string command = existingCommands[i].Trim();
			if (string.IsNullOrEmpty(command))
			{
				continue;
			}

			if (deprecatedSet.Contains(command))
			{
				continue;
			}

			finalCommands.Add(command);
		}

		var newCommands = VA.GetText("~alias") ?? string.Empty; //.Replace(",", ";"); // should be dynamic phrase, unchanged
		string[] editedCommands = VA.ExtractPhrases(newCommands);
		var joinedEditedCommands = string.Join(";", editedCommands);

		finalCommands.Add(joinedEditedCommands);
		var joinedCommands = string.Join(";", finalCommands);

		int savedRequests = VA.GetInt("AVCS_SFS_SAVED_requests") ?? 0;
		savedRequests++;
		VA.SetInt("AVCS_SFS_SAVED_requests", savedRequests);

		VA.SetText(AliasCommandsVarPrefix + agency, joinedCommands);

		var savedVarName = SavedVarPrefix + savedRequests.ToString();
		VA.SetText(savedVarName, AliasCommandsVarPrefix + agency);

		var savedVarValue = SavedValuePrefix + savedRequests.ToString();
		VA.SetText(savedVarValue, joinedCommands);
	}
}
</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;</Context2>
          <Context3>AVCS4_BMS_SaveAliasCommands</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_SaveAliasCommands_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>09aa0eea-398c-42f7-96d4-8d322ea43c92</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>8d02bb2f-994d-44bd-881c-ca126edd8a22</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>cdba364d-f67e-43e0-9f5e-8d4b9efcf2b7</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ddc1e4cf-ad7f-43fe-87a4-a8fcc4cf8f48</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>3a8e0387-e44d-465b-bb19-fd7e0fb2238a</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_DeleteAliasKeys  -- For-each to set key variables to be deleted from user save file</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>10a16fa6-5b5e-4548-b1fa-596f770b1226</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>2b4cac32-9a1e-42ad-999d-c304c2f27dd3</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>8c777569-63a1-4302-83ed-d7bc419cdd19</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>7d8712c7-b7bc-4df8-9936-0bdb92837a4a</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>// AVCS - Mark Deprecated Alias Key Variables For Deletion
// by SemlerPDX July2025
// VETERANS-GAMING.COM

using System;
using System.Collections.Generic;
using System.Linq;

/*
Required Referenced Assemblies V1 and V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Collections.dll;System.Linq.dll
*/

public class VAInline
{
	private static readonly string KeyVarPrefix = "AVCS_BMS_KEY_";
	private static readonly string SavedVarPrefix = "AVCS_SFS_SAVED_name_";

	private static readonly HashSet&lt;string&gt; FlightAgency = new HashSet&lt;string&gt; { "WINGMAN", "ELEMENT", "FLIGHT" };

	/// &lt;summary&gt;
	/// This inline function processes the aliases and agency information to mark key variables for deletion.&lt;br/&gt;
	/// It may be called from the 'EDIT' logic flow of this Aliases command, or from the 'DELETE' logic flow.&lt;br/&gt;
	/// The job of this function is to set Save File System (SFS) variables that will be used to delete the&lt;br/&gt;
	/// values from the user save file, and nullify the variables in the active session.
	/// &lt;/summary&gt;
	public void main()
	{
		var aliases = VA.GetText("~alias") ?? string.Empty;  //  Null check lives outside here, this will always have value, else allow throw
		var agency = VA.GetText("~agency") ?? string.Empty;  //  Null check lives outside here, this will always have value, else allow throw

		List&lt;string&gt; deprecatedAliases;
		var extractedAliases = VA.ExtractPhrases(aliases).ToList();

		// In 'EDIT' logic flow, '~alias' is edit of this, so this will always have value - else is 'DELETE' logic flow
		var oldAliases = VA.GetText("~oldAlias") ?? string.Empty;
		if (string.IsNullOrWhiteSpace(oldAliases))
		{
			deprecatedAliases = extractedAliases;
		}
		else
		{
			oldAliases = oldAliases.Replace(",", ";");
			var extractedOldAliases = VA.ExtractPhrases(oldAliases).ToList();

			deprecatedAliases = extractedOldAliases
				.Except(extractedAliases, StringComparer.OrdinalIgnoreCase)
				.ToList();
		}

		var isFlightAgency = FlightAgency.Contains(agency);
		var newKeyVarPrefix = isFlightAgency ? KeyVarPrefix + agency + "_" : KeyVarPrefix;

		int savedRequests = 0;
		foreach (var alias in deprecatedAliases)
		{
			if (string.IsNullOrWhiteSpace(alias))
			{
				continue;
			}

			savedRequests++;

			var aliasConcat = alias.Replace(" ", "");
			var keyVarName = newKeyVarPrefix + aliasConcat;
			var savedVarName = SavedVarPrefix + savedRequests.ToString();

			VA.SetText(savedVarName, keyVarName);
		}

		VA.SetInt("AVCS_SFS_SAVED_requests", savedRequests);
	}
}</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;System.Collections.dll;System.Linq.dll</Context2>
          <Context3>AVCS4_BMS_DeleteAliasKeys</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_DeleteAliasKeys_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a76219ab-47a8-4df2-a52b-77792ec49aec</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e60a763f-ca4d-44bd-97e4-e83e94f11536</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ab1567fe-8687-46f9-969d-ba4b6b338049</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>6f62b5da-c257-4883-8cb1-b8b285b9eb78</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>bd210410-c34b-4b4c-962f-725301c7b907</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_DeleteAliasCommands  -- Delete (potentially dynamic) phrase alias(es) from existing commands variable (if any)</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>3f41af88-b511-4640-b3db-30246872a4b0</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>a361d945-c2fe-457e-ab9f-151f63f50ca4</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1717318c-6ecf-4049-9108-be2252f03341</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>cb1fb606-e8b8-4527-b0fe-71d56b87dabc</Id>
          <ActionType>InlineFunctionCS</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>using System;
using System.Collections.Generic;

/*
Required Referenced Assemblies V1 and V2:
Microsoft.CSharp.dll;System.dll;System.Core.dll;
*/

public class VAInline
{
	private static readonly string AliasCommandsVarPrefix = "AVCS_BMS_ALIAS_COMMANDS_";
	private static readonly string SavedVarPrefix = "AVCS_SFS_SAVED_name_";
	private static readonly string SavedValuePrefix = "AVCS_SFS_SAVED_value_";

	private static readonly HashSet&lt;string&gt; FlightAgency = new HashSet&lt;string&gt; { "WINGMAN", "ELEMENT", "FLIGHT" };

	public void main()
	{
		var agency = VA.GetText("~agency") ?? string.Empty;

		// Null check lives outside here, this will always have value, else allow throw
		var oldCommands = VA.GetText("~alias") ?? string.Empty;
		oldCommands = oldCommands.Replace(",", ";"); // Dynamic command phrases possible
		string[] extractedOldCommands = VA.ExtractPhrases(oldCommands);

		var isFlightAgency = FlightAgency.Contains(agency);
		var wildcardPrefix = isFlightAgency ? "" : "*";

		List&lt;string&gt; commandBuilder = new List&lt;string&gt;();
		foreach (var command in extractedOldCommands)
		{
			string formattedCommand = wildcardPrefix + command;
			commandBuilder.Add(formattedCommand);
		}

		string[] deprecatedCommands = commandBuilder.ToArray();

		var existingAgencyCommands = VA.GetText(AliasCommandsVarPrefix + agency) ?? string.Empty;
		var existingCommands = existingAgencyCommands.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);

		// Build a HashSet for deprecated (removal) commands
		HashSet&lt;string&gt; deprecatedSet = new HashSet&lt;string&gt;();
		for (int i = 0; i &lt; deprecatedCommands.Length; i++)
		{
			string val = deprecatedCommands[i].Trim();
			if (!string.IsNullOrEmpty(val))
			{
				deprecatedSet.Add(val);
			}
		}

		List&lt;string&gt; finalCommands = new List&lt;string&gt;();

		// Extract all aliases from potential dynamic phrase structures into individual commands
		for (int i = 0; i &lt; existingCommands.Length; i++)
		{
			string command = existingCommands[i].Trim();
			if (string.IsNullOrEmpty(command))
			{
				continue;
			}

			if (deprecatedSet.Contains(command))
			{
				continue;
			}

			finalCommands.Add(command);
		}

		var joinedCommands = string.Join(";", finalCommands);


		if (string.IsNullOrWhiteSpace(joinedCommands))
		{
			// Joined empty - exiting and flagging for deletion
			return;
		}

		int savedRequests = VA.GetInt("AVCS_SFS_SAVED_requests") ?? 0;
		savedRequests++;

		VA.SetInt("AVCS_SFS_SAVED_requests", savedRequests);

		VA.SetText(AliasCommandsVarPrefix + agency, joinedCommands);

		var savedVarName = SavedVarPrefix + savedRequests.ToString();
		VA.SetText(savedVarName, AliasCommandsVarPrefix + agency);

		var savedVarValue = SavedValuePrefix + savedRequests.ToString();
		VA.SetText(savedVarValue, joinedCommands);
	}
}
</Context>
          <Context2 xml:space="preserve">Microsoft.CSharp.dll;System.dll;System.Core.dll;</Context2>
          <Context3>AVCS4_BMS_DeleteAliasCommands</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_DeleteAliasCommands_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T16:00:00Z</DateContext1>
          <DateContext2>0001-01-01T16:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>7bff6ce1-2177-40d7-b972-6246989e6cb0</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>dc2e39b3-1756-46e3-8c76-92f8cc71b454</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>71f3ff68-1c21-4389-91da-1e7ce51fd6a3</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>1a17170a-6700-44c5-9274-7fd926877c1a</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>d6d7e291-8223-426a-8d4a-8d6e8ed8ef5f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  AVCS4_BMS_LocalizeDecimalsText  -- Update existing text variables containing decimal value choices with current culture decimal separator during profile init</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>9df02b6d-3084-4322-bd2b-cb8c7eb7fe1e</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  REQUIRED SETTINGS:</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>ec54620d-ae61-4e67-872f-7e22870d9258</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Wait for the inline function to finish before continuing:   YES</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>e135a72b-469e-4cf1-9c2b-dc54f1c28cd8</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>//  Retain instance:    NO</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>029e0acc-e014-4090-947d-ed4a2e51af64</Id>
          <ActionType>InlineFunctionVB</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>Imports Microsoft.VisualBasic
Imports System
Imports System.Globalization

'Required Referenced Assemblies V1 and V2:
'Microsoft.VisualBasic.dll;System.dll

Public Class VAInline
	Dim decimalSeparator As String = CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator
	Dim activeProfile As String = "BMS"
	Dim timingChoices As String = "0.10;0.07;0.06;0.05;0.04;0.03;0.02"
	Dim timeHeld As String = "0.05"
	Dim timeBetween As String = "0.05"

	'Recasts text variables containing decimal choices with current culture decimal separators
	Public Sub Main()

		If Not (decimalSeparator.Equals(".")) Then
			If ((VA.GetText("AVCS_ACTIVE_PROFILE")) IsNot Nothing) Then
				activeProfile = VA.GetText("AVCS_ACTIVE_PROFILE")
			End If

			If ((VA.GetText("AVCS_" + activeProfile + "_KEYPRESS_TIMING_CHOICES")) IsNot Nothing) Then
				timingChoices = VA.GetText("AVCS_" + activeProfile + "_KEYPRESS_TIMING_CHOICES")
			End If

			If ((VA.GetDecimal("AVCS_" + activeProfile + "_TimeKeyIsHeldDown")) IsNot Nothing) Then
				timeHeld = VA.GetDecimal("AVCS_" + activeProfile + "_TimeKeyIsHeldDown").ToString()
			End If

			If ((VA.GetDecimal("AVCS_" + activeProfile + "_TimeBetweenKeys")) IsNot Nothing) Then
				timeBetween = VA.GetDecimal("AVCS_" + activeProfile + "_TimeBetweenKeys").ToString()
			End If

			VA.SetText("AVCS_" + activeProfile + "_KEYPRESS_TIMING_CHOICES", timingChoices.Replace(".", decimalSeparator))

			Dim decimalValue As Decimal
			Dim decStrValue As String = timeHeld.Replace(".", decimalSeparator)
			If Decimal.TryParse(decStrValue, NumberStyles.Any, CultureInfo.CurrentCulture, decimalValue) Then
				VA.SetDecimal("AVCS_" + activeProfile + "_TimeKeyIsHeldDown", decimalValue)
			End If

			decStrValue = timeBetween.Replace(".", decimalSeparator)
			If Decimal.TryParse(decStrValue, NumberStyles.Any, CultureInfo.CurrentCulture, decimalValue) Then
				VA.SetDecimal("AVCS_" + activeProfile + "_TimeBetweenKeys", decimalValue)
			End If

		End If

	End Sub

End Class</Context>
          <Context2 xml:space="preserve">Microsoft.VisualBasic.dll;System.dll</Context2>
          <Context3>AVCS4_BMS_LocalizeDecimalsText</Context3>
          <Context4>{TXT:AVCS4_BMS_BuildOutputFolder}\AVCS4_BMS_LocalizeDecimalsText_V{STATE_VA_VERSION_MAJOR}.dll</Context4>
          <X>1</X>
          <Y>1</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-01T08:00:00Z</DateContext1>
          <DateContext2>0001-01-01T08:00:00Z</DateContext2>
          <Disabled>true</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>2</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>3cb8ef6c-6872-44f7-a46a-708e52823db1</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>_____________________________________________________________________________________________</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>086e91b0-994e-4a80-b1cf-7c9bdc08813f</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>8e029a84-b221-41e5-9959-f891abd13a56</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>b7e99674-8d80-4206-9db9-e01cfc84c325</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context>/////////////////////////////////////////////////////////////////////////////////////////////////</Context>
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
        <CommandAction>
          <PairingSet>false</PairingSet>
          <PairingSetElse>false</PairingSetElse>
          <Ordinal>0</Ordinal>
          <ConditionMet xsi:nil="true" />
          <IndentLevel>0</IndentLevel>
          <ConditionSkip>false</ConditionSkip>
          <IsSuffixAction>false</IsSuffixAction>
          <DecimalTransient1>0</DecimalTransient1>
          <Id>b259978c-9940-4c46-9e89-fdea2fcfd42b</Id>
          <ActionType>Comment</ActionType>
          <Duration>0</Duration>
          <Delay>0</Delay>
          <KeyCodes />
          <Context />
          <X>0</X>
          <Y>0</Y>
          <Z>0</Z>
          <InputMode>0</InputMode>
          <ConditionPairing>0</ConditionPairing>
          <ConditionGroup>0</ConditionGroup>
          <ConditionStartOperator>0</ConditionStartOperator>
          <ConditionStartValue>0</ConditionStartValue>
          <ConditionStartValueType>0</ConditionStartValueType>
          <ConditionStartType>0</ConditionStartType>
          <DecimalContext1>0</DecimalContext1>
          <DecimalContext2>0</DecimalContext2>
          <DateContext1>0001-01-02T00:00:00Z</DateContext1>
          <DateContext2>0001-01-02T00:00:00Z</DateContext2>
          <Disabled>false</Disabled>
          <RandomSounds />
          <ConditionExpressions />
          <IntegerContext1>0</IntegerContext1>
          <IntegerContext2>0</IntegerContext2>
        </CommandAction>
      </ActionSequence>
      <Async>true</Async>
      <Enabled>true</Enabled>
      <Description>AVCS4 BMS -- Inline Functions Build Output</Description>
      <Category>Script Functions - ALL Inline Functions for Build</Category>
      <UseShortcut>false</UseShortcut>
      <keyValue>0</keyValue>
      <keyShift>0</keyShift>
      <keyAlt>0</keyAlt>
      <keyCtrl>0</keyCtrl>
      <keyWin>0</keyWin>
      <keyPassthru>true</keyPassthru>
      <UseSpokenPhrase>false</UseSpokenPhrase>
      <onlyKeyUp>false</onlyKeyUp>
      <RepeatNumber>2</RepeatNumber>
      <RepeatType>0</RepeatType>
      <CommandType>0</CommandType>
      <SourceProfile>00000000-0000-0000-0000-000000000000</SourceProfile>
      <UseConfidence>false</UseConfidence>
      <minimumConfidenceLevel>0</minimumConfidenceLevel>
      <UseJoystick>false</UseJoystick>
      <joystickNumber>0</joystickNumber>
      <joystickButton>0</joystickButton>
      <joystickNumber2>0</joystickNumber2>
      <joystickButton2>0</joystickButton2>
      <joystickUp>false</joystickUp>
      <KeepRepeating>false</KeepRepeating>
      <UseProcessOverride>false</UseProcessOverride>
      <ProcessOverrideActiveWindow>true</ProcessOverrideActiveWindow>
      <LostFocusStop>false</LostFocusStop>
      <PauseLostFocus>false</PauseLostFocus>
      <LostFocusBackCompat>true</LostFocusBackCompat>
      <UseMouse>false</UseMouse>
      <Mouse1>false</Mouse1>
      <Mouse2>false</Mouse2>
      <Mouse3>false</Mouse3>
      <Mouse4>false</Mouse4>
      <Mouse5>false</Mouse5>
      <Mouse6>false</Mouse6>
      <Mouse7>false</Mouse7>
      <Mouse8>false</Mouse8>
      <Mouse9>false</Mouse9>
      <MouseUpOnly>false</MouseUpOnly>
      <MousePassThru>true</MousePassThru>
      <joystickExclusive>false</joystickExclusive>
      <lastEditedAction>3bdba1e8-47bd-4a5c-a8db-d5045c206f1a</lastEditedAction>
      <UseProfileProcessOverride>false</UseProfileProcessOverride>
      <ProfileProcessOverrideActiveWindow>false</ProfileProcessOverrideActiveWindow>
      <RepeatIfKeysDown>false</RepeatIfKeysDown>
      <RepeatIfMouseDown>false</RepeatIfMouseDown>
      <RepeatIfJoystickDown>false</RepeatIfJoystickDown>
      <AH>0</AH>
      <CL>0</CL>
      <HasMB>false</HasMB>
      <UseVariableHotkey>false</UseVariableHotkey>
      <CLE>0</CLE>
      <EX1>false</EX1>
      <EX2>false</EX2>
      <InternalId xsi:nil="true" />
      <HasInput>false</HasInput>
      <HotkeyDoubleTapLevel>0</HotkeyDoubleTapLevel>
      <MouseDoubleTapLevel>0</MouseDoubleTapLevel>
      <JoystickDoubleTapLevel>0</JoystickDoubleTapLevel>
      <HotkeyLongTapLevel>0</HotkeyLongTapLevel>
      <MouseLongTapLevel>0</MouseLongTapLevel>
      <JoystickLongTapLevel>0</JoystickLongTapLevel>
      <AlwaysExec>false</AlwaysExec>
      <ResourceBalance>0</ResourceBalance>
      <PreventExec>false</PreventExec>
      <ExternalEventsEnabled>false</ExternalEventsEnabled>
      <ExcludeExecOnRecognized>false</ExcludeExecOnRecognized>
      <UseVariableMouseShortcut>false</UseVariableMouseShortcut>
      <UseVariableJoystickShortcut>false</UseVariableJoystickShortcut>
    </Command>
  </Commands>
  <OverrideGlobal>false</OverrideGlobal>
  <GlobalHotkeyIndex>0</GlobalHotkeyIndex>
  <GlobalHotkeyEnabled>false</GlobalHotkeyEnabled>
  <GlobalHotkeyValue>0</GlobalHotkeyValue>
  <GlobalHotkeyShift>0</GlobalHotkeyShift>
  <GlobalHotkeyAlt>0</GlobalHotkeyAlt>
  <GlobalHotkeyCtrl>0</GlobalHotkeyCtrl>
  <GlobalHotkeyWin>0</GlobalHotkeyWin>
  <GlobalHotkeyPassThru>false</GlobalHotkeyPassThru>
  <OverrideMouse>false</OverrideMouse>
  <MouseIndex>0</MouseIndex>
  <OverrideStop>false</OverrideStop>
  <StopCommandHotkeyEnabled>false</StopCommandHotkeyEnabled>
  <StopCommandHotkeyValue>0</StopCommandHotkeyValue>
  <StopCommandHotkeyShift>0</StopCommandHotkeyShift>
  <StopCommandHotkeyAlt>0</StopCommandHotkeyAlt>
  <StopCommandHotkeyCtrl>0</StopCommandHotkeyCtrl>
  <StopCommandHotkeyWin>0</StopCommandHotkeyWin>
  <StopCommandHotkeyPassThru>false</StopCommandHotkeyPassThru>
  <DisableShortcuts>false</DisableShortcuts>
  <UseOverrideListening>false</UseOverrideListening>
  <OverrideJoystickGlobal>false</OverrideJoystickGlobal>
  <GlobalJoystickIndex>0</GlobalJoystickIndex>
  <GlobalJoystickButton>0</GlobalJoystickButton>
  <GlobalJoystickNumber>0</GlobalJoystickNumber>
  <GlobalJoystickButton2>0</GlobalJoystickButton2>
  <GlobalJoystickNumber2>0</GlobalJoystickNumber2>
  <ReferencedProfile>9b6d7d13-611b-4b4b-8734-d774492fc967</ReferencedProfile>
  <ExportVAVersion>2.1.7.1</ExportVAVersion>
  <ExportOSVersionMajor>10</ExportOSVersionMajor>
  <ExportOSVersionMinor>0</ExportOSVersionMinor>
  <OverrideConfidence>false</OverrideConfidence>
  <Confidence>0</Confidence>
  <CatchAllEnabled>false</CatchAllEnabled>
  <CatchAllId xsi:nil="true" />
  <InitializeCommandEnabled>true</InitializeCommandEnabled>
  <InitializeCommandId>b1c60e42-7654-4c0e-9bdf-61af51313b4b</InitializeCommandId>
  <UseProcessOverride>true</UseProcessOverride>
  <ProcessOverride />
  <ProcessOverrideAciveWindow>true</ProcessOverrideAciveWindow>
  <DictationCommandEnabled>false</DictationCommandEnabled>
  <DictationCommandId xsi:nil="true" />
  <EnableProfileSwitch>false</EnableProfileSwitch>
  <CategoryGroups />
  <GroupCategory>true</GroupCategory>
  <LastEditedCommand>a8476169-ae91-472d-a019-8961915abe0e</LastEditedCommand>
  <IS>0</IS>
  <IO>1</IO>
  <ReferencedProfiles />
  <IP>0</IP>
  <BE>0</BE>
  <UnloadCommandEnabled>false</UnloadCommandEnabled>
  <UnloadCommandId xsi:nil="true" />
  <BlockExternal>false</BlockExternal>
  <AuthorID>e1cd2743-0930-4834-a9be-37407d9cdac0</AuthorID>
  <ProductID>15801748-36c1-4450-a569-3d1145adbdc8</ProductID>
  <CR>0</CR>
  <InternalID xsi:nil="true" />
  <PR>0</PR>
  <CO>0</CO>
  <OP>0</OP>
  <CV>0</CV>
  <PD>0</PD>
  <PE>0</PE>
  <ExecOnRecognizedEnabled>false</ExecOnRecognizedEnabled>
  <ExecOnRecognizedId xsi:nil="true" />
  <ExecOnRecognizedRejected>false</ExecOnRecognizedRejected>
  <ExcludeGlobalProfiles>false</ExcludeGlobalProfiles>
  <DisableAdvancedTTS>false</DisableAdvancedTTS>
  <RPR>0</RPR>
  <Deleted>false</Deleted>
</Profile>
